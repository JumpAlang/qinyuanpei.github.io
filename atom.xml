<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Payne&#39;s Blog</title>
  
  <subtitle>起风了，唯有努力生存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qinyuanpei.github.io/"/>
  <updated>2020-02-04T10:39:03.255Z</updated>
  <id>https://qinyuanpei.github.io/</id>
  
  <author>
    <name>Payne</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从 .NET Core 2.2 升级到 3.1 的踩坑之旅</title>
    <link href="https://qinyuanpei.github.io/posts/3099575458/"/>
    <id>https://qinyuanpei.github.io/posts/3099575458/</id>
    <published>2020-01-22T10:23:08.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>有时候，版本更新太快并不是一件好事。虽然，两周一个迭代的“敏捷”开发依然被客户嫌弃交付缓慢，可一边是前端领域“求不要再更新了，学不动了”的声音，一边则是.NET Core从1.x到2.x再到3.x的高歌猛进。版本更新太快，带来的是API的频繁变动，无法形成有效的知识沉淀，就像转眼到了2020年，<code>Python2.x</code>和<code>Windows7</code>都引来了“寿终正寝”，可能你都还没有认真地学习过这些知识，突然就被告知这些知识要过期了，想想还是觉得挺疯狂啊。最近一直在捣鼓，如何让<code>.NET Core</code>应用跑在<code>Heroku</code>平台上，因为<code>Docker</code>镜像里使用最新的.NET Core 3.1运行时，所以，痛定思痛之余，决定把手头项目升级到3.1。上一次痛苦还是在2.1升级2.2，这还真没过多长时间。所以呢，这篇博客主要梳理下从2.2升级到3.1过程中遇到的问题。</p><h1 id="更新项目文件"><a href="#更新项目文件" class="headerlink" title="更新项目文件"></a>更新项目文件</h1><ul><li>调整目标框架为<code>netcoreapp3.1</code></li><li>删除引用项：<code>Microsoft.AspNetCore.App</code>、<code>Microsoft.AspNetCore.Razor.Design</code></li><li>删除<code>AspNetCoreHostingModel</code>，如果项目文件中的值为<code>InProcess</code>(因为ASP.NET Core 3.0 或更高版本项目默认为进程内承载模型）</li></ul><h1 id="更新程序入口"><a href="#更新程序入口" class="headerlink" title="更新程序入口"></a>更新程序入口</h1><ul><li>CreateWebHostBuilder()方法的返回值类型由<code>IWebHostBuilder</code>调整为<code>IHostBuilder</code></li><li>增加引用项：<code>Microsoft.Extensions.Hosting</code></li><li><code>Kestrel</code>配置变更至<code>ConfigureWebHostDefaults()</code>方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder CreateWebHostBuilder(<span class="built_in">string</span>[] args) =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureWebHostDefaults(<span class="function"><span class="params">webBuilder</span> =&gt;</span></span><br><span class="line">         &#123;</span><br><span class="line">             webBuilder.ConfigureKestrel(<span class="function"><span class="params">serverOptions</span> =&gt;</span></span><br><span class="line">             &#123;</span><br><span class="line">                    <span class="comment">// Set properties and call methods on options</span></span><br><span class="line">             &#125;)</span><br><span class="line">             .UseStartup&lt;Startup&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如果通过 <code>HostBuilder</code>手动创建宿主，则需要在 <code>ConfigureWebHostDefaults()</code>方法中显式调用·<code>UseKestrel()</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> Main (<span class="built_in">string</span>[] args) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> host = <span class="keyword">new</span> HostBuilder ()</span><br><span class="line">        .UseContentRoot (Directory.GetCurrentDirectory ())</span><br><span class="line">        .ConfigureWebHostDefaults (<span class="function"><span class="params">webBuilder</span> =&gt;</span> </span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.UseKestrel (<span class="function"><span class="params">serverOptions</span> =&gt;</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Set properties and call methods on options</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .UseIISIntegration ()</span><br><span class="line">            .UseStartup&lt;Startup&gt; ();</span><br><span class="line">        &#125;)</span><br><span class="line">        .Build ();</span><br><span class="line"></span><br><span class="line">    host.Run ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新Startup"><a href="#更新Startup" class="headerlink" title="更新Startup"></a>更新Startup</h1><ul><li><code>Configure()</code>方法第二个参数由``IHostingEnvironment<code>调整为</code>IWebHostEnvironment<code>(需要引用</code>Microsoft.Extensions.Hosting`)</li><li>从管道中删除<code>UseMvc()</code>扩展方法，相应地，删除<code>AddMvc()</code>及其链式调用相关方法</li><li><code>AddMvc()</code>等价于<code>AddRazorPages()</code> + <code>AddControllersWithViews()</code></li><li><code>AddControllers()</code>对应<code>WebApi</code>模板，<code>AddControllersWithViews()</code>对应<code>MVC</code>模板，<code>AddRazorPages()</code>对应<code>SPA</code>模板</li><li>路由注册由<code>传统路由</code>调整为<code>终结点路由</code>：</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void Configure(IApplicationBuilder <span class="keyword">app</span>, IWebHostEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">app</span>.UseStaticFiles();</span><br><span class="line">    <span class="keyword">app</span>.UseRouting();</span><br><span class="line">    <span class="keyword">app</span>.UseCors();</span><br><span class="line">    <span class="keyword">app</span>.UseAuthentication();</span><br><span class="line">    <span class="keyword">app</span>.UseAuthorization();</span><br><span class="line">    <span class="keyword">app</span>.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//SignalR路由      </span></span><br><span class="line">        endpoints.MapHub&lt;ChatHub&gt;(<span class="string">"/chat"</span>);</span><br><span class="line">        <span class="comment">//RazorPages路由</span></span><br><span class="line">        endpoints.MapRazorPages()</span><br><span class="line">        <span class="comment">//特性路由(WebApi)</span></span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">        <span class="comment">//控制器路由(MVC)</span></span><br><span class="line">        endpoints.MapControllerRoute(<span class="string">"default"</span>, <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望继续使用<code>传统路由</code>，则可以使用下列方法任一：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.<span class="constructor">AddMvc(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddControllers(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddControllersWithViews(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddRazorPages()</span>.<span class="constructor">AddMvcOptions(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h1><ul><li>从<code>.NET Core 3.0</code> 开始，<code>System.Text.Json</code>默认作为替代<code>Newtonsoft.json</code>的新一代JSON API</li><li>直接从<code>.NET Core 3.0</code> 创建的SignalR项目，服务端返回的JSON数据存在大小写的问题，这是由<code>System.Text.Json</code>引起的。解决方案是：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.<span class="constructor">AddSignalR()</span></span><br><span class="line">    .<span class="constructor">AddJsonProtocol(<span class="params">options</span> =&gt; <span class="params">options</span>.PayloadSerializerOptions.PropertyNamingPolicy = <span class="params">null</span>)</span>;</span><br></pre></td></tr></table></figure><p>同理，对于该方案对于<code>services.AddControllers()</code>一样有效，前提是项目中使用了<code>System.Text.Json</code>。同理，对于SignalR的客户端项目，我们有：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">HubConnectionBuilder</span>()</span><br><span class="line">    <span class="selector-class">.WithUrl</span>(<span class="string">"/chatHub"</span>)</span><br><span class="line">    <span class="selector-class">.AddJsonProtocol</span>(options =&gt;</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="selector-class">.Build</span>();</span><br></pre></td></tr></table></figure><ul><li>SignalR的JavaScript客户端由<code>@aspnet/signalr</code> 调整为为<code>@microsoft/signalr</code>：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const signalR = require(<span class="string">"@microsoft/signalr"</span>);</span><br><span class="line">let<span class="built_in"> connection </span>= new signalR.HubConnectionBuilder().withUrl(url).build();</span><br></pre></td></tr></table></figure><ul><li>如果希望继续使用<code>Newtonsoft.json</code>，则需要安装<code>AspNetCore NewtonsoftJson</code>。相应地，需要显式调用<code>AddNewtonsoftJson()</code>扩展方法：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddControllers()</span><br><span class="line">    .AddNewtonsoftJson(<span class="function"><span class="params">options</span> =&gt;</span> </span><br><span class="line">    &#123;</span><br><span class="line">        options.SerializerSettings.ContractResolver = <span class="keyword">new</span> CamelCasePropertyNamesContractResolver();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>同样地，<code>AddNewtonsoftJson()</code>支持<code>AddControllers()</code>， <code>AddControllersWithViews()</code>， <code>AddRazorPages()</code>所有方法</p><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><ul><li>升级后提示无法加载类型：<code>Microsoft.AspNetCore.Mvc.MvcJsonOptions</code>，解决方案是：<br>升级<code>Swashbuckle.AspNetCore</code>至最新版本(5.0+)，调整Swagger中间件配置代码：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(<span class="function"><span class="params">swagger</span> =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里发生了变化，需要引用：Microsoft.OpenApi.Models</span></span><br><span class="line">    swagger.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> OpenApiInfo &#123; Title = <span class="string">"ynamic WebApi"</span>, Version = <span class="string">"v1.0"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>安装完 <code>.NET Core 3.x</code>，使用<code>dotnet build</code>编译项目提示找不到<code>Microsoft.NET.Sdk.Web</code>。解决方案是：<br>升级2.2的时候，调整项目文件中的<code>Microsoft.NET.Sdk.Web</code>为<code>Microsoft.NET.Sdk</code>可以解决，而这个方法在3.x以后失效。<br>此时，可以检查环境变量<code>MSBuildSDKsPath</code>中的SDK版本和实际版本是否一致，尤其是像博主这样从2.0一路升级到3.x的朋友，应该都会遇到这个问题。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/migration/22-to-30?view=aspnetcore-2.2&tabs=visual-studio" target="_blank" rel="noopener">从 ASP.NET Core 2.2 迁移到3.0</a></li><li><a href="https://www.cnblogs.com/Irving/p/11587556.html" target="_blank" rel="noopener">升级 ASP.NET Core 3.0 设置 JSON 返回 PascalCase 格式与 SignalR 问题</a></li><li><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1030" target="_blank" rel="noopener">Incompatibility with ASP.NET Core 3.0</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="SignalR" scheme="https://qinyuanpei.github.io/tags/SignalR/"/>
    
      <category term="迁移" scheme="https://qinyuanpei.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>不知老之将至</title>
    <link href="https://qinyuanpei.github.io/posts/888549816/"/>
    <id>https://qinyuanpei.github.io/posts/888549816/</id>
    <published>2020-01-01T08:46:24.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>我以为，时间是这个世界上最残忍的存在。因为，无论如何，你都无法阻止这如齿轮般互相咬合的时光机器，即使这世界上并没有所谓的“永动机”。习惯于沉默的时间之轮，你在或者不在，丝毫不影响它衡量宇宙万物的尺度。也许，是因为我们所拥有的时间太过短暂，所以，当一切都流失殆尽时，我们所能寄托的便只有不那么确定的未来。时间怎么会变得残忍呢？它无喜无悲俯视众生，倒像是一位入定参禅的老僧，有情感的分明是我们这些人类啊。</p><p>孔夫子说：发奋忘食，乐以忘忧，不知老之将至。而有时候，你甚至都没有怎么“发奋”、“快乐”，就不知老之将至了。也许，花了不少时间在工作甚至加班上面，如果这些可以算作“发奋”，老之将至才是符合人类生理趋势的必然。上个周末去看了《叶问4》的完结篇，突然发现，无论是戏里的叶师傅，还是戏外的甄子丹，居然都出现衰老的迹象。而童年记忆中的黄飞鸿则永远是白鹤亮翅的宗师气象，大概是因为《黄飞鸿》系列不曾像《叶问》系列，在功夫片的体裁外，多了一点传记电影的味道。有人说，这是华语功夫片的一次谢幕，而我更愿意理解为，这是演员同过去的自己的阶段性告别。人总是会老的，从公交车上为老人让座的宣传广播，到父母见一次就白一次的鬓角，再到一天比一天翻得飞快的日历……你，又是如何同过去的自己告别的呢？</p><p>Flag这种东西，是一种不立没有所谓“仪式感”，而立了又难免让你自愧虚度时光的存在。在过去的一年里，索性一个Flag都不立，这样看过来的时候，人生充满了一种荒芜感：微信公众号运营失败，因为缺少那个想让你运营下去的观众；博客写作无功无过，每月1至2篇文章，作为阶段性的回顾尚可；懒散/拖延症中晚期，此时此刻还有来自2019年的Todo；通过微软小英练习单词和口语，这一点没能坚持下来，更不必说连50音图都没学会的日语；没有被消费主义洗脑，量入为出、精简开支(穷得如此清新脱俗)；一个人做饭没怎么坚持下来，单单是准备食材就挺麻烦了，更何况炒菜锅坏了一直没换新的呢；工作快5年了，我还是没太大长进，还是喜欢怼人怼空气，沟通能力是挺重要了，可惜精力都被开会、扯皮这种事情消耗得差不多了啊；阅读量还是太少，从公司/图书馆借来的书，一般都能找时间去读，而下载下来放Kindle里的，读着读着就被遗忘了，订阅的RSS读起来倒没有这种压力，果然“书非借不能读也”。《一代宗师》里说，人活得是一个起伏，而我这一年是没能活成一杯烈酒的。人喜欢用平凡是真自我安慰，可都怕活成最平庸的样子，用天哥的话说，做人没意思啊！</p><p>醒来的时候和往常一样，一样到和平时上班没什么区别，直到我坐上公交车，惊诧于路上行人为何如此稀少时，我突然意识到，原来今天是2020年的第一天啊，原来2019年就这样失去了啊，原来今天元旦放假啊……习惯其实是件可怕的事情，我妈和我说，是我工作太认真了，确切地说，来到这家新公司后，太多的习惯都被改变了，譬如Deadline驱动开发而导致的加班，譬如身为乙方这个弱势群体的被动，譬如周末一样要被同事电话打扰的无力感……互联网在深入到这个世界的各个角落的同时，互联网从业者的生存环境反倒更加举步维艰，资本家们鼓吹996是一种福报，某企业用251来对待离职的员工，因为加班而过劳死留下孤儿遗孀的软通员工，因为被裁员而无力维持生活选择跳楼的员工……</p><p>詹青云在《奇葩说》里的一段话令我印象深刻，她说，整个社会都在选择性忽视对与错的问题，仅仅是因为这样子做更划算些，一群活生生的人就被当做冰冷的数字一样计算。《红楼梦》里说，“机关算尽太聪明，反误了卿卿性命”，一个大家都互相算计的世界是绝望的，而这种“划算”的想法有一天变成主流则是可怕的。有好几次工作到深夜凌晨，回到家困到直接穿着衣服睡着的我，恍惚中应该会同我的灵魂对话：到底是一件多么惊天动地的事情，需要我连命都不要地熬到这个点。对企业对说，它需要的是“划算”的员工。而对员工来说，生命比一切都重要。即使为社会这部大机器而殚精竭虑甚至牺牲生命，这部如永动机一般的大机器依旧不会停止，我们不需要去追赶整个社会的效率。如果追赶会有什么下场呢？卓别林的《摩登时代》已经告诉过你答案。</p><p>可笑的是，人类能接受同类所指定规则，唯独要抗衡比人类更高层次的自然规律。你、我，这个世界上的每一个人都会死，这是所有人都无法逃脱的自然规律，即使是同为人类的医生一样会死，难道医生都是神灵或者天使吗？《白色巨塔》中的財前医生医术精湛，可当面对身患癌症的自己时，一样回天乏术。医学的发展自始至终都是建立在死亡上的，我们不能在享受医学带来的好处的同时，仅仅因为那个人是你或我的亲人，就去伤害这些医疗工作者，因为他们和我们一样，都是普普通通的人，他们唯一比我们多的就是医术，可医术甚至于这世界上一切人类发明的东西，都不是万能的啊。</p><p>伤害别人，永远无法弥补我们对逝者的愧疚。生命原本就如此脆弱，如果身为医生而没能抢救过来自己的亲人，按照这套“划算”但不“正确”的理论，那么医生是不是应该选择自杀？我说，这个问题根本不需要多想，因为逝者已逝，让更多的人活下来，九泉之下有知的逝者或许会感到欣慰吧……如果你相信人死后灵魂会得到转世，那么，让逝者的生命从下一个新生命中得到延续不好吗？我们这个世界有一种病态的观念，对待客户要毕恭毕敬，对待患者要高风亮节，可如果有一天这些人要对你做出过分的事情，难道你还要一忍再忍吗？</p><p>人有时候会刻意拉大时空的疏离感，就像我第一次看《叶问》还是在同学的MP4上，我甚至都没有看过《叶问1》里“我要打10个”的名场面，因为第一次看《叶问》的时候，叶师傅已经在大圆桌上同洪师傅切磋武艺了。可当你回首时，时间已经过去10年啦，虽然在这10年里，罗师傅的武功一直没什么长进，而叶师傅的对手则一直在变强。翻过年以后，我就28岁啦，如果回头看我的10年，时间大概一样会变得空泛，因为有的人来来回回地从你生命里来了又去，而有的人甚至从未真正进入过你生命里。当时过境迁，你唯一能留下的就只有自己，我虽庆幸见证过那些花儿的开放，可那些花儿终究不是我的。也许，她们和我一样都渐渐老去了吧，听起来有些矫情对不对？其实，昨天和这些年里的每一天没有什么不同，甚至还要更普通些，因为我又没能控制住情绪发了火，记忆啊，终究带着些美化的滤镜……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="生活感悟" scheme="https://qinyuanpei.github.io/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="回顾" scheme="https://qinyuanpei.github.io/tags/%E5%9B%9E%E9%A1%BE/"/>
    
      <category term="2019" scheme="https://qinyuanpei.github.io/tags/2019/"/>
    
      <category term="年度" scheme="https://qinyuanpei.github.io/tags/%E5%B9%B4%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Liquid实现简单的数据交换</title>
    <link href="https://qinyuanpei.github.io/posts/3742212493/"/>
    <id>https://qinyuanpei.github.io/posts/3742212493/</id>
    <published>2019-12-22T09:36:42.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在平时的开发工作中，接口对接是一件无可避免的事情。虽然在“前后端分离”的大趋势下，后端的角色逐渐转换为数据接口的提供者，然而在实际的应用场景中，我们面对的往往是各种不同的“数据”，譬如企业应用中普遍使用的企业服务总线(ESB)，这类服务要求服务接入者必须使用WebService来作为数据交换格式；再譬如电子数据交换(EDI)这种特定行业中使用的数据交换格式，从可读性上甚至还不如基于XML的WebService……而更为普遍的则可能是需要使用Word、Excel、CSV来作为数据交换的媒介。顺着这个思路继续发散下去，进入我们失业的或许还有各种数据库，譬如MySQL和MongoDB；各种大数据平台，譬如Hadoop和Spark；各种消息队列，譬如RabbitMQ和Kafka等等。</p><p>注意到，这里反复提到的一个概念是数据交换(Data Switching)，它是指在多个数据终端设备间，为任意两个终端设备建立数据通信临时互联通路的过程。自从阿里提出“中台”的概念以来，越来越多的公司开始跟风“中台”概念，并随之衍生出譬如组织中台、数据中台、业务中台、内容中台等等的概念。今天这篇博客，我并不打算故弄玄虚地扯这些概念，我的落脚点是接口级别的数据交换，主要通过Liquid这款模板引擎来实现。它对应我在这篇博客开头提到的场景：一个对外提供RESful风格API的系统，如何快速地和一个WebService实现对接。总而言之，希望能对这篇博客对大家有所启发吧！</p><h2 id="关于Liquid"><a href="#关于Liquid" class="headerlink" title="关于Liquid"></a>关于Liquid</h2><p>首先，我们来介绍<a href="https://shopify.github.io/liquid" target="_blank" rel="noopener">Liquid</a>，通过它的官方网站，我们应该它是一门模板语言。对于模板语言，我们应该是非常熟悉啦，JavaScript里的<a href="https://handlebarjs.com" target="_blank" rel="noopener">Handlebars</a>和<a href="https://ejs.bootcss.com" target="_blank" rel="noopener">Ejs</a>就是非常著名的模板语言。如大家所见，这个博客就是用<code>Ejs</code>模板渲染出来的。而到了三大前端框架并驾齐驱的时代，模版语法依然被保留了下来，比如<code>Vue</code>中<code>{{model.userName}}</code>标记常常用来做文本插值。所以，如果要认真追溯起来的话，也许这些框架都或多或少的收到了<code>Liquid</code>的影响，因为它的基本语法如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//使用<span class="meta">page</span>实例的<span class="meta">title</span>属性插值</span><br><span class="line">&#123;&#123; <span class="meta">page</span>.<span class="meta">title</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>假设page是一个对象，它的title属性值为：Introduction，此时，渲染后的结果即为：Introduction。是不是感觉非常简单呢? 我们继续往下看。除了基本的“插值”语法以外，我们可以用<code>{% tag %}</code>这种结构(Liquid称之为Tag)：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//声称变量author并赋值</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">sssign</span> author = '猫先森' %&#125;</span></span><br><span class="line"><span class="xml">//条件语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> author == '猫先森' %&#125;</span></span><br><span class="line"><span class="xml">帅哥，你好</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">//循环语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in posts %&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;post.<span class="name">date</span>&#125;&#125;</span><span class="xml">-</span><span class="template-variable">&#123;&#123;post.title&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>这里仅仅展示了一部分<code>Liquid</code>的特性，但对于我们了解一门“语言”已经足够了，因为对于一门编程语言来说，只要学会顺序、条件和循环三种结构足矣。言下之意呢，像常规<code>else</code>、<code>elseif</code>、<code>break</code>和<code>continue</code>，<code>Liquid</code>都是支持的，这样子是不是更有编程语言的感觉了呢？除此之外，它还支持像<code>tablerow</code>这样的Tag，主要用来渲染HTML里的表格。</p><p>也许有人想说，这玩意儿有什么用呢？抱歉啊，这玩意儿还真有用。像发送邮件、发送短信这种一般都需要写个字符串模板的，简单的大家可以用<code>String.Format()</code>或者<code>$</code>来搞定，可一旦遇上循环的场景，这种基于字符串替换的方式就有点力不从心了。不开玩笑地说，在代码里用<code>StringBuilder</code>拼接HTML的方式，实在是太傻逼了。如果用<code>Liquid</code>写可能就是：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">亲爱的</span><span class="template-variable">&#123;&#123; model.UserID &#125;&#125;</span><span class="xml">:</span></span><br><span class="line"><span class="xml">   您好！您有以下设备即将超过校验有效期，请及时采取有效行动。</span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> equipment <span class="keyword">in</span> model.Equipments %&#125;</span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; equipment.EquipmentID &#125;&#125;</span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="template-variable">&#123;&#123; model.SendBy &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>显然，这个代码比拼接字符串要优雅很多。博主曾经在一个前端页面看到过大量的HTML拼接操作，果然是jQuery操作DOM一时爽，jQuery操作DOM一直爽，可明明前端就有<a href="https://handlebarjs.com" target="_blank" rel="noopener">Handlebars</a>和<a href="https://ejs.bootcss.com" target="_blank" rel="noopener">Ejs</a>这样的模板语言。最近一位同事写前端页面的经历不由得让我感慨，眼睛觉得简单的事情，为什么总是要求手去做呢？直接操作DOM带来的弊端就是，业务逻辑永远和DOM纠缠在一起，那些没有人敢改的JavaScript代码，那些未经模块化全局引入的JavaScript代码，虽然马上就要2020年了，写下这些句子的时候还是感到魔幻，可能这就是所谓的魔幻现实主义吧。</p><p>OK, 我们把思绪拉回到<code>Liquid</code>。除了使用各种Tag实现流程控制以外，<code>Liquid</code>中还提供了过滤器(Filter)的概念，过滤器主要是配合<code>{{ variable | filter }}</code>语法来使用的。比如说，数据层返回了一个负数，而展示层希望展示正数，在不确定这个数值是否被别人使用的情况下，贸然去修改数据层的返回值是件危险的事情。此时，我们可以：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对绑定的变量或者值取绝对值</span></span><br><span class="line">&#123;&#123; <span class="number">-17</span> | <span class="keyword">abs</span>&#125;&#125;</span><br><span class="line"><span class="comment">//保留小数位</span></span><br><span class="line">&#123;&#123; <span class="number">183.357</span> | round: <span class="number">2</span> &#125;&#125;</span><br><span class="line"><span class="comment">//日期/时间格式</span></span><br><span class="line">&#123;&#123; article.created_date | data: %b %d, %Y&#125;&#125;</span><br></pre></td></tr></table></figure><p>类似小数点位数、日期/时间格式等问题，均可以在<code>Liquid</code>中找到相应的过滤器。需要说明的是，<code>Liquid</code>使用<code>Ruby</code>进行开发的。也许在读到这篇博客前，大家都没有听说过<code>Liquid</code>，那么至少听说过<code>Jekyll</code>这个著名的静态博客生成器吧。实际上，在我写这篇博客的时候，我刚刚了解到一件事情，<code>Jekyll</code>就是基于<code>Liquid</code>而开发的，想到当初搭建这个博客时被<code>Ruby</code>劝退的回忆，我大概想不到有一天会再次接触它吧，不得不说，人生还真是奇妙啊！</p><h2 id="一个简单的想法"><a href="#一个简单的想法" class="headerlink" title="一个简单的想法"></a>一个简单的想法</h2><p>好了，关于<code>Liquid</code>的介绍我们先了解到这里。写到这里，再回头去看我们一开始的问题，即：怎么把上游的数据(Model)转化为下游的数据(Template)。这里暂且抛开它到底是XML、JSON还是EDI这种细节性的问题，我想我们大概会有一个简单的想法，如果把需要传输给对方的接口报文做成模板，然后通过<code>Liquid</code>语法完成数据的绑定，那么数据映射这一层的工作就可以减轻不少，毕竟写<code>A.XXX=B.XXX</code>这种赋值语句是没什么前途的啦，而<code>AutoMapper</code>则需要提前写好Map并注册，经过一番权衡，我们来验证一下我们的想法吧！</p><p>这段时间一直在和金蝶K3Cloud接口做对接，坦白说我觉得金蝶的接口设计得非常糟糕，从它那个奇葩的<code>FNumber</code>字段就能看出来，而且它试图用一个接口做完所有事情的做法恕我不敢苟同，在我看来它违反了单一职责原则。因为要对接的接口数量多、字段多，我首先根据字段对应关系制作了一份<code>Liquid</code>模板，并根据业务上的需要，用主表(Main) + 明细表(Details)的方式来定义数据，这意味着我接下来只需要根据业务实现不同的数据源即可：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/23/HABb1GTJ3NCwedR.png" alt="基于Liquid的JSON报文模板" title="">                </div>                <div class="image-caption">基于Liquid的JSON报文模板</div>            </figure><p>好了，现在我们使用<code>Liquid</code>的.NET版本<a href="http://dotliquidmarkup.org" target="_blank" rel="noopener">DotLiquid</a>来负责模板的解析和渲染，这个库可以直接通过<code>Nuget</code>安装，可以注意到这个代码非常的简单：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">RenderTpl</span>(<span class="params"><span class="keyword">string</span> filePath, <span class="keyword">dynamic</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = File.ReadAllText(filePath);</span><br><span class="line">  <span class="keyword">var</span> template = Template.Parse(content);</span><br><span class="line">  <span class="keyword">var</span> output = template.Render(Hash.FromAnonymousObject(model));</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上渲染后的文本就是对方需要的接口报文了，此时，该怎么样就怎么样处理，只需要把这个报文发送给对方就可以了。唯一需要花时间的就是对字段、写绑定，相比写实体类的方式效率要高更多。这种方式的话，我个人觉得更适合分工合作，如果需要数据加字段，那在数据层(Model)里增加就好了，而像改字段映射关系、字段默认值都可以由别人来完成。我一直相信，开发并不是帮别人做越多事情越好，而是可以提供一种能力让别人去做更多的事情，这就是我们常常听到的“赋能”。继续延伸下去的话，传统的MVC其实和<code>Liquid</code>是一个道理，都是根据数据去生成视图，无非是我们这里的”视图”变成了数据报文。</p><h2 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h2><p>通过日常工作中的接口对接这一典型场景，我们引出了“数据交换”的概念，而最低层级的数据交换实际上是接口报文的交换。为此，我们介绍了<code>Liquid</code>模板引擎，它提供的语法可以让我们完成一系列的绑定，顺着这个思路，博主为大家展示了这种想法的可行性。<code>Liquid</code>是一个非常成熟的模板引擎，无论是编写邮件、短信的文本模板，还是轻量级的文本表达式实现，都是一个非常不错的选择。即使是做一个ApiCaller，一定要做一个有头脑的ApiCaller。好了，以上就是这篇博客的全部内容啦，欢迎大家留言，谢谢大家。</p><h2 id="2020-01-09-更新"><a href="#2020-01-09-更新" class="headerlink" title="2020-01-09 更新"></a>2020-01-09 更新</h2><p>在组织JSON中的数组结构时，需要在各元素间添加<code>,</code>，同时最后一个元素不需要<code>,</code>，此时，可以使用以下语法：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"FEntity"</span>: [</span><br><span class="line">  &#123;% <span class="keyword">for</span> Detail <span class="keyword">in</span> Details %&#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"FCOSTID"</span>: &#123;</span><br><span class="line">      <span class="string">"FNumber"</span>: <span class="string">"&#123;&#123;Detail.FCOSTID&#125;&#125;"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"FCOSTDEPARTMENTID"</span>: &#123;</span><br><span class="line">      <span class="string">"FNumber"</span>: <span class="string">"BM000005"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"FINVOICETYPE"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"FTOTALAMOUNTFOR"</span>: &#123;&#123;Detail.FEE_AMOUNT&#125;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> forloop.last == false %&#125;,&#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="Liquid" scheme="https://qinyuanpei.github.io/tags/Liquid/"/>
    
      <category term="数据交换" scheme="https://qinyuanpei.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/"/>
    
      <category term="模板引擎" scheme="https://qinyuanpei.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Referrer还是Referer? 一个迷人的错误</title>
    <link href="https://qinyuanpei.github.io/posts/2015300310/"/>
    <id>https://qinyuanpei.github.io/posts/2015300310/</id>
    <published>2019-12-04T17:22:33.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>诗人郑愁予曾经在一首诗中写道：<strong>我达达的马蹄是个美丽的错误，我不是归人，是个过客</strong>。而对我来说，十九岁之前的我，一样是个沉浸在诗歌中的文艺少年。十九岁之后的我，作为一名程序员，更多的是邂逅各种错误。可偏偏人类世界对待错误从来都不宽容，所以，<strong>错误本身既不美丽，亦不浪漫</strong>。接近中年的我，无论如何，都写不出年轻时令人惊艳的句子，这或许和我们面对错误时的不同心境，有着莫大的关联，而今天这篇博客，同样要从一个历史上的错误说起。</p><h1 id="因拼写而怀疑人生"><a href="#因拼写而怀疑人生" class="headerlink" title="因拼写而怀疑人生"></a>因拼写而怀疑人生</h1><p>话说，博主这天做了一个非常“简单”的功能，它允许用户通过富文本编辑器来编写HTML，而这些HTML会被插入到页面的特定位置，譬如用户可以为页脚的备案号添加一个超链接，当用户点击备案号的时候，就可以调转到工信部备案号查询的网站上。这个功能非常简单吧，因为这就是HTML中a标签的作用。博主快速了引入UEditor，虽然这个项目百度都不再继续维护了，虽然它直接把跨域问题甩锅给使用者，可我还是完成了这个功能。相信你能感受到我的不情愿吧，显然这不是重点，因为剧情的反转才是……</p><p>结果没高兴多久，测试同事就同我讲，客户提供的地址填进去以后，点击链接浏览器直接返回4XX，可明明这个地址敲到浏览器里就能打开啊……我脑海中快速地浮现出那道经典的面试题，浏览器里敲完地址按下回车的瞬间到底发生了什么？习惯性怀疑人生后，我发现居然是因为Referer的问题，从我们站点调转到客户站点的时候携带了Referer，虽然有很多种方法可以让浏览器禁止携带Referer，但我还是被这种历史性的错误搞得怀疑人生。因为人生最难的事情，就是“揣着明白装糊涂”和“揣着糊涂装明白”，所谓“假作真时真亦假”。</p><p>请注意区分<strong>Referer</strong>和<strong>Referrer</strong>这两个单词，眼尖的人会发现后者多了一个r，这有点像什么呢，大概类似于usr和user。我们总是不情愿地相信这是历史的错误，而固执地想要找到一种能自圆其说的理由。诚然，“前人栽树，后人乘凉”，可我实在不肯承认，这是一群卓越而智慧的先驱们，所创造出的某种高效简写。回顾一下，使用Referer的场合，基本都是在HTTP头部，最常见的场景就是防盗链，Nginx能用Referer判断访问者来源，爬虫就能用Referer和UserAgent伪造访问者身份。那什么时候用Referrer呢？我目前发现是在a标签的rel属性里，例如下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">href</span>=<span class="string">"https://www.w3school.com.cn/tags/att_a_rel.asp"</span>&gt;</span>w3school<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，rel属性还支持像nofollow、friend、licence这样的属性，详细地大家可以参考<a href="https://www.w3school.com.cn/tags/att_a_rel.asp" target="_blank" rel="noopener">这里</a>。相信大家想到博主经历了什么了，没错，我就是按照平时的书写习惯写了Referer，然后被Web标准委员会给疯狂地嘲讽了。那么，为什么表达同一个含义的词会有两种写法？为什么有时候要用Referer，而有时候要用Referrer? 这特么到底是怎么一回事儿……带着这些疑问，让我们一起回顾野蛮生长的Web标准，为什么要埋这样一个坑在这里。</p><h1 id="后世不忘，前世之锅？"><a href="#后世不忘，前世之锅？" class="headerlink" title="后世不忘，前世之锅？"></a>后世不忘，前世之锅？</h1><p>故事要追溯到上个世纪90年代，当时HTTP协议中需要有一个用来表示页面或资源来源的请求头部，Philip Hallam-Baker将这个请求头部定义为Referer，并将其写入了<a href="https://datatracker.ietf.org/doc/rfc1945/?include_text=1" target="_blank" rel="noopener">RFC1945</a>，这就是著名的HTTP/1.0协议。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/07/GE2WydKMf6HSk5n.png" alt="HTTP/1.0协议中定义的Referer" title="">                </div>                <div class="image-caption">HTTP/1.0协议中定义的Referer</div>            </figure><p>然而这里发生一件有趣的事情，这个单词实际上是被作者给拼错了，即正确的拼写应该是<code>Referrer</code>。因为发现这个错误时为时已晚，大量的服务端和客户端都采用了这个错误的拼写，谁让它被写到了HTTP协议里呢？这其中就有像Nginx里的<code>ngx_http_referer_module</code>、Django里的<code>HttpRequest.META.HTTP_REFERER</code>等等。考虑到这个错误波及的范围过大，HTTP标准制定者奉决心将错就错，于是在接下来的<a href="https://datatracker.ietf.org/doc/rfc2616/?include_text=1" target="_blank" rel="noopener">RFC2616</a>，即HTTP/1.1中，HTTP标准制定者追加了针对这个错误的说明:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/07/IwMpYPSls485CHx.png" alt="HTTP/1.1协议中定义的Referer" title="">                </div>                <div class="image-caption">HTTP/1.1协议中定义的Referer</div>            </figure><p>说到这里，大家至少明白了一件事情，这个错误的<code>Referer</code>其实是指<code>Referrer</code>。对于标准写错了这件事情，大家其实都能理解，因为只要是人就免不了会出错。可为什么不能一错到底呢？既然要使用<code>Referer</code>这个错误的拼写，那就一直这样错下去好了，为什么特么又冒出来个<code>Referrer</code>，虽然它的拼写的确是对的，可不统一的写法还是会让人抓狂啊！君不见<code>main</code>和<code>mian</code>傻傻分不清，君不见C++里<code>false</code>与<code>flase</code>的神奇宏定义。假如没有今天这个事情，我完全不知道还有<code>Referrer</code>的存在啊，可都拼错多少年了，我都把假当作真了，你突然这样搞，我还是会感到手足无措的啊！就像<code>Configuration</code>这个单词，虽然博主英语并不算太好，可至少敢拍着胸脯说这个单词没写错，结果有次我写对了反而让测试给我提了Bug，因为特么项目里定义的实际上是<code>Configuation</code>。你说，你这样让人崩溃不？</p><p>那么，为什么会有<code>Referrer</code>这个正确的拼写呢？这就要说到<code>Referrer-Policy</code>这个HTTP头部。不错，这次你没有看错，标准制定老爷们这次终于写对了。顾名思义，这是一种用来告诉浏览器应该如何发送Referer的策略。常见的取值有：no-referrer、no-referrer-when-downgrade、origin、origin-when-cross-origin、same-origin、strict-origin、strict-origin-when-cross-origin、unsafe-url，关于它们的含义及用途，大家可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">这里</a>。虽然我们经常吐槽JavaScript是一门垃圾语言，但是这一次，大家居然都非常齐心地统一了写法，譬如<code>DOM Level 2</code>里定义的 <code>document.referrer</code>、<code>Fetch API</code>中的<code>Request</code>接口的<code>referrer</code>属性等，这一次都写对了。而Referrer-Policy除了和JavaScript可以集成以外，同样可以和HTML、CSS集成。博主一开始遇到的问题，实际上就是和HTML集成的一个场景。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//meta标签里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"origin"</span>&gt;</span></span><br><span class="line">//出现在a, area, img, iframe, script, <span class="tag">&lt;<span class="name">link</span>&gt;</span>等元素里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">referrerpolicy</span>=<span class="string">"origin"</span>&gt;</span></span><br><span class="line">//出现在a, area, link等标签的rel属性里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而和CSS集成实际上就是style标签中的<code>referrerpolicy</code>属性，它默认是no-referrer-when-downgrade，我们可以在返回一个CSS文件的时候设置响应流的<code>Referrer-Policy</code>，或者是设置style标签中的<code>referrerpolicy</code>属性，这个就不展开讲啦！</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>通过这次被标准制定者按在地上摩擦的经历，居然无意中收获了这样一段”迷人”的历史。假如JavaScript这里为了兼容历史错误而使用<code>Referer</code>的话，可能博主就不会一边吐槽这个错误，一边又乖乖地滚去读RFC2616。从这里可以得出一个结论：<strong>HTTP 请求中的 Referer 是一个典型的拼写错误，历史悠久，可以预见还会一直错下去，以后 Referer 变成一个专有名词也说不定。所以一般涉及到读取 HTTP 请求头的场景，我们需要用 Referer 这种错误拼写(后端)；除此之外一般都要用 Referrer 这种正确的拼写(前端)</strong>。有人说，使用JavaScript开发同构应用的体验非常好，恐怕从今天这篇博客以后要打个折扣，因为你刚刚在后端写完<code>referer</code>，转眼就要在前端写<code>referrer</code>，希望像博主这样的<code>伪全栈工程师</code>不会因此而精神分裂。实用主义者能用就行的策略，让这个错误在很多年以后还被人提起，假如这些标准制定者尚在人世的话，不知道会不会在浏览网页的时候，想起第一次起草<code>RFC1945</code>的那个下午。果然，历史还真是迷人啊！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="HTTP" scheme="https://qinyuanpei.github.io/tags/HTTP/"/>
    
      <category term="历史" scheme="https://qinyuanpei.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="Referrer" scheme="https://qinyuanpei.github.io/tags/Referrer/"/>
    
  </entry>
  
  <entry>
    <title>关于单位转换相关问题的常见思路</title>
    <link href="https://qinyuanpei.github.io/posts/2318173297/"/>
    <id>https://qinyuanpei.github.io/posts/2318173297/</id>
    <published>2019-11-15T09:43:54.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>请原谅我使用了这样一个“直白”的标题，因为我实在想不到更好的描述方法。或许，是因为临近年底的“996”式冲刺，让许久没有读完一本书的我，第一次感受到输出时的闭塞。是时候为自己的知识体系补充新鲜血液啦，而不是输给那些“无聊”的流程和关系。说这句话的缘由，是想到《Unnatural》中的法医三澄美琴，一个视非正常死亡为敌人的女法医。而对程序员来说，真正的敌人则是难以解决Bug和问题。可更多的时间，我们其实是在为流程和关系方面的事情消耗精力。</p><p>我越来越发现，人类所面对的绝大多数问题，都并非是寻求一个最优解，而是在于平衡和牵制。人类总是不可避免地堕入熵增的圈套，伴随着流程产生的除了规范还有复杂度。每当人们试图为这种复杂度找一种友好的说辞的时候，我终于意识到，有的人不愿意去寻找问题的本质，它们需要的就只是一种友好的说辞，仿佛只要有了这种说辞，问题就能自动解决一样。我想，我大概知道这段时间感到焦灼的原因了，因为这样的事情在工作中基本是常态。人类每天面对的事情，无外乎两种：”明知不可为而为之”和”什么都想兼顾的美好理想”。</p><p>我今天想说的是，一个业务中遇到的单位转换的问题，我们平时在存储货物的重量时，默认都是以千克作为单位来存储的，直到我们对接了一家以大宗商品交易作为主要业务的客户，对方要求我们在界面上统一用吨来展示数据，因为这样更符合客户方的使用习惯。按理说，这是一个非常简单的需求，是不需要用一篇博客来说这件事情的，可我觉得这是个有意思的话题，还是想和大家一起来聊聊相关方案的思路。带着问题，我首先拜访了<a href="https://www.c-sharpcorner.com/members/catcher-wong" target="_blank" rel="noopener">Cather Wong</a>大佬，大佬微微一笑，表示在视图层上加个字段就可以了嘛。的确，这是最简单的做法，大概是下面这个样子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OrderInfoQueryDTO</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 以千克为单位的净重</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">decimal</span>? NET_WEIGHT &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 以吨为单位的净重</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">decimal</span>? NET_WEIGHT_WITH_TON</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">get</span> &#123; <span class="keyword">return</span> NET_WEIGHT / <span class="number">1000</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我不甘心地追问，客户要在原来的字段上显示这个数值啊，这样能行吗？大佬稍作沉思，随即问道：“你们公司的项目就算做不到DDD，AutoMapper这种实体间映射转换的东西总有吧！”。我连忙接话道：“这个自然是有的”。其实我心里想的是，总算有点符合我的心理预期啦，这样的方案还像个大佬的样子。按照大佬的提示，使用AutoMapper来做单位的转换，应该是下面这样：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; &#123;</span><br><span class="line">    cfg.CreateMap&lt;order_info, OrderInfoQueryDTO&gt;()</span><br><span class="line">        .ForMember(d =&gt; d.NET_WEIGHT, opt =&gt; opt.MapFrom(x =&gt; x.NET_WEIGHT/<span class="number">1000</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样看起来是比加字段要好一点，可实际项目中，我们往往会把单位作为一种配置持久化到数据库中，以我们公司为例，我们实际上是支持千克和吨两种单位混合使用的，不过在表头汇总的时候，为了统一到一起，所以使用了千克作为单位。这样就引申出一个新问题，假如我在数据库里存了多行明细的重量，当需要在表头展示汇总以后的总重量，那么，这个总重量到底是汇总好存在数据库里，还是展示的时候交由调用方Sum()呢？</p><p>我个人倾向于第二种，因为它能有效避免表头和明细行数据不一致的问题，当然缺点是给了调用方一定的计算压力。我们项目中采用的第一种方案，我印象非常深刻，在计算件数、重量和体积的时候，必须要等所有明细行都计算完以后，再通过调用Sum()方法给表头赋值，实际上这个表头字段，完全可以通过只读属性的方式取值啊，更何况我们还使用了外键，表头实体本身就引用了明细表实体，因为有外键的存在，序列化表头实体的时候会出现循环引用，对此，我想说，干得漂亮！</p><p>通过AutoMapper中的ForMember扩展方法，可以实现我们这里这个功能。可考虑到要在AutoMapper里引入权限啊、角色啊这些东西，AutoMapper作为实体映射的纯粹性就被彻底破坏了。为此，我们考虑使用AutoMapper中提供的<a href="https://docs.automapper.org/en/stable/Value-converters.html" target="_blank" rel="noopener">Value Converters</a>和<a href="https://docs.automapper.org/en/stable/Value-converters.html" target="_blank" rel="noopener">Type Converters</a>。关于这两者的区别，大家可以参考官方文档中的描述。此时，我们可以通过下面的方式使用这些“转换器”：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; &#123;</span><br><span class="line">    cfg.CreateMap&lt;order_info,OrderInfoQueryDTO&gt;()</span><br><span class="line">      .ForMember(d =&gt; d.NET_WEIGHT, opt =&gt; opt.ConvertUsing&lt;WeightValueConverter,<span class="keyword">decimal</span>?&gt;());</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> mapper = config.CreateMapper();</span><br><span class="line"><span class="keyword">var</span> orderInfo = <span class="keyword">new</span> order_info() &#123;</span><br><span class="line">    ORDER_ID = Guid.NewGuid().ToString(<span class="string">"N"</span>),</span><br><span class="line">    NET_WEIGHT = <span class="number">1245.78</span>M,</span><br><span class="line">    CREATED_DATE = DateTime.Now,</span><br><span class="line">    CREATED_BY = <span class="string">"灵犀一指陆小凤"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderInfoQueryDTO = mapper.Map&lt;order_info,OrderInfoQueryDTO&gt;(orderInfo);</span><br></pre></td></tr></table></figure><p>而对于WeightValueConverter这个类而言，它实现了IValueConverter接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> public class WeightValueConverter : IValueConverter&lt;decimal?, decimal?&gt; </span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span>? Convert (<span class="keyword">decimal</span>? sourceMember, ResolutionContext context) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//TODO：可以查数据库或者是由规则决定，是否转换以及如何转换</span></span><br><span class="line">        <span class="keyword">if</span> (!sourceMember.HasValue)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> sourceMember.Value / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，虽然代码还是这个代码，可至少我们不用在MapFrom里写太重的业务逻辑了，而且这个转换器是可以复用的。显然，我们的系统中不会只有订单模块会涉及到重量、体积的转换。此时，我们可以考虑使用ITypeConverter接口，遗憾地是，这个接口在实现的时候就必须指定源类型和目标类型，这样离我们设想地全局转换器实际上是有一点差距的。例如，我们有时候希望源类型中Null值不会覆盖到目标类型，最常见的情况是，从一个EditDTO转化为数据库实体对象并更新数据库。为了解决这个问题，AutoMapper下面的做法就非常棒：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfg.ForAllMaps((a, b) =&gt; b.ForAllMembers(opt =&gt; opt.Condition((src, dest, sourceMember) =&gt; sourceMember != <span class="literal">null</span>)));</span><br></pre></td></tr></table></figure><p>可对于我们这里这个场景，显然，我们必须要提供一部分类型信息，我们几乎很难给所有的Map增加一个通用的类型转换器。我最终还是通过反射解决了这个问题，即在使用AutoMapper前，从数据库查出数据后，首先要做的第一件事情就是对数值进行转换：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userSetting = UserContext.GetLoginUser().UserSettng;</span><br><span class="line"><span class="keyword">var</span> formatSetting = userSetting.FormatSetting;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当默认重量单位为KG时不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (formatSetting.DefaultWeightUom == WeightUnit.KG)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> properties = <span class="keyword">typeof</span>(TDestination).GetProperties()</span><br><span class="line">    .Where(p =&gt; p.Name.EndsWith(<span class="string">"WEIGHT"</span>) || p.Name.EndsWith(<span class="string">"Weight"</span>));</span><br><span class="line"><span class="keyword">if</span> (properties == <span class="literal">null</span> || !properties.Any())</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> destList)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//转化结果为吨</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> property <span class="keyword">in</span> properties)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">var</span> weightValue = property.GetValue(item, <span class="literal">null</span>);</span><br><span class="line">         <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(<span class="keyword">decimal</span>))</span><br><span class="line">         &#123;</span><br><span class="line">             property.SetValue(item, (<span class="keyword">decimal</span>)weightValue / <span class="number">1000</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(Nullable&lt;<span class="keyword">decimal</span>&gt;))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (weightValue != <span class="literal">null</span>)</span><br><span class="line">                  property.SetValue(item, (<span class="keyword">decimal</span>)weightValue / <span class="number">1000</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(<span class="keyword">string</span>))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(weightValue.ToString()))</span><br><span class="line">                 property.SetValue(item, <span class="keyword">decimal</span>.Parse(weightValue.ToString()) / <span class="number">1000</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，这段代码相当无聊，可无论多么无聊的功能，只要客户觉得好就给积极地去做，对吧！其实，说到底，这是我们在设计数据库表结构时遗留的一个问题。假如我们在存储的时候就存储为吨，问题还不会有什么不一样呢？实际上，它还是会有问题，因为你不得不去设计一个单位转换表，类似下面这样的：</p><table><thead><tr><th>原始单位</th><th>目标单位</th><th>进率</th></tr></thead><tbody><tr><td>Kg</td><td>T</td><td>1/1000</td></tr><tr><td>T</td><td>Kg</td><td>1000</td></tr><tr><td>g</td><td>Kg</td><td>1/1000</td></tr><tr><td>Kg</td><td>g</td><td>1000</td></tr></tbody></table><p>我们目前设计的表结构中实际上是有重量单位的，不同的是，我们以千克为单位存储的量，数据库中对应的WEIGHT_UOM存储的是1，而以吨为单位存储的量，数据库中对应的WEIGHT_UOM存储的是1000。所以，理论上真实的重量都应该是数据库中存储的量 X WEIGHT_UOM。这样看起来是没有问题的，可当你结合今天这篇博客的背景来看是，就会发现一个问题，所有的数值在展示的时候都必须要知道，数据库里存储的数值的原始单位是什么，而使用者希望在界面上看到的数值的单位又是什么。</p><p>不单单如此，当用户通过界面查询的时候，一个简单的数字便不等再用简单地使用像大于、小于、等于、不等于这样的查询条件，因为现在每个量都带着单位，你必须明确得知道，用户认为的单位是什么，而数据库里对应的单位又是什么？这样听起来貌似还是统一使用一种单位比较好，正因为如此，博主可以在查询前把吨转化为千克，而在查询后则可以把千克转换为吨。</p><p>人类世界总是存在着这些奇奇怪怪的规则，不同的小数位精度要求，不同的货币金额展示方式，不同的日期格式显示要求，就在我写下这篇博客的时候，产品同事反馈我千克转成吨展示以后，应该至少保留三位小数，否则会让人觉得数字会丢失了精度。我还能说什么呢？联想到最近软通因为加班而猝死的同行，我大概只能说一句：<strong>恭喜你，还请节哀顺变，欢迎来到无法随心所欲的爱与欲望的世界！</strong>作为拖延症中晚期的博主，努力写完每月一篇的博客，抽空读读书、看看电影，这已然是种简单的幸福了呢！好了，这篇博客就先写到这里！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="数据库" scheme="https://qinyuanpei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="单位" scheme="https://qinyuanpei.github.io/tags/%E5%8D%95%E4%BD%8D/"/>
    
      <category term="设计" scheme="https://qinyuanpei.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Valine搭配Server酱实现博客评论推送</title>
    <link href="https://qinyuanpei.github.io/posts/369095810/"/>
    <id>https://qinyuanpei.github.io/posts/369095810/</id>
    <published>2019-11-06T18:15:14.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>是一个基于<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>的评论系统，在很长的一段时间里，一直作为多说、<a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>等等的一个替代品，博主所使用的评论系统实际上就是Valine，虽然独立博客的整体活跃度无法媲美专业博客，可还是想在这纷扰的世界里有自己的一方天地啊。多说评论的关闭，某种意义上来说，是很多90后站长们关于互联网的集体记忆，因为从博主搭建第一个WordPress博客的时候，多说就一直作为首选的评论系统而存在。那个时候通过多说就能接入主流的社交媒体，对于一个还不大会编写Web应用的博主来说，此刻想来实在是有种时过境迁的感觉。所以，Valine作为一个相当优秀的评论系统，凭借着简洁大方的界面和开箱即用的优势，在这个时间点进入人们的视野，我们就不难理解，为什么它会成为博客作者们的“新宠”。</p><p>Valine本身是利用LeanCloud的数据存储SDK来实现评论的读写的，所以，它相对于“多说”这种第三方的服务，在数据安全性上更有保障一点，虽然“多说”在关闭评论服务以前，提供了导出JSON格式评论信息的功能。可话说回来，以国内这种“敏感”的网络环境，其实没有一家云服务提供商敢打这样的包票，像阿里云、LeanCloud、七牛云存储这些服务，都曾经出现过宕机或者封杀域名的事情，所以，趁着数据还在自己手上，尽可能地做好备份工作吧！Valine本身并没有提供评论推送的功能，我还是挺怀念过去“多说”推送评论到邮箱的功能。虽然<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>这个项目提供了类似的功能，但我感觉使用起来并不顺手，尤其是配置邮箱的时候，国内像QQ、163这些都非常麻烦，遇到一两个废弃的手机号，你就会发现短信验证码，是件多么尴尬而繁琐的事情，如同扫码使用的共享电话一般魔幻。</p><p>为了解决这个问题，我想到了Valine搭配Server酱实现评论推送的方案。首先，Valine是基于LeanCloud而开发的，用户发表评论实际上就是向<code>Comment</code>表插入记录。因此，我们可以利用LeanCloud提供的<a href="https://leancloud.cn/docs/leanengine_cloudfunction_guide-node.html#hash1095356413" target="_blank" rel="noopener">Hooks</a>来捕获写入评论的事件。所谓“Hooks”呢，通俗地说就是数据库里触发器的概念，我们可以在数据写入前后做点“小动作”。而<a href="http://sc.ftqq.com/" target="_blank" rel="noopener">Server酱</a>则是一个消息推送服务，它提供了一个基于HTTP的请求接口，通过这个接口，我们就能实现向微信推送消息，前提是关注“方糖”公众号。关于Server酱的原理大家可以进一步去看它的<a href="http://sc.ftqq.com/?c=code" target="_blank" rel="noopener">文档</a>，我们这里只需要考虑怎么样把它们结合起来，这就是工程师和科学家的区别所在[doge]。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/DlxWPgGNoKMVeOw.png" alt="运行在Valine云引擎中代码" title="">                </div>                <div class="image-caption">运行在Valine云引擎中代码</div>            </figure><p>LeanCloud提供了一个称作“云引擎”的环境，它可以提供运行比如Nodejs、Python等等的环境，实际上，<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>这个项目就是用Nodejs编写的，你可以理解为，只要你的应用符合它的规范，就能在它的环境里运行，这就是所谓的“FAAS”(函数即软件)和“BAAS”(后端即软件)。所以，说白了我们就是想利用它这个“云引擎”来调用Server酱的接口，幸运的是，LeanCloud提供的Hooks目前是支持Nodejs的，所以，到这里思路就非常清晰了，我们给<code>Comment</code>这张表加一个<code>AfterSave</code>类型的Hooks，在保存完以后调用Server酱接口推送评论信息即可。创建Hooks是在部署-&gt;云引擎选项下，我们来看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">AV.Cloud.afterSave(<span class="string">'Comment'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = request.object;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'收到一条新的评论：'</span> + <span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> title = <span class="string">"收到一条新的评论"</span>;</span><br><span class="line">  <span class="keyword">var</span> url = request.object.get(<span class="string">'url'</span>);</span><br><span class="line">  <span class="keyword">var</span> nick = obj.get(<span class="string">'nick'</span>);</span><br><span class="line">  <span class="keyword">if</span> (nick == <span class="string">'Anonymous'</span>)&#123;</span><br><span class="line">      nick = <span class="string">'陌生人'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> comment = obj.get(<span class="string">'comment'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> content = nick + <span class="string">"给你留言：\n\n"</span> + comment + <span class="string">"\n\n详情请访问：\n\n"</span> + url;</span><br><span class="line">  <span class="keyword">var</span> options = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    url: <span class="string">'https://sc.ftqq.com/&lt;在这里输入你的token&gt;.send'</span>,</span><br><span class="line">    qs: &#123; </span><br><span class="line">        text: title,</span><br><span class="line">        desp: content</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123; &#125; </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  http(options, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(error);</span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里主要利用了Nodejs中的<code>requests</code>模块来发送HTTP请求，其中token是Server酱经过Github授权以后获得的，具体可以参考Server酱的<a href="http://sc.ftqq.com/?c=code" target="_blank" rel="noopener">文档</a>。这里有一点要注意，Comment表里的记录是无法区分发出人的，因为有时候我们可能忘记填写邮箱或者昵称，所以，目前只要写入记录都会发送消息到手机。这个消息模板是Server酱作者提供的，我们无法对它的样式进行自定义，收到消息以后需要点击查看详情。不过，我认为这个方案可以满足我的日常使用，因为博客的评论数量并不多，而Servet酱的接口调用次数完全足够。免费的LeanCloud实例虽然会强制休眠，只要大部分时间能覆盖到就可以啦，谁让这些东西都是免费的呢，博主表示已经相当知足啦，哈哈！好了，看看消息推送到手机的效果吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/BSsu4cPFe1ZvhGN.png" alt="博客评论推送到手机上的展示效果" title="">                </div>                <div class="image-caption">博客评论推送到手机上的展示效果</div>            </figure><p>如果大家想调整消息的格式，参考文章中给出的代码即可，每次调整完可以直接部署到线上，这是我在这个过程中体验到的Serverless的魅力，相比我们中华田园式的996敏捷开发，这种方式真的能缩短部署的周期。我还是那句话，敏捷开发是大家一起敏捷，不是只有开发苦哈哈地加班加点干活，快速交付的前提是基础设施完善，具备自动化测试、自动化部署的能力，让开发安心地写代码比什么都重要，就像LeanCloud里提供的云函数和Hooks，开发写完代码就能自动部署，这是真正的敏捷、真正的灵活。好了，这篇博客就先写到这里。想试试博主能不能第一时间收到你们的留言？欢迎在博客评论区留下你的足迹，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="独立博客" scheme="https://qinyuanpei.github.io/categories/%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Valine" scheme="https://qinyuanpei.github.io/tags/Valine/"/>
    
      <category term="Server酱" scheme="https://qinyuanpei.github.io/tags/Server%E9%85%B1/"/>
    
      <category term="评论" scheme="https://qinyuanpei.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>浅析网站PV/UV统计系统的原理及其设计</title>
    <link href="https://qinyuanpei.github.io/posts/3494408209/"/>
    <id>https://qinyuanpei.github.io/posts/3494408209/</id>
    <published>2019-10-22T12:50:49.000Z</published>
    <updated>2020-02-04T10:39:03.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>国庆节前有段时间，新浪的“图床”一直不大稳定，因为新浪开启了防盗链，果然免费的永远是最贵的啊。为了不影响使用，我非常粗暴地禁止了浏览器发送Referer，然后我就发现了一件尴尬的事情，“不蒜子”统计服务无法使用了。这是一件用脚后跟想都能想明白的事情，我禁止了浏览器发送Referer，而“不蒜子”正好使用Referer来识别每个页面，所以，这是一个再明显不过的因为需求变更而引入的Bug。这个世界最离谱的事情，就是大家都认为程序员是一本“十万个为什么”，每次一出问题就找到程序员这里。其实，程序员是再普通不过的芸芸众生里的一员，人们喜欢听/看到自己愿意去听/看到的事物，而程序员同样喜欢解决自己想去解决的问题。所以，今天的话题是关于如何设计一个PV/UV统计系统。OK，Let’s Hacking Begin。</p><h1 id="PV-UV的概念"><a href="#PV-UV的概念" class="headerlink" title="PV/UV的概念"></a>PV/UV的概念</h1><p>首先，我们从两个最基本的概念PV和UV开始说起。我们都知道，互联网产品的核心就是流量，前期通过免费的产品吸引目标客户的目的，在积累了一定用户流量以后，再通过广告等增值服务实现盈利，这可以说是互联网产品的典型商业模式啦。而在这个过程中，为了对一个产品的流量进行科学地分析，就产生了譬如访客数(<strong>UV</strong>)、浏览量(<strong>PV</strong>)、访问次数(<strong>VV</strong>)等等的概念，这些概念通常作为衡量流量多少的指标。除此以外，我们还有类似日活跃用户(<strong>DAU</strong>)、月活跃用户(<strong>MAU</strong>)等等这种衡量服务用户粘性的指标，以及平均访问深度、平均访问时间、跳出率等等这种衡量流量质量优劣的指标。如果各位和我一样都写博客的话，对这些概念应该都不会感到陌生，因为我们多多少少会使用到诸如<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站长</a>、<a href="https://www.umeng.com/" target="_blank" rel="noopener">站长统计</a>、<a href="https://ta.qq.com/#/" target="_blank" rel="noopener">腾讯统计</a>、<a href="https://developers.google.cn/analytics/devguides/reporting/?hl=zh-cn" target="_blank" rel="noopener">Google Analytics</a>这样的统计服务，这些统计服务可以让我们即时掌握博客的访问情况。博主目前使用了<a href="https://ta.qq.com/#/" target="_blank" rel="noopener">腾讯统计</a>来查看整个博客的流量情况，而每一篇博客的访问量则是通过<strong><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">“不蒜子”</a></strong>这个第三方服务，这里再次对作者表示感谢。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/24/VN2ubT71aLK6eZp.png" alt="使用腾讯统计来查看网站的流量情况" title="">                </div>                <div class="image-caption">使用腾讯统计来查看网站的流量情况</div>            </figure><p>回到问题本身，PV，即<strong>Page View</strong>，<strong>表示页面浏览量或者点击量，每当一个页面被打开或者被刷新，都会产生一次PV，只要这个请求从浏览器端发送到了服务器端</strong>。聪明的各位肯定会想到，如果我写一个爬虫不停地去请求一个页面，那么这个页面的PV不就会一直增长下去吗？理论上的确是这样，所以，我们有第二个指标UV，来作为进一步的参考，所谓UV，即<strong>Unique Visitor，表示独立访客数</strong>。在上面这个问题中，尽管这个页面的PV在不断增长，可是因为这些访客的IP都是相同的，所以，这个页面只会产生一次UV，这就是PV和UV的区别。所以，我们结合这两个指标，可以非常容易得了解到，这个页面实际的访问情况是什么样的。这让我想起数据分析中的一个例子，虽然以统计学为背景的数学计算不会欺骗人类，可如果人类片面地相信某一个方面的分析结果，数据分析一样是带有欺骗性的。就像有人根据《战狼2》和《前任3》两部电影的观众购买冷/热饮的情况，得出下面的结论：<strong>看动作片的观众更喜欢喝冷饮来清凉紧绷着的神经，而看爱情片的观众更喜欢喝热饮来温暖各自的内心</strong>。其实想想就知道这里混淆了因果性和相关性，选择冷饮还是热饮无非是两部电影上映的季节不同而已。</p><h1 id="如何设计一个访问统计系统"><a href="#如何设计一个访问统计系统" class="headerlink" title="如何设计一个访问统计系统"></a>如何设计一个访问统计系统</h1><p>OK，了解了PV和UV的概念后，我们来思考如何去设计一个访问统计系统，这是今天这篇博客的主题内容。我知道，如果问如何设计一个访问系统，大家可能都会不由自主地想到建两张表。的确，这是最简单的做法。可问题是，我们对于PV的认识，其实一直都在不断地变化着。比如PV的定义是是一个页面被打开或者被刷新时视为一次有效PV，所以，我们通常的做法是在页面底部嵌入JavaScript脚本，这种方式一直工作得非常好。可在引入AJAX以后，用户几乎不会主动去刷新页面，那么，在这个过程中用户点击<strong>更多</strong>或者使用<strong>下拉刷新</strong>时，是否应该算作一次有效PV呢？甚至在PC端网页逐渐式微以后，越来越多的工作转移到手机等移动设备上来，越来越多的原生+Web混合App或者是单页面应用(<strong>SPA</strong>)或者是渐进式应用(<strong>PWA</strong>)，此时我们又该如何认识PV呢？微信公众号里的PV甚至更为严格，必须通过微信内置的浏览器访问才能算作一次有效PV。</p><p>可以发现，我们对PV的认识其实一直在不断的变化着，更多的时候，我们想追踪的并非页面被加载(<strong>Page Load</strong>)的次数，而是页面被浏览(<strong>Page View</strong>)的次数。这时候，我们可以Page Visiblity和History API结合的方式。前者在页面的visibilityState可见或者由隐藏变为可见时发送一次Page View，而后者则是在浏览器地址发生变化的时候发送一次Page View。这听起来非常像单页面应用(<strong>SPA</strong>)里前端路由的那套玩法，的确，当一个地址中的pathname或者search部分发生变化时，应该发送一次Page View请求，而hash部分的变化则应该忽略，因为它表示的是应用内部页面的跳转。对于页面的visibilityState由隐藏变为可见，不同的人有不同的看法，因为有时我们像合并多次Page View，而有时候则想通过Page View了解所谓的”回头客“，所以，这里面还可以继续引入Session的概念，比如Google Analytics默认会在30分钟内无交互的情况下结束。所以，这个问题要考虑的东西实际上比想象中的要多。</p><p>现在，我们至少可以前端部分达成共识，即通过在前端页面上埋点的方式收集PV和UV。就像我们设计一个Page View的表结构会非常简单，而一旦要开始考虑Unique Visitor，可能我们就需要收集诸如IP、省市、UA等等的信息，这些信息的数量会非常大，而Page View的数据规模实际上取决于一个站点下有多少个页面。所以，这些数据在后端要怎么样处理，这是我们接下来要去考虑的问题。直接去写数据库是万不得已的做法，因为如果你处理不好并发的问题，这些统计数据的正确性就会让人产生怀疑，所以，接下来，我们介绍三种不同的方法来处理这类问题，它们分别是：通过Nginx的access_log实现统计、通过Redis的Hyperlog实现统计，以及通过LeanCloud的Hook实现统计。同大家一样，我是第一次考虑这类问题，如果有什么不周到的地方，希望大家可以谅解。</p><h2 id="通过Nginx的access-log实现统计"><a href="#通过Nginx的access-log实现统计" class="headerlink" title="通过Nginx的access_log实现统计"></a>通过Nginx的access_log实现统计</h2><p>我们首先来介绍Nginx的access_log，顾名思义，这是Nginx的访问日志，由ngx_http_log_module模块提供相应功能。Nginx会把每一个用户访问网站的日志信息记录到指定文件里，从而帮助网站提供者分析用户的浏览行为。而PV/UV则是分析用户的浏览行为的最基础指标，所以，通过Nginx的访问日志来统计UV和PV是再合适不过的啦！在Nginx里主要使用<code>log_format</code>和<code>access_log</code> 两条指令来完成相关的配置。这里以博主自己使用的配置为例来说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format main '$remote_addr - $remote_user [$time_iso8601] "$request" '</span><br><span class="line">                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">                  </span><br><span class="line">access_log logs/access.log main;</span><br></pre></td></tr></table></figure><p>可以注意到，我们在这里首先通过<code>log_format</code>命令定义了一个日志格式，而这个日志格式则被定义为main，这表示我们我们可以在Nginx的配置文件中定义多个日志格式。它其实就是一个日志模板，相信大家在使用NLog、Log4Net这类日志库的时候，都接触过Layout这个概念，这里就是Nginx中访问日志的Layout。那么，在定义了这样一个日志格式以后，我们该怎么使用这个日志格式呢？这就要说到下面的<code>access_log</code>指令，它的基本用法就是一个路径 + 一个模板，在这里我们使用了定义好的main模板，然后指定了日志路径为：\logs\localhost.access_log.log。当然啦，大家使用NLog和Log4Net时，日志对应的Layout中都会有“变量”这样的概念，同样地，在Nginx中我们有一些常用的“变量”：</p><table><thead><tr><th>Nginx日志变量</th><th align="left">说明</th></tr></thead><tbody><tr><td>$remote_addr</td><td align="left">记录访问网站的客户端地址</td></tr><tr><td>$http_x_forward_for</td><td align="left">当前端有代理服务器时，设置Web节点记录客户端地址的配置</td></tr><tr><td>$remote_user</td><td align="left">远程客户端用户名称</td></tr><tr><td>$time_local</td><td align="left">记录带时区的访问时间</td></tr><tr><td>$request</td><td align="left">记录用户HTTP请求起始行信息</td></tr><tr><td>$status</td><td align="left">记录用户HTTP请求状态码</td></tr><tr><td>$body_bytes_sents</td><td align="left">记录服务端返回给客户端响应Body字节数</td></tr><tr><td>$http_referer</td><td align="left">记录本次请求是从哪一个链接访问过来的</td></tr><tr><td>$http_user_agent</td><td align="left">记录客户端类型信息，比如Chrome、微信等等</td></tr></tbody></table><p>为什么说这些时最常用的“变量”呢？因为通过这些，我们想要统计PV和UV的想法就能变成现实，关于更多的Nginx日志变量，大家可以从这里来了解：<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_log_module.html</a>。现在，通过Nginx托管一个简单的静态页面，然后在浏览器中访问：localhost:9090，此时，我们应该可以在前面设置的日志路径里找到Nginx生成的日志文件，它大概长下面这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/24/sGT7QYRWariKDHz.png" alt="Nginx日志长什么样子" title="">                </div>                <div class="image-caption">Nginx日志长什么样子</div>            </figure><p>OK，现在有日志文件啦，这PV/UV到底从哪里来呢？其实，到这里已经无所谓用什么方法啦，因为你可以用ELK全家桶把给它收集了去，或是选一门你喜欢的语言用正则给它匹配出来，这都完全没有问题，无非就是一个工具选择的问题。为了简单起见，我们直接用Shell命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">统计指定页面的PV</span></span><br><span class="line">grep / localhost.access.log | wc -l</span><br><span class="line">grep /favicon.ico localhost.access.log | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">统计站点PV</span></span><br><span class="line">awk '&#123;print $6&#125;' localhost.access.log | wc -l #$6表示模板中的第6个变量，即Referer</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">统计访客IP</span></span><br><span class="line">awk '&#123;print $1&#125;' localhost.access.log | sort -r |uniq -c |wc -l #$1表示模板中第一个变量，即客户端IP</span><br></pre></td></tr></table></figure><p>至此，我们就达到了基于Nginx访问日志实现PV/UV统计的目的。我知道有同学要问啦，你不是说要在前端通过埋点的方式来收集访客的信息吗，你这说了半天，完全就是说Nginx的事情嘛！的确，我们现在可以统计出自己网站的PV/UV了，可如果我们想对外提供一个访问统计的服务，我们又该如何做呢？这里简单分享下博主的思路，因为开发环境一直不是很稳定，所以，一直没有时间动手去实践(逃。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/25/DBj7SxOa8qf1FZH.png" alt="一种PV/UV统计的思路" title="">                </div>                <div class="image-caption">一种PV/UV统计的思路</div>            </figure><p>通过这张图片，我们可以大致梳理出整个流程，即前端页面中通过JavaScript来调用后端提供的Analysis Service，此时这个请求会携带一个Referer信息，而这个Referer对应被访问的站点。注意到这个后端服务经过了一层Nginx转发，显然Nginx可以获得客户端的IP地址，这两个结合起来，表示的就是某个IP访问了某个站点，即PV。像百度站长和腾讯统计会在页面中注入一个token或者Id，主要用途就是确保请求的确是从当前站点中发出的，这就是这类访问统计产品统计的原理。也许在计算PV/UV的算法上存在差异，然而核心的原理应该没多大差别啦！</p><h2 id="通过Redis的HyperLogLog实现统计"><a href="#通过Redis的HyperLogLog实现统计" class="headerlink" title="通过Redis的HyperLogLog实现统计"></a>通过Redis的HyperLogLog实现统计</h2><p>不知道大家有没有发现，统计PV其实蛮简单的，因为它只需要对访问量做更新即可。可统计UV就会有点麻烦啦，因为同一个人可以多次访问同一篇文章。有时候我们希望统计一天内的访客数，而有时候我们希望统计一周甚至一个月内的访客数，所以，UV并不像PV那样简单，PV更多的时候是作为一种“汇总”数据，而UV则有“实时”的属性。简而言之，我们需要一张表来记录访客数据，博主在设计这张表的时候，更是引入了地理位置、UserAgent等等相关的字段设计，因为我们会有了解访客来源、访客设备等等一系列“行为”相关的数据记录。对应到数据库的概念，VisitorRecored这张表实际上是在不停地写入记录的。那么，面对每一个查看实时访客数的请求，我们真的要每次都要去这张表里统计一遍吗？也许我们会想到使用数据库任务去做定时的汇总，或者是任意形式的定时任务譬如CORN、Hangfire，在这里，我们有更好的选择——HyperLogLog。</p><p>什么是HyperlLogLog呢？我们提到的统计UV的这个场景，实际上是一个基数计数(Cardinality Counting)的问题，即统计一个集合中不重复的元素个数，例如集合{1,3,5,7,5,7,8}的基数为5。所以，HyperLogLog实际上就是一个在误差允许的范围内，快速统计元素数目的算法。为什么说是误差允许范围内呢？因为它来源于一个经典的概率分布——伯努利分布。高中时候，老师讲到这个知识，我们笑称它为“白努力”，因为有一段时间，排列组合属于我怎么学都学不会东西，可不就是白努力吗？HyperLogLog是在LogLog的基础上优化的一种算法，它主要的改进是采用了桶算法作为每一轮伯努利实验的估计值，同时使用调和平均数代替平均数，进而求出最终的估算值。它可以在不存储整个集合的情况下，使用极小的内存统计出集合元素的个数。</p><p>对应到Redis里，主要体现在PFADD、PFCOUNT、PFMERGE三个命令上。</p><ul><li>PFADD：将多个值存入指定的HyperLogLog。</li><li>PFCOUNT：获取指定HyperLogLog的基数。</li><li>PFMERGE：合并多个HyperLogLog，合并前与合并后的基数一致(取并集)。</li></ul><p>博主在写这篇博客的时候，基于LeanCloud的访问统计<a href="">LeanCloud-Counter</a>已经再线上运行了一段时间。下面，我们就以这些数据为例来展示下HyperLogLog的用法。为了方便起见，我选择使用Python来读写Redis：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接Redis</span></span><br><span class="line">r = redis.Redis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询访客记录</span></span><br><span class="line">VisitorRecord = leancloud.Object.extend(<span class="string">'VisitorRecord'</span>)</span><br><span class="line">query = VisitorRecord.query</span><br><span class="line">query.limit(<span class="number">1000</span>)</span><br><span class="line">queryResults = query.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个页面使用PFADD</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> queryResults:</span><br><span class="line">    r.pfadd(result.get(<span class="string">'page_url'</span>),result.get(<span class="string">'visitor_ip'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用PFCOUNT返回每个页面的基数</span></span><br><span class="line">pageUrls = list(set(map(<span class="keyword">lambda</span> x:(x.get(<span class="string">'page_url'</span>),x.get(<span class="string">'page_title'</span>),r.pfcount(x.get(<span class="string">'page_url'</span>))), queryResults)))</span><br><span class="line">pageUrls = sorted(pageUrls,key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">print(pageUrls[<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>运行完脚本，我们可以统计出访客数目：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/26/JxUQ9s1EiOlVBCY.png" alt="使用HyperLogLog统计访客数目" title="">                </div>                <div class="image-caption">使用HyperLogLog统计访客数目</div>            </figure><h2 id="通过LeanCloud的Hooks实现统计"><a href="#通过LeanCloud的Hooks实现统计" class="headerlink" title="通过LeanCloud的Hooks实现统计"></a>通过LeanCloud的Hooks实现统计</h2><p>像Hexo、Jekyll这类静态博客，本质上是非常依赖Valine、不蒜子等等的第三方服务，而使用LeanCloud作为访问量统计的服务提供商，更是早就在博客圈子里流行了。不过我注意到，这些设计都少都会有一点不足，那就是网上的各种设计都没有实现站点的PV/UV统计。当我被迫从”不蒜子“上迁移过来以后，我其实非常想实现一个和”不蒜子“一模一样的统计服务，因为这样子的话，我对博客的修改会非常非常小。所以， 我不得不在现有方案上扩展更多的功能，实现单篇文章的UV、整个站点的PV/UV、访客IP/地理位置、客户端UA等的统计功能。</p><p>在这个过程中，我发现LeanCloud不支持传统关系型数据库里的Sum()操作，而我更不想在客户端通过分页去对表记录做Sum()操作。官方提供了离线分析和云函数，可这两个东西都是商业版里支持的东西。最终我找到了，通过Hooks来实现站点PV/UV统计的这样一种方法。所谓Hooks，你可以理解为传统关系型数据库里的触发器，它可以在你更新或者插入某个对象的时候，去做一点额外的工作。所以，单篇文章会根据文章链接+访客IP生成一条UV，而PV则是每次打开文章就视为一条PV。所以，最终的方案是插入访客记录(<strong>VisitorRecord</strong>)时更新文章的对应的访问次数(<strong>VisitorCounter</strong>)，而单篇文章的更新则会触发站点UV/PV的更新。听起来有点绕人，我们直接来看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建访客记录时，更新对应的UV记录</span></span><br><span class="line">AV.Cloud.afterSave(<span class="string">'VisitorRecord'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">    <span class="keyword">var</span> page_url = request.object.get(<span class="string">'page_url'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'query page_url: '</span> + page_url);</span><br><span class="line">    query.equalTo(<span class="string">'page_url'</span>, page_url);</span><br><span class="line">    <span class="keyword">return</span> query.find().then(<span class="function"><span class="keyword">function</span> (<span class="params">counters</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (counters.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            counters[<span class="number">0</span>].increment(<span class="string">'page_uv'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'increment UV of page_url: '</span> + page_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_pv'</span>));</span><br><span class="line">            <span class="keyword">return</span> counters[<span class="number">0</span>].save()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面PV/UV更新时，更新站点PV/UV</span></span><br><span class="line">AV.Cloud.afterUpdate(<span class="string">'VisitorCounter'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> page_url = request.object.get(<span class="string">'page_url'</span>);</span><br><span class="line">    <span class="keyword">if</span>(page_url.indexOf(<span class="string">'//'</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> site_url = page_url.split(<span class="string">'//'</span>)[<span class="number">1</span>];</span><br><span class="line">    site_url = site_url.substring(<span class="number">0</span>, site_url.indexOf(<span class="string">'/'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'now to update site PV/UV with: '</span> + site_url);</span><br><span class="line">    <span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'page_pv'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">        query.equalTo(<span class="string">'page_url'</span>,site_url);</span><br><span class="line">        query.find().then(<span class="function"><span class="keyword">function</span>(<span class="params">counters</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(counters.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                counters[<span class="number">0</span>].increment(<span class="string">'page_pv'</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update site PV of '</span> + site_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_pv'</span>));</span><br><span class="line">                <span class="keyword">return</span> counters[<span class="number">0</span>].save();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'page_uv'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">        query.equalTo(<span class="string">'page_url'</span>,site_url);</span><br><span class="line">        query.find().then(<span class="function"><span class="keyword">function</span>(<span class="params">counters</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(counters.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                counters[<span class="number">0</span>].increment(<span class="string">'page_uv'</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update site PV of '</span> + site_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_uv'</span>));</span><br><span class="line">                <span class="keyword">return</span> counters[<span class="number">0</span>].save();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上这里整个站点的UV统计是不严谨的，因为严格地来讲，同一个IP访问了同一个站点下的N篇文章，它的UV严格地来说应该算1次，可我们这个方案本身就是向LeanCloud妥协的一种做法，就像我这里直接使用了<code>location.href</code>和<code>document.title</code>，它带来的问题就是，一个网站的域名或者链接发生变化的时候，访问统计就会被重置从0开始。“不蒜子”本身就有这个问题。所以，博主这个博客从15年到现在，总访问量只有3万多，就是因为中间更换过两次域名。从我切换到自己写的统计服务以后，我发现每天来读我博客的人居然不少，我实在不忍心写下这种夸自己的句子啊！</p><p>想解决这个问题，并不是没有办法。像博主一开始设计的时候，是打算用每个页面唯一的Id来存储的，而这就要通过HTML5中的<strong>data-</strong>或者通过JavaScript来传参。可当你打算设计一个更通用的东西的时候，这些想法就显得有点多余，我和大部分人一样，喜欢开箱即用的东西，所以，最好它可以像大多数统计服务一样，只需要在页面里加入一行JavaScript脚本。所以，最终采用这样的设计是为了最大限度的开箱即用。考虑到“不蒜子”里因为更换域名而导致的访问统计重置的问题，我增加了一个初始化站点UV/PV的功能，满足了像博主这样虚荣心爆棚的人的需要。这一刻，我突然觉得，我和产品经理们一样“自信”啊。正如你所看到的这样，博客底部的访问统计已经从“不蒜子”切换到“LeanCloud-Counter”，为此我在博客上增加了<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>的链接，也许下一阶段会加上Heroku，总之，我已经完成了访问统计的平滑切换。关于这个项目，如果大家感兴趣，可以参考这个地址：<a href="https://github.com/qinyuanpei/leancloud-counter" target="_blank" rel="noopener">LeanCloud-Counter</a>。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇文章写下来，最大的感受或许是，有一台Linux环境的服务器是多么的重要。起初，是在Windows10下面的WSL里搭了Docker环境，再通过Docker镜像搭建Nginx，因为之前的Consul、ELK几乎都是这样运作的，而且一直运行的相当稳定，唯一的缺点大概就是Docker太容易吃硬盘，有时候难免搞出个内存不足。Nginx搭好以后，发现需要经常改配置文件，Docker环境里改起来相当痛苦。直接在WSL里安装Nginx的话，因为和Windows共享端口，和IIS明显搞不到一起。想通过Docker挂载本机分区，突然想起来WSL里的Docker只是一个客户端，真正的主角是跑在Windows上的Docker for Windows。最后被迫装了Windows版本的Nginx，果然还是会和IIS冲突，我想说，心好累有木有啊_(:з」∠)_。好了，这篇博客总算写完了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="访问量" scheme="https://qinyuanpei.github.io/tags/%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    
      <category term="Nginx" scheme="https://qinyuanpei.github.io/tags/Nginx/"/>
    
      <category term="Hyperlog" scheme="https://qinyuanpei.github.io/tags/Hyperlog/"/>
    
  </entry>
  
  <entry>
    <title>使用Python开发插件化应用程序</title>
    <link href="https://qinyuanpei.github.io/posts/1960676615/"/>
    <id>https://qinyuanpei.github.io/posts/1960676615/</id>
    <published>2019-10-11T08:56:27.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>插件化应用是个老话题啦，在我们的日常生活中更是屡见不鲜。无论是多年来臃肿不堪的Eclipse，亦或者是扩展丰富著称的Chrome，乃至近年来最优秀的编辑器VSCode，插件都是这其中重要的组成部分。插件的意义在于扩展应用程序的功能，这其实有点像iPhone手机和AppStore的关系，没有应用程序的手机无非就是一部手机，而拥有了应用程序的手机则可以是Everything。显然，安装或卸载应用程序并不会影响手机的基本功能，而应用程序离开了手机同样无法单独运行。所以，所谓“插件”，实际上是<strong>一种按照一定规范开发的应用程序，它只能运行在特定的软件平台/应用程序且无法运行</strong>。这里，最重要的一点是应用程序可以不依赖插件单独运行，这是这类“插件式”应用的基本要求。</p><p>好了，在了解了插件的概念以后，我们来切入今天的正文。博主曾经在<a href="https://blog.yuanpei.me/posts/2822230423/" target="_blank" rel="noopener">《基于Python实现Windows下壁纸切换功能》</a>这篇文章中编写了一个小程序，它可以配合Windows注册表实现从 <a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash</a> 上抓取壁纸的功能。最近，博主想为这个小程序增加 <a href="https://cn.bing.com/?mkt=zh-CN" target="_blank" rel="noopener">必应壁纸</a> 和 <a href="https://wallhaven.cc" target="_blank" rel="noopener">WallHaven</a> 两个壁纸来源，考虑到大多数的壁纸抓取流程是一样的，博主决定以“插件”的方式完成这次迭代，换句话说，主程序不需要再做任何调整，当我们希望增加新的数据源的时候，只需要写一个.py脚本即可，这就是今天这篇文章的写作缘由。同样的功能，如果使用Java/C#这类编译型语言来做，我们可能会想到为插件定义一个IPlugin接口，这样每一个插件实际上都是IPlugin接口的实现类，自然而然地，我们会想到通过反射来调用接口里的方法，这是编译型语言的做法。而面对Python这样的解释型语言，我们同样有解释型语言的做法。</p><p>首先，我们从一个最简单的例子入手。我们知道，Python中的import语法可以用来引入一个模块，这个模块可以是Python标准库、第三方库和自定义模块。现在，假设我们有两个模块：<code>foo.py</code> 和 <code>bar.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,uid,msg)</span>:</span></span><br><span class="line">        print(<span class="string">'给&#123;uid&#125;发送消息：&#123;msg&#125;'</span>.format(uid=uid,msg=msg))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendAll</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        print(<span class="string">'群发消息：&#123;msg&#125;'</span>.format(msg=msg))</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bar.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"人生苦短，我用Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"男人哭吧哭吧不是罪"</span>)</span><br></pre></td></tr></table></figure><p>通常, 为了在当前模块(main.py)中使用这两个模块，我们可以使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>这是一种简单粗暴的做法，因为它会导入模块中的全部内容。一种更好的做法是按需加载，例如下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> Chat</span><br></pre></td></tr></table></figure><p>到这里，我们先来思考第一个问题，Python是怎么样去查找一个模块的呢？这和Python中的导入路径有关，通过<code>sys.path</code>我们可以非常容易地找到这些路径，常见的导入路径有<code>当前目录</code>、<code>site-package目录</code>和<code>PYTHONPATH</code>。熟悉Python的朋友应该都知道，<code>site-package</code>和<code>PYTHONPATH</code>各自的含义，前者是通过pip安装的模块的导入目录，后者是Python标准库的导入目录。当前目录这个从何说起呢？事实上，从我们写下<code>from…import…</code>语句的时候，这个机制就已经在工作了，否则Python应该是找不到foo和bar这两个模块的了。这里还有相对导入和绝对导入的问题，一个点(<code>.</code>)和两个点(<code>..</code>)的问题，这些我们在这里暂且按下不表，因为我们会直接修改<code>sys.path</code>(逃</p><p>在Python中有一种动态导入模块的方式，我们只需要告诉它模块名称、导入路径就可以了，这就是下面要说的<code>importlib</code>标准库。继续用foo和bar这两个神奇的单词来举例，假设我们现在不想通过import这种偏“静态”的方式导入一个模块，我们应该怎么做呢？一起来看下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> Chat</span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用foo模块Chat类方法</span></span><br><span class="line">foo.Chat().send(<span class="string">'Dear'</span>,<span class="string">'I Miss You'</span>)</span><br><span class="line">moduleFoo = importlib.import_module(<span class="string">'.'</span>,<span class="string">'foo'</span>)</span><br><span class="line">classChat = getattr(moduleFoo,<span class="string">'Chat'</span>)</span><br><span class="line">classChat().send(<span class="string">'Dear'</span>,<span class="string">'I Miss You'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用bar模块Echo类方法</span></span><br><span class="line">Echo().say()</span><br><span class="line">moduleBar = importlib.import_module(<span class="string">'.'</span>,<span class="string">'bar'</span>)</span><br><span class="line">classEcho = getattr(moduleBar,<span class="string">'Echo'</span>)</span><br><span class="line">classEcho().say()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用bar模块中的cry()方法</span></span><br><span class="line">cry()</span><br><span class="line">methodCry = getattr(moduleBar,<span class="string">'cry'</span>)</span><br><span class="line">methodCry()</span><br></pre></td></tr></table></figure><p>可以注意到，动态导入可以让我们在运行时期间引入一个模块(.py)，这恰恰是我们需要的功能。为了让大家对比这两种方式上的差异，我给出了静态引入和动态引入的等价代码。其中，<code>getattr()</code>其实可以理解为Python中的反射，我们总是可以按照<code>模块</code>-&gt;<code>类</code>-&gt;<code>方法</code>的顺序来逐层查找,即：通过dir()方法，然后该怎么调用就怎么调用。所以，到这里整个“插件化”的思路就非常清晰了，即：首先，通过配置来为Python增加一个导入路径，这个导入路径本质上就是插件目录。其次，插件目录内的每一个脚本文件(.py)就是一个模块，每个模块都有一个相同的方法签名。最终，通过配置来决定要导入哪一个模块，然后调用模块中类的实例方法即可。顺着这个思路，博主为 <a href="https://github.com/qinyuanpei/WallPaper" target="_blank" rel="noopener">WallPaper</a> 项目引入了插件机制，核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pluginFile == <span class="string">''</span> <span class="keyword">or</span> pluginName == <span class="string">''</span>):</span><br><span class="line">        spider = UnsplashSpider()</span><br><span class="line">        imageFile = spider.getImage(downloadFolder)</span><br><span class="line">        setWallPaper(imageFile)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> check(pluginFile,addonPath)):</span><br><span class="line">            print(<span class="string">'插件%s不存在或配置不正确'</span> % pluginName)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        module = importlib.import_module(<span class="string">'.'</span>,pluginFile.replace(<span class="string">'.py'</span>,<span class="string">''</span>))</span><br><span class="line">        instance = getattr(module,pluginName)</span><br><span class="line">        imageFile = instance().getImage(downloadFolder)</span><br><span class="line">        setWallPaper(imageFile)</span><br></pre></td></tr></table></figure><p>接下来，我们可以很容易地扩展出 <a href="https://cn.bing.com/?mkt=zh-CN" target="_blank" rel="noopener">必应壁纸</a> 和 <a href="https://wallhaven.cc" target="_blank" rel="noopener">WallHaven</a> 两个“插件”。按照约定，这两个插件都必须实现getImage()方法，它接受一个下载目录作为参数，所以，显而易见，我们在这个插件里实现壁纸的下载，然后返回壁纸的路径即可，因为主程序会完成剩余设置壁纸的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必应每日壁纸插件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingSpider</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(self, downloadFolder)</span>:</span></span><br><span class="line">        searchURL = <span class="string">'https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;mkt=zh-CN'</span></span><br><span class="line">        response = requests.get(searchURL)</span><br><span class="line">        data = json.loads(response.text)</span><br><span class="line"></span><br><span class="line">        resultId = data[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'hsh'</span>]</span><br><span class="line">        resultURL = <span class="string">'https://cn.bing.com'</span> + data[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'url'</span>]</span><br><span class="line">        print(<span class="string">u'正在为您下载图片:%s...'</span> % resultId)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> path.exists(downloadFolder)):</span><br><span class="line">            os.makedirs(downloadFolder)</span><br><span class="line">        </span><br><span class="line">        jpgFile = resultId + <span class="string">'.jpg'</span></span><br><span class="line">        jpgFile = os.path.join(downloadFolder, jpgFile)</span><br><span class="line">        response = requests.get(resultURL)</span><br><span class="line">        <span class="keyword">with</span> open(jpgFile,<span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(response.content)</span><br><span class="line">        <span class="keyword">return</span> jpgFile</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WallHaven壁纸插件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WallHavenSpider</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(self,downloadFolder)</span>:</span> </span><br><span class="line">        url = <span class="string">'https://alpha.wallhaven.cc/wallpaper/'</span> </span><br><span class="line">        response = requests.get(url) </span><br><span class="line">        print(response.text)</span><br><span class="line">        soup = BeautifulSoup(response.text,<span class="string">'html.parser'</span>)</span><br><span class="line">        imgs = soup.find_all(<span class="string">'img'</span>)</span><br><span class="line">        length = len(imgs)</span><br><span class="line">        <span class="keyword">if</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            match = random.choice(imgs)</span><br><span class="line">            rawUrl = match.get(<span class="string">'src'</span>)</span><br><span class="line">            rawId = rawUrl.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">            rawUrl = <span class="string">'https://w.wallhaven.cc/full/'</span> + rawId[<span class="number">0</span>:<span class="number">2</span>] + <span class="string">'/wallhaven-'</span> + rawId</span><br><span class="line">            raw = requests.get(rawUrl) </span><br><span class="line">            imgFile = os.path.join(downloadFolder, rawId)</span><br><span class="line">            <span class="keyword">with</span> open(imgFile,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(raw.content)</span><br><span class="line">        <span class="keyword">return</span> imgFile</span><br></pre></td></tr></table></figure><p>好了，现在功能是实现了，我们来继续深入“插件化”这个话题。考虑到Python是一门解释型的语言，我们在编写插件的时候，更希望做到“热插拔”，比如修改了某个插件后，希望它可以立刻生效，这个时候我们就需要重新加载模块，此时importlib的reload就能满足我们的要求，这正是博主一开始就要使用importlib，而不是import语法对应内建方法<strong>import</strong>()的原因。以C#的开发经历而言，虽然可以直接更换DLL实现更新，可更新的过程中IIS会被停掉，所以，这种并不能被称之为“热更新”。基于以上两点考虑，博主最终决定使用watchdog配合importlib来实现“热插拔”，下面是关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingEventHandler</span><span class="params">(FileSystemEventHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当配置文件修改时重新加载模块</span></span><br><span class="line">    <span class="comment"># 为节省篇幅已对代码进行精简</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        super(LoggingEventHandler, self).on_modified(event)</span><br><span class="line">        what = <span class="string">'directory'</span> <span class="keyword">if</span> event.is_directory <span class="keyword">else</span> <span class="string">'file'</span></span><br><span class="line">        confPath = os.path.join(sys.path[<span class="number">0</span>],<span class="string">'config.ini'</span>)</span><br><span class="line">        <span class="keyword">if</span>(what ==<span class="string">'file'</span> <span class="keyword">and</span> event.src_path == confPath):</span><br><span class="line">            importlib.reload(module)</span><br><span class="line">        logging.info(<span class="string">"Modified %s: %s"</span>, what, event.src_path)</span><br></pre></td></tr></table></figure><p>好了，现在我们就完成了这次“插件化”的迭代，截止到目前为止，博主共完成了 <a href="">Unsplash</a> 、 <a href="">Bing壁纸</a> 、 <a href="">WallHaven</a> 和 <a href="">国家地理</a> 四个“源”的接入，这些插件在实现上基本大同小异，本质上来讲它们是一个又一个的爬虫，只要实现了getImage()这个方法都可以接入进来，这就是我们通常说的“约定大于配置”，关于更多的代码细节，大家可以通过<a href="(https://github.com/qinyuanpei/WallPaper)">Github</a>来了解。</p><p>简单回顾下这篇博客，核心其实是importlib模块的使用，它可以让我们在运行时期间动态导入一个模块，这是实现插件化的重要前提。以此为基础，我们设计了基于Python脚本的单文件插件，即从指定的目录加载脚本文件，每个脚本就是一个插件。而作为插件化的一个延伸，我们介绍了watchdog模块的简单应用，配合importlib模块的reload()方法，就可以实现所谓的“热更新”。好了，以上就是这篇博客的所有内容了，我们下一篇见！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="https://qinyuanpei.github.io/tags/Python/"/>
    
      <category term="插件化" scheme="https://qinyuanpei.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="壁纸" scheme="https://qinyuanpei.github.io/tags/%E5%A3%81%E7%BA%B8/"/>
    
  </entry>
  
  <entry>
    <title>百度地图加载海量标注性能优化策略</title>
    <link href="https://qinyuanpei.github.io/posts/3131944018/"/>
    <id>https://qinyuanpei.github.io/posts/3131944018/</id>
    <published>2019-09-10T09:44:18.000Z</published>
    <updated>2020-02-04T10:39:03.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在上一篇博客中关于Vue表单验证的话题里，我提到了这段时间在做的城市配载功能，这个功能主要着眼于，如何为客户提供一条路线最优、时效最短、装载率最高的路线。事实上，这是目前物流运输行业智能化、专业化的一个趋势，即面向特定行业的局部最优解问题，简单来说，怎么样能在装更多货物的同时满足运费更低的条件，同时要考虑超载等等不可抗性因素，所以，这实际上是一个数学问题。而作为这个功能本身，在地图上加载大量标注更是基础中的基础，所以，今天这篇博客想说说，通过百度地图API加载海量标注时，关于性能优化方面的一点点经验。</p><h1 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h1><p>根据IP定位至用户所在城市后，后台一次性查询出近一个月内的订单，然后将其全部在地图上展示出来。当用户点击或者框选标注物时，对应的订单配载到当前运单中。当用户再次点击标注物，则对应的订单从当前运单中删除。以西安市为例，一次性加载850个左右的订单，用户操作一段时间后，Chrome内存占用达250多兆，拖拽地图的过程中可以明显地感觉到页面卡顿。因为自始至终，地图上的订单数量不变，即不会移除覆盖物，同时需要在内存中持久化订单相关的信息。所以，在城市配载1.0版本的时候，测试同事给我提了一个性能方面的Bug。可开始提方案并坚持这样做的，难道不是产品吗？为什么要给开发提Bug呢？OK，我们来给不靠谱的产品一点点填坑吧，大概想到了下面三种方案，分别是<code>标注物聚合</code>、<code>Canvas API</code>和<code>视野内可见</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g74q1ff3exj217w0l74au.jpg" alt="密密麻麻的地图" title="">                </div>                <div class="image-caption">密密麻麻的地图</div>            </figure><h1 id="标注物聚合方案"><a href="#标注物聚合方案" class="headerlink" title="标注物聚合方案"></a>标注物聚合方案</h1><p>所谓“标注物聚合”，就是指在一定的地图层级上，地图上的覆盖物主要是以聚合的形式显示的，譬如显示某一个省份里共有多少个订单，而不是把所有订单都展示出来，除非地图放大到一定的层级。这种其实在我们产品上是有应用的，比如运单可视化基本上是全国范围内的车辆位置，这个时候在省一级缩放比例上使用聚合展示就非常有必要。可在城市配载这里就相当尴尬啦，因为据说客户会把地图放大到市区街道这种程度来对订单进行配载，所以，这种标注物聚合方案的效果简直是微乎其微，而且更尴尬的问题在于，官方的 <a href="http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js" target="_blank" rel="noopener">MarkerClusterer</a> 插件支持的是标准的覆盖物，即Marker类。而我们的产品为了好看、做更复杂的交互，设计了更复杂的标记物原型，这就迫使我们必须使用<a href="http://lbsyun.baidu.com/jsdemo.htm#c1_11" target="_blank" rel="noopener">自定义覆盖物</a>，而自定义覆盖物通常会用HTML+CSS来实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g74qdli87bj21200mktj6.jpg" alt="标注聚合器MarkerClusterer" title="">                </div>                <div class="image-caption">标注聚合器MarkerClusterer</div>            </figure><p>所以，一个简洁的Marker类和复杂的DOM结构，会在性能上存在巨大差异，这恰恰是我们加载了800多个点就产生性能问题的原因，因为一个“好看”的标注物，居然由4个DOM节点组成，而这个“好看”的标注物还不知道要怎么样实现Marker类里的右键菜单。所以，追求“好看”有问题吗？没有，可华而不实的“好看”，恰恰是性能降低的万恶之源，更不用说，因为覆盖物不会从地图上删除，每次框选都要进行800多次的点的检测了，而这些除了开发没有人会在乎，总有人摆出一副<strong>“这个需求很简单，怎么实现我不管”</strong>的态度……虽然这种方案已经被Pass掉了，这里我们还是通过一个简单的示例，来演示下MarkerClusterer插件的简单使用吧！以后对于前端类的代码，博主会优先使用<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>进行展示，因为这样子显然比贴代码要生动呀！</p><iframe id="cp_embed_qBWJgGE" src="//codepen.io/qinyuanpei/embed/qBWJgGE?height=480px]&theme-id=dark&slug-hash=qBWJgGE&default-tab=[css,result" scrolling="no" frameborder="no" height="480px]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>这里稍微提带说一下这个插件的优化，经博主测试，在标记物数目达到100000的时候，拖拽地图的时候可以明显的感觉的卡顿，这一点大家可以直接在<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>中进行测试。产生性能问题的原因主要在以下代码片段：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向该聚合添加一个标记。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;Marker&#125; marker 要添加的标记。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 无返回值。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Cluster.prototype.addMarker = function(marker)&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span>.isMarkerInCluster(marker))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;<span class="comment">//也可用marker.isInCluster判断,外面判断OK，这里基本不会命中</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>._center)&#123;</span><br><span class="line">         <span class="keyword">this</span>._center = marker.getPosition();</span><br><span class="line">         <span class="keyword">this</span>.updateGridBounds();<span class="comment">//</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>._isAverageCenter)&#123;</span><br><span class="line">             <span class="keyword">var</span> l = <span class="keyword">this</span>._markers.length + <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">var</span> lat = (<span class="keyword">this</span>._center.lat * (l - <span class="number">1</span>) + marker.getPosition().lat) / l;</span><br><span class="line">             <span class="keyword">var</span> lng = (<span class="keyword">this</span>._center.lng * (l - <span class="number">1</span>) + marker.getPosition().lng) / l;</span><br><span class="line">             <span class="keyword">this</span>._center = new BMap.Point(lng, lat);</span><br><span class="line">             <span class="keyword">this</span>.updateGridBounds();</span><br><span class="line">         &#125;<span class="comment">//计算新的Center</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     marker.isInCluster = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">this</span>._markers.push(marker);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">var</span> len = <span class="keyword">this</span>._markers.length;</span><br><span class="line">     <span class="keyword">if</span>(len &lt; <span class="keyword">this</span>._minClusterSize )&#123;     </span><br><span class="line">         <span class="keyword">this</span>._map.addOverlay(marker);</span><br><span class="line">         <span class="comment">//this.updateClusterMarker();</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len === <span class="keyword">this</span>._minClusterSize) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">             <span class="keyword">this</span>._markers[i].getMap() &amp;&amp; <span class="keyword">this</span>._map.removeOverlay(<span class="keyword">this</span>._markers[i]);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._clusterMarker);</span><br><span class="line">     <span class="keyword">this</span>._isReal = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">this</span>.updateClusterMarker();</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>这段代码主要的问题在于频繁地向地图添加覆盖物，换言之，在这里产生了对DOM的频繁修改，具体可参考<code>_addToClosestCluster</code>方法。一种比较好的优化是，等所有计算结束后再一次性应用到DOM。所以，这里我们可以封装一个render()方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster.prototype.render = function()&#123;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>._markers.length; </span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="keyword">this</span>._minClusterSize) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._markers[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._clusterMarker);</span><br><span class="line">            <span class="keyword">this</span>._isReal = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.updateClusterMarker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于原理介绍及性能对比方面的内容，大家可以参考这篇文章：<a href="https://www.cnblogs.com/anyuan9/p/6232137.html" target="_blank" rel="noopener">百度地图点聚合MarkerClusterer性能优化</a></p><h1 id="Canvas-API方案"><a href="#Canvas-API方案" class="headerlink" title="Canvas API方案"></a>Canvas API方案</h1><p>OK，接下来介绍第二种方案，其实从Canvas API你就可以想到我要说什么了。Canvas API是HTML5中提供的图形绘制接口，类似于我们曾经接触过的GDI/GDI+、Direct2D、OpenGL等等。有没有觉得和游戏越来越近啦，哈哈！百度地图API v3中提供了基于Canvas API的接口，我们可以把这些“好看”的覆盖物绘制到一个层上面去，显然这种方式会比DOM更高效，因为博主亲自做了实验，一次性绘制10万个点放到地图上，真的是一点都不卡诶，要说缺点的话嘛，嗯，你想嘛，这都是不是DOM了，产品经理那些吊炸天的脑洞还怎么搞？比如最基本的点击，可能要用简单的2D碰撞来处理啦，然后就是常规的坐标系转换，听起来更像是在做游戏了，对不对？谁让那么多的游戏都是用HTML5开发的呢？同样的，这里给出一个简单的示例：</p><iframe id="cp_embed_aboRxYq" src="//codepen.io/qinyuanpei/embed/aboRxYq?height=480px]&theme-id=dark&slug-hash=aboRxYq&default-tab=[css,result" scrolling="no" frameborder="no" height="480px]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>这个方案真正尝试去做的时候，发现最难的地方是给Canvas里的元素绑定事件，细心的朋友会发现，博主在这里尝试了两种方案。<strong>第一种，通过判断点是否在矩形内来判断是否完成了点击，主要的问题是随着点的数目的增加判断的量级会越来越大。第二种，通过addHitRegion()增加一个可点击区域，这种的性能明显要比第一种好，唯一的限制在于浏览器的兼容性。</strong>目前，需要在Chrome中开启<code>Experimental Web Platform features</code>。这个探索的过程是相当不易的，大家可以通过<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>进一步感受一下哈！</p><h1 id="视野内可见方案"><a href="#视野内可见方案" class="headerlink" title="视野内可见方案"></a>视野内可见方案</h1><p>相信大家听完前两个方案都相当失望吧，一个方案用不了，一个方案太麻烦，那这个肯定就是最终可行的方案了吧！猜对了，这真的是体现了大道至简，一开始试着从内存里持久化的数据入手，可最终收到效果的反而是这个最不起眼的方案。简单来说，就是把视野内的覆盖物设为visible，而把视野外的覆盖物设置hidden。相当朴素的一种思维对吧，百度地图API中有一个返回当前视野的接口GetBounds()，它回返回一个矩形。所以，我们只需要调用百度接口判断覆盖物在不在这个矩形里就可以了，显然，这里又会循环800多次，不过产品经理们都不在乎对吧……顺着这个思路，我们可以写出下面的代码，并在拖动地图和缩放地图的时候调用它：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听地图缩放/拖拽事件</span></span><br><span class="line">map.add<span class="constructor">EventListener(<span class="string">"moveend"</span>, <span class="params">showOverlaysByView</span>)</span>;</span><br><span class="line">map.add<span class="constructor">EventListener(<span class="string">"zoomend"</span>, <span class="params">showOverlaysByView</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据视野来显示或隐藏覆盖物</span></span><br><span class="line"><span class="keyword">function</span> show<span class="constructor">OverlaysByView()</span> &#123;</span><br><span class="line">    var bounds = map.get<span class="constructor">Bounds()</span>;</span><br><span class="line">    for (var i = <span class="number">0</span>; i &lt; overlays.length; i++) &#123;</span><br><span class="line">        var overlay = overlays<span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">        var point = overlay._point;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">BMapLib</span>.</span><span class="module"><span class="identifier">GeoUtils</span>.</span></span>is<span class="constructor">PointInRect(<span class="params">point</span>, <span class="params">bounds</span>)</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">BMapLib</span>.</span><span class="module"><span class="identifier">GeoUtils</span>.</span></span>is<span class="constructor">PointOnRect(<span class="params">point</span>, <span class="params">bounds</span>)</span>) &#123;</span><br><span class="line">            overlay.show<span class="literal">()</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            overlay.hide<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在，我只能说，效果挺显著，拖动地图的时候不会卡顿了，因为visible和hidden的切换会引发浏览器重绘，对于这一切我个人表示满意。当然，这一切离好还很遥远，因为，人类的需要是永无止境的啊。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>就在我写下这篇博客的时候，产品经理热情洋溢地给我描述了城市配载2.0的设想。看了看同类产品的相关设计，我预感这个功能会变成一个以地图为核心的可视化运输系统，这符合国内用户一贯的“大而全”的使用习惯，地图上的交互会更加复杂，需要展示的信息会越来越多，所以，这篇文章里提到的优化，在未来到底有没有用犹未可知。我只能告诉你这样几个原则：<strong>尽可能的使用Marker类；尽可能的简化DOM结构；地图层级变化越大越要考虑使用聚合；视野外的覆盖物该隐藏就隐藏(反正看不到咯……)</strong>。一次性加载百万级别数据要求，我从来不觉得合理，因为就算我能加载出来，你能看的过来吗？本身就是伪需求好吧(逃……好了，这就是这篇博客的全部内容啦，以上……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="前端开发" scheme="https://qinyuanpei.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="地图" scheme="https://qinyuanpei.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="标注" scheme="https://qinyuanpei.github.io/tags/%E6%A0%87%E6%B3%A8/"/>
    
      <category term="配载" scheme="https://qinyuanpei.github.io/tags/%E9%85%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue快速实现通用表单验证</title>
    <link href="https://qinyuanpei.github.io/posts/169430744/"/>
    <id>https://qinyuanpei.github.io/posts/169430744/</id>
    <published>2019-09-06T14:53:46.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>本文开篇第一句话，想引用鲁迅先生《祝福》里的一句话，那便是：<strong>“我真傻，真的，我单单知道后端整天都是CRUD，我没想到前端整天都是Form表单”</strong>。这句话要从哪里说起呢？大概要从最近半个月的“全栈工程师”说起。项目上需要做一个城市配载的功能，顾名思义，就是通过框选和拖拽的方式在地图上完成配载。博主选择了前后端分离的方式，在这个过程中发现：<strong>首先，只要有依赖jQuery的组件，譬如Kendoui，即使使用了Vue，依然需要通过jQuery去操作DOM。其次，只有有通过Rozar生成的DOM，譬如HtmlHelper，Vue的双向绑定就突然变得尴尬起来，更不用说，Rozar中的@语法和Vue中的@指令相互冲突的问题，原本可以直接用v-for生成列表，因为使用了HtmlHelper，突然一下子变得厌恶起来，虽然Rozar语法非常强大，可我依然没有在JavaScript里写C#的热情，因为实在太痛苦啦Orz……</strong></p><p>所以，想做好前后端分离，首先需要分离出一套前端组件库，做不到这一点，前后端分离就无从谈起，就像我们公司的项目，即使框架切换到.NET Core，可是在很长的一段时间里，我们其实还是再写MVC，因为所有的组件都是后端提供的HtmlHelper/TagHelper这种形式。我这次做项目的过程中，其实是通过jQuery实现了一部分组件，正因为如此，一个在前后端不分离时非常容易实现的功能，在前后端分离以后发现缺好多东西，就比如最简单的表单验证功能，即便你是在做一个新项目，为了保证产品在外观上的一致性，你还是得依赖老项目的东西，所以，这篇博客主要想说说前后端分离以后，Vue的时代怎么去做表单的验证。因为我不想测试同事再给我提Bug，问我为什么只有来自后端接口的验证，而没有来自前端页面的验证。我希望，在写下这篇博客之前，我可以实现和老项目一模一样的表单验证。如同CRUD之于后端，80%的前端都是在写Form表单，所以，这个事情还是挺有意思的。</p><h1 id="最简单的表单验证"><a href="#最简单的表单验证" class="headerlink" title="最简单的表单验证"></a>最简单的表单验证</h1><p>OK，作为国内最接“地气”的前端框架，Vue的文档可以说是相当地“亲民”啦！为什么这样说呢，因为其实在<a href="https://cn.vuejs.org/v2/cookbook/form-validation.html" target="_blank" rel="noopener">官方文档</a>中，尤大已经提供了一个表单验证的示例，这个示例让我想起给某银行做自动化工具时的情景，因为这两者都是采用MVVM的思想，所以，理解起来是非常容易的，即：通过一个列表来存储错误信息，而这个错误信息会绑定到视图层，所以，验证的过程其实就是向这个列表里添加错误信息的过程。我们一起来看这个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好，请登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginFrom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default login"</span> <span class="attr">v-on:click</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"errorList.length &gt; 0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>&#123;&#123;errorList.join(';')&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#loginFrom'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        email: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="string">""</span>,</span></span><br><span class="line">        errorList: []</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">        validate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.errorList = []</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.email == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.errorList.push(<span class="string">'请输入邮箱'</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]&#123;2,4&#125;)$/</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (!reg.test(<span class="keyword">this</span>.email)) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.errorList.push(<span class="string">'请输入有效的邮箱'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.password == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.errorList.push(<span class="string">'请输入密码'</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">this</span>.password.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.errorList.push(<span class="string">'密码长度不得少于6位'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.errorList.length &lt;= <span class="number">0</span>;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        login: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.validate()) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'登录成功'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了排除无关内容对大家的影响，写这个例子的时候，博主排除了一切复杂的HTML结构和CSS样式，经过简单润色以后，这个例子的效果展示如下，果然GUI满足了人们颜控的一面，可让这个世界高速运行的是CLI，Bootstrap是博主这种“全栈工程师”的最爱之一。这种验证方式简直是人类本能的反应，可这恰好是最糟糕的一个例子，因为这个代码完全没法复用，可以想象得到，如果再继续增加针对密码强度，譬如大小写、数字等等的验证，这个代码会混乱成什么样子，所以，这是最简单的表单验证，同样是最糟糕的表单验证。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g6q1v1x70cj20n50aa3yq.jpg" alt="第一个表单验证的例子" title="">                </div>                <div class="image-caption">第一个表单验证的例子</div>            </figure><h1 id="基于jQuery的表单验证"><a href="#基于jQuery的表单验证" class="headerlink" title="基于jQuery的表单验证"></a>基于jQuery的表单验证</h1><p>其实，如果不是因为老项目依赖jQuery，而新项目在某些地方又需要和老项目保持一致，有谁会喜欢在Vue的世界里使用jQuery呢？因为数据驱动和事件驱动，真的是两种不同的思想，我就见过因为监听不到某个事件而花费一整天时间的人……所以，这里使用jQuery的表单验证插件<a href="https://jqueryvalidation.org/documentation/" target="_blank" rel="noopener">jQuery Validation</a>，目的只有一个，即实现博主对自己的承诺，做一个和老项目一模一样的表单验证。官方这个示例最大的问题是，它的检验逻辑扩展性比较差，后端同学对这个应该有所体会啦，譬如实际业务中常常有邮箱、手机号、非空、数字、正则等等的验证规则，而后端常常采用基于Attribute的验证或者是FluentValidation这样的库，所以，核心问题是，能不能定义相应的验证规则。接下来，我们通过jQuery的表单验证插件来实现验证。</p><p>通常情况下，jQuery Validation支持面向控件和面向代码两种验证方式。所谓面向控件，就是指在控件里添加类似<code>required</code>、<code>email</code>、<code>range</code>等等的扩展属性，jQuery Validation内置了十余种标准的验证规则，基本可以满足我们的日常使用。而面向代码，就是通过JavaScript来定义验证规则，这就非常符合Vue数据驱动的风格了，因为在JavaScript里一切皆是对象，而这些对象可以作为Vue中的数据来使用。自然而然地，在第一个示例的基础上，我们可以非常容易地扩展出基于jQuery的表单验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:'#loginFrom',</span><br><span class="line">    data:&#123;</span><br><span class="line">        email:"",</span><br><span class="line">        password:"",</span><br><span class="line">        validators:&#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                email: &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    email: true</span><br><span class="line">                &#125;,</span><br><span class="line">                password: &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    minlength: 6,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            messages:&#123;</span><br><span class="line">                email:&#123;</span><br><span class="line">                    required:"请输入邮箱",</span><br><span class="line">                    email:"请输入有效的邮箱"</span><br><span class="line">                &#125;,</span><br><span class="line">                password:&#123;</span><br><span class="line">                    required:"请输入密码",</span><br><span class="line">                    minlength:"密码长度不得少于6位"</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line">        $('#loginFrom').validate(this.validators);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于当前表单loginFrom，其验证规则为validators，它完全参照<code>jQuery Validation</code>的API文档而来，具体大家可以从<code>jQuery Validation</code>的文档来做进一步了解。这里唯一看起来不爽的就是<code>#loginFrom</code>，因为它和整个Vue看起来格格不入。不过，像博主目前项目的处境，如果老项目里使用<code>jQuery</code>来对表单进行验证，而使用Vue开发的新项目要兼容老项目的设计风格，使用jQuery有什么不可以呢？不得不说，Vue作为一个渐进式的开发框架，真正照顾了各个”年龄”段的前端工程师。使用<code>jQuery Validation</code>以后的表单验证效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g6q3nex2jhj20nk0anq36.jpg" alt="基于jQuery的表单验证" title="">                </div>                <div class="image-caption">基于jQuery的表单验证</div>            </figure><p>通过<code>jQuery Validation</code>，我们或许能感觉到一点不一样的地方，那就是表单验证其实还是蛮有意思的哈。也许是因为我原本是一个无聊的人，所以看到一点新的东西就觉得有趣。就像我虽然在提交数据时在后端做了校验，可牺牲的其实是整个前端的使用体验。而如果在前端对数据进行校验，是在输入过程中校验还是在输入完成校验，是通过表单自带的提交功能还是自己发起一个AJAX请求，这里面的确是有非常多的细节支撑的。第一种方案不支持远程校验，这更加能说明校验本身要考虑的不单单只有前端了，同理，有了前端的校验，不代表后端可以不做校验。前端时间有人在知乎上提问，大意是说前端该不该完全信任后端返回的数据，严格来说，我们不应该信任任何人提供的数据，而这就是校验这件事情本身的意义。</p><h1 id="基于Vue的表单验证"><a href="#基于Vue的表单验证" class="headerlink" title="基于Vue的表单验证"></a>基于Vue的表单验证</h1><p>OK，如果说前面的两种校验是因为我们有一点历史包袱，那么，接下来，我们将尝试采用更“现代化”的表单验证方式。通过Vue文档中关于<a href="https://cn.vuejs.org/v2/cookbook/form-validation.html" target="_blank" rel="noopener">数据校验</a>这一节的内容，我们了解到官方推荐的两个表单验证插件是<a href="https://github.com/monterail/vuelidate" target="_blank" rel="noopener">vuelidate</a>和<a href="http://vee-validate.logaretm.com/" target="_blank" rel="noopener">VeeValidate</a>，而实际上这篇博客中的第一个例子，就是由文档中的例子演化而来。我个人比较喜欢后者，所以，下面我们将使用这个插件来完成第三个例子。首先 ，我们通过<code>Vue-Cli</code>创建一个Vue项目，然后安装下面<code>vee-validate</code>和<code>vue-i18n</code>两个插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vee-validate@2.0.0 --save</span><br><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure><p>注意到这里指定了版本号，这是因为最新的3.x超出了我这个新人的接受范围，一句话，太难了！接下来，我们在入口文件<code>main.js</code>中添加下面的代码，目的是启用这两个插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span>;</span><br><span class="line"><span class="keyword">import</span> VeeValidate <span class="keyword">from</span> <span class="string">'vee-validate'</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">'vee-validate/dist/locale/zh_CN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用Vue国际化插件</span></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置VeeValidate</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">    locale: <span class="string">'zh_CN'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.use(VeeValidate, &#123;</span><br><span class="line">    i18n,</span><br><span class="line">    i18nRootKey: <span class="string">'validation'</span>,</span><br><span class="line">    dictionary: &#123;</span><br><span class="line">        zh_CN</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来，编写一个单文件组件<code>LoginForm.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>你好，请登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal col-md-offset-4 col-md-4"</span> <span class="attr">id</span>=<span class="string">"loginFrom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">v-validate</span>=<span class="string">"'required|email'"</span> <span class="attr">data-vv-as</span>=<span class="string">"邮箱"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('email')"</span>&gt;</span>&#123;&#123; errors.first('email') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">rules</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">v-validate</span>=<span class="string">"'required|min:6'"</span> <span class="attr">data-vv-as</span>=<span class="string">"密码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('password')"</span>&gt;</span>&#123;&#123; errors.first('password') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>记住密码</span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default login"</span> <span class="attr">v-on:click</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"LoginForm"</span>,</span></span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="actionscript">    email: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">    password: <span class="string">""</span></span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    login: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- style of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.login</span> &#123;</span></span><br><span class="line">  color: white;</span><br><span class="line">  height: 38px;</span><br><span class="line">  width: 300px;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#2b669a</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们在关键的两个input控件上添加了<code>v-validate</code>和<code>data-vv-as</code>这两个属性。比如我们这里需要验证用户输入的邮箱是否合法、邮箱是否为空，那么我们就可以使用下面的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">v-validate</span>=<span class="string">"'required|email'"</span> <span class="attr">data-vv-as</span>=<span class="string">"邮箱"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('email')"</span>&gt;</span>&#123;&#123; errors.first('email') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些语法在Vue中被称为指令，而<code>data-vv-as</code>则是HTML5中的一个特性，用来给提示信息中的字段起一个别名。实际上，这个插件里同样内置了一批常见的校验规则。当控件中的值不满足校验条件时，就会在<code>errors</code>中产生错误信息，所以，我们根据错误信息中是否包含指定字段来决定要不要展示错误信息，这就是这个插件的作用。运行这个例子，我们会得到下面的结果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g6rebtg81jj20n70hj74u.jpg" alt="基于Vue的表单校验" title="">                </div>                <div class="image-caption">基于Vue的表单校验</div>            </figure><p>既然提到这类表单验证最难的地方在于扩展性，那么下面我们再来看看如何扩展一个新的校验规则，这里以最常见的手机号校验为例,  个人以为这是这个插件最为强大的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Validator.extend(<span class="string">'isMobile'</span>, &#123;</span><br><span class="line">  messages: &#123;</span><br><span class="line">    zh_CN: <span class="function"><span class="params">field</span> =&gt;</span> field + <span class="string">'必须是11位手机号码'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length === <span class="number">11</span> &amp;&amp; <span class="regexp">/^((13|14|15|17|18)[0-9]&#123;1&#125;\d&#123;8&#125;)$/</span>.test(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相信通过今天这篇博客，大家应该对Vue里的表单验证有一点心得了。这类验证的库或者框架其实非常多，整合到Vue中要做的工作无外乎写一个插件，在控件触发相关事件或者表单提交的时候进行验证。作为一个Vue的新人，这个过程可谓是路漫漫其修远。你大概想不到，我是在凌晨加班加到凌晨两点半的情况下做完这几个示例的，最近这两三个月里加的班比我过去三年都多，这到底是好事还是坏事呢？有时候不知道自己还能不能坚持下去，往事已矣，人难免会感到迷茫的吧！</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇博客主要通过三个示例分享了Vue下表单校验的实现，而促使博主对这一切进行研究的原始动力，则是源于一个实际工作中通过Vue开发的新项目。前后端要不要分离、项目里要不要继续使用jQuery、该不该频繁地操作DOM，这其实是毫无关联地三件事情，而这种事情90%的人是完全不关心的，就像有一种看起来相当“成年人”的做法，出了事情第一时间不是去纠结谁的过错，而是问能不能马上解决以及解决问题需要多长时间。这看起来好像一点问题都没有，可不去在意事件本身对错的人，是因为这些问题不需要他去处理，利益相关和责任相关是完全不一样的，因为你不能一出问题全部都找到程序员这里，这项目又不是程序员一个人的。我关心这些无关紧要的问题，纯粹是因为我对自己做的东西有一种感情，我想做好它而已，我希望自己是个纯粹的人，而且可以一直纯粹下去，晚安！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Vue" scheme="https://qinyuanpei.github.io/tags/Vue/"/>
    
      <category term="表单" scheme="https://qinyuanpei.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="验证" scheme="https://qinyuanpei.github.io/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>在WSL中使用Linux桌面环境的尝试与总结</title>
    <link href="https://qinyuanpei.github.io/posts/3972610476/"/>
    <id>https://qinyuanpei.github.io/posts/3972610476/</id>
    <published>2019-08-17T21:09:46.000Z</published>
    <updated>2020-02-04T10:39:03.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>最近忙里偷闲的博主，再次迷恋上折腾Linux。话说自从微软推出WSL以后，我就彻底地停止了Windows + Linux 的双系统组合。回想起从前使用过的各种Linux发行版，基本上每隔一段时间就会崩溃一次，所以，面对WSL这种近乎<code>应用</code>级别的方案，我个人是非常愿意去接受的。因为一不小心玩坏了的话，可以直接对应用程序进行重置，或者重新从应用商店下载，相比重装系统，我觉得这种方式要更友好一点。虽然说Windows10是有史以来最好的Linux发行版:smile:，可面对只有命令行的Linux，果然还是有一丝丝的失望啊:beetle:。所以，在这篇博客里，主要想和大家分享下，关于在WSL下使用Linux桌面系统的一点点尝试和体会。虽然目前应用商店里已经提供了Ubuntu、Debian、Kail Linux、OpenSUSE这些常见的发行版，可当你熟悉了Linux的世界以后，就会明白这个世界对多元化的追求是永无止境的，我不想去Judge这些多元化间优劣，我只想自由地使用我喜欢的技术，比如Linux Deepin、Elementary OS。这是我想要使用Linux桌面环境的理由。</p><p>我们知道，目前应用商店里提供的Linux发行版都是<code>&quot;命令行&quot;</code>版本。因为Windows本身就提供了非常出色的桌面环境，虽然每一次设计都给人一种相当前卫的感觉。平时我们使用<code>SSH</code>登录远程服务器的时候，其实是使用它的终端环境即CLI。Linux和Windows最大的不同在于，Linux 的桌面环境并不是Linux本身的一部分，它和所有的Linux应用程序并没有什么区别，因为脱离桌面环境的Linux的单独运行，而脱离桌面环境的Windows则未必可以。那么，我们怎么样在Windows里使用Linux的桌面环境呢？常见的思路主要有<code>XServer</code>和<code>远程桌面</code>两种。这里我们主要介绍第一种方式，即<code>XServer</code>。什么是XServer呢？Linux的GUI架构其实是C/S模式的，其中XServer负责显示，XClient负责请求。所以，我们只要在宿主机上安装XServer就可以啦。在这里，常见的XServer主要有：<code>VcXsrv</code>、<code>X410</code>和<code>MobaXterm</code>。理论上，我们只需要在WSL里安装桌面环境，在Windows上安装XServer，然后通过命令行启动相应桌面环境即可。</p><p>作为一个最流行的Linux发行版，微软非常贴心地给出了16.04和18.04两个版本。不过随着博主不甘寂寞地一通升级以后，最终还是稳定在了18.04这个版本。既然选择从Ubuntu这个发行版开始折腾，不如从它默认的桌面环境Gnome开始折腾吧！虽然我个人一直不太喜欢这个风格，不然就不会有接下来针对<code>Pantheon</code>和<code>Deepin</code>两个桌面环境的作死啦。这个过程最有意思的事情，居然是发现了一个更轻量级的桌面环境，可能真的是<code>&quot;无心插柳柳成荫&quot;</code>吧。好了，关于如何开启WSL及安装Linux发行版的过程不再多说。首先，让我们把系统默认的源切换到阿里云，因为这样能节省博主和大家的时间。:slightly_smiling_face:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.2019016</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>接下来，我们使用下面的命令对文件内容进行替换, 或者你可以手动逐行去编辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:%s/security.ubuntu/mirrors.aliyun/g</span><br><span class="line">:%s/archive.ubuntu/mirrors.aliyun/g</span><br></pre></td></tr></table></figure><p>除此以外，还推荐大家使用以下国内的镜像源：</p><p>清华大学镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><p>网易开源镜像站：<a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/ubuntu.html</a></p><p>完成镜像源的切换以后，我们就可以愉快地使用<code>apt-get update</code>刷一波存在感啦，话说最近看到一条微博，建议给<code>sudo</code>起一个别名<code>plz</code>或者<code>pls</code>。除了调侃以外，可能更多是想把冰冷的命令行变得充满人情味吧。Windows下安装<code>VcXsrv</code>大家都轻车熟路啦，这个不再过多的说明。下面，我们来安装以下Ubuntu桌面环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "y"|sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class="line">sudo dpkg-reconfigure dbus &amp;&amp; service dbus restart</span><br></pre></td></tr></table></figure><p>接下来配置<code>XLaunch</code>，这是我们安装完<code>VcXsrv</code>后自带一个应用程序：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g633ck83tij20ek0bpwfg.jpg" alt="配置XLaunch" title="">                </div>                <div class="image-caption">配置XLaunch</div>            </figure><p>按照默认配置直至完成后我，我们会发现桌面上出现了一个黑色的窗口，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g633jddpbcj21200lcabq.jpg" alt="XLaunch经典黑屏" title="">                </div>                <div class="image-caption">XLaunch经典黑屏</div>            </figure><p>此时，我们在Ubuntu的Bash窗口中输入<code>sudo compiz</code>命令并切回<code>XLaunch</code>界面。接下来，就是见证奇迹的时刻：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g67nqmov1yj21410p0qdr.jpg" alt="经典的Ubuntu桌面" title="">                </div>                <div class="image-caption">经典的Ubuntu桌面</div>            </figure><p>如你所见，这是Ubuntu默认的Unity桌面，博主一开始是在Ubuntu16.04上研(折)究(腾)的，当时安装完以后桌面其实是黑色的，因为当时并没有保留下这历史性的一刻，所以，从网上找了张图来这里充数啦，这张图片出自：<a href="https://github.com/microsoft/WSL/issues/637" target="_blank" rel="noopener">Run any Desktop Environment in WSL</a>。</p><p>OK，既然Ubuntu可以装桌面，那么，衍生自Ubuntu的Elementary OS和Linux Deepin应该同样可以吧，虽然目前应用商店里还有这两个发行版。本着不折腾就不会死的选择，先装个Elementary OS的桌面环境试试呗！我个人挺喜欢这个发行版的，理由是默认主题样式就很好看，同理，Linux Deepin除了好看以外，本身就带有大量优秀的软件。所以说，人类果然还是始于颜值的啊！Elementary OS使用的桌面环境是Pantheon，我们可以通过下面的命令行快速安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:elementary-os/stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install elementary-desktop</span><br></pre></td></tr></table></figure><p>通常，每个桌面环境都会自带一部分“最佳”适配的应用程序，考虑到WSL并不是一个完整的Linux实现，我们在这里卸载掉一部分WSL下不支持的应用程序。而微软新推出的WSL2，则是基于VM的实现，两种方式完全没有可比性，这里不做无意义的争论：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge gnome-screensaver \</span><br><span class="line">switchboard-plug-power switchboard-plug-bluetooth switchboard-plug-networking \</span><br><span class="line">wingpanel-indicator-bluetooth wingpanel</span><br></pre></td></tr></table></figure><p>参考<a href="https://token2shell.com/howto/x410/installing-pantheon-desktop-on-ubuntu-wsl/" target="_blank" rel="noopener">Installing Pantheon Desktop On Ubuntu</a>这篇文章中的建议，为了启动Pantheon桌面环境，我们需要 <code>gala</code>、 <code>plank</code>和<code>wingpanel</code>三个软件，它们的作用有点像前面的<code>compiz</code>。而关于<code>X410</code>，你可以把它理解为和<code>VcXsrv</code>类似的软件，不同的是这是一个付费软件，作者写了一系列的博客来推广它。接下来，在安装<code>gala</code>的过程中，你大概会遇到这个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The following packages have unmet dependencies:</span><br><span class="line">gala : Depends: libmutter-2-0 (&gt;= 3.28.4-0ubuntu18.04.1+elementary4~ubuntu5.0.1) but 3.28.4-0ubuntu18.04.1 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>我向作者发邮件寻求帮助，作者非常热心地回复了我三次邮件，对方表示应该是Elementary OS团队正在基于Ubuntu19.04开发新版本，所以可能没有意识到<code>elementary-desktop</code>这个包已经broken了，并且他们在18.04版本上复现了这个问题，建议我直接联系官方。好吧，博主的英语表示受宠若惊，邮件在此为证：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g6877vhqhcj20io0hut9u.jpg" alt="来自国外网友的热心指导" title="">                </div>                <div class="image-caption">来自国外网友的热心指导</div>            </figure><p>总而言之，博主试图在WSL上体验Elementary OS的想法彻底失败，既然这个最美的Linux发行版已失败告终，并不打算就此罢手的博主，决定继续在命令行终端里折腾Linux Deepin。这个发行版是我从大学时开始接触的Linux发行版，那时有个小学弟第一次给我介绍了Linux Mint，不过我对这个版本实在爱不起来，因为太像Windows了啊，可谁能想到若干年后，Windows反而变成了最好的Linux发行版呢(:smile:)，果真是<code>“人生不相见，动如参与商”</code>啊……</p><p>好啦，继续敲命令。Linux Deepin的桌面环境是Deepin Desktop Environment，简称dde：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:leaeasy/dde</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install dde dde-file-manager</span><br></pre></td></tr></table></figure><p>Linux Deepin安装是非常顺畅的，但即便安装完这个桌面环境，博主还是不知道怎么启动这个环境，因为你常规使用Ubuntu的话，安装完切换桌面管理器就可以了，可当你用WSL这种方式使用Ubuntu的时候，可能你就会感到非常困惑。相比之下，<code>xfce</code>就让人感觉友好得多，因为它只有一个命令<code>startxfce4</code>，而安装只需要安装<code>xfce4</code>和<code>xfce4-terminal</code>就可以了。在对比了Gnome、KDE、Unity、Mint、xfce等等的桌面环境以后，我觉得Linux在桌面市场输给Windows是理所当然的，因为实在太混乱了，WSL下需要的应该是一个轻量级的桌面，因为越是华而不实东西，越会消耗大量资源。我最初想要折腾桌面环境，无非是为了下面这个结果，撒花完结，以上！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g67nrxqcm4j21hc0u0nat.jpg" alt="简洁/简陋的xfce桌面" title="">                </div>                <div class="image-caption">简洁/简陋的xfce桌面</div>            </figure>]]></content>
    
    <summary type="html">
    
      Linux Deepin安装是非常顺畅的，但即便安装完这个桌面环境，博主还是不知道怎么启动这个环境，因为你常规使用Ubuntu的话，安装完切换桌面管理器就可以了，可当你用WSL这种方式使用Ubuntu的时候，可能你就会感到非常困惑
    
    </summary>
    
      <category term="开发工具" scheme="https://qinyuanpei.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="WSL" scheme="https://qinyuanpei.github.io/tags/WSL/"/>
    
      <category term="Linux" scheme="https://qinyuanpei.github.io/tags/Linux/"/>
    
      <category term="桌面" scheme="https://qinyuanpei.github.io/tags/%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>通过ApiExplorer为Swagger提供MVC扩展</title>
    <link href="https://qinyuanpei.github.io/posts/4116164325/"/>
    <id>https://qinyuanpei.github.io/posts/4116164325/</id>
    <published>2019-08-06T23:02:05.000Z</published>
    <updated>2020-02-04T10:39:03.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>我一直想吐槽下运维同事提供的Jekins项目模板，因为它居然不支持含有多个项目的解决方案。作为一个有追求的程序员，每个解决方案下最少应该含有两个项目，即项目本身和项目对应的单元测试。可惜在这样一种情形下，我没法再去坚持这样的原则，而这真正让我感到难过的是，为了在编译环节向Jekins妥协，大家在一个项目里极尽所能，在这一个项目里居然混合了<code>MVC</code>、<code>WebApi</code>和<code>WebService</code>三种技术，甚至到最后连传统三层的界限都越来越模糊了。这让我意识到一件事情，工程上的妥协和技术选型一样，在某种意义上它们都不能被称之为科学，因为确实没什么道理，完全是运维为了方便而制造出的问题。在我们意识到文档的重要性以后，写文档就变成了日常工作。我一直坚持的原则是，文档能通过工具生成就坚决不要手写，所以，看到项目目录里充斥着各种各样的文档格式，譬如Word、Excel、Pdf、Viso等等的时候，我毅然决然地选择了Swagger。而今天这篇文章的原由，恰恰来自于这个”混搭”的项目。说到这里，你可能已经想到我想做什么了。不错，我们有部分WebApi是写在MVC的控制器里的，我希望使用者可以通过Swagger看到这部分接口的文档，这样我就有时间在这里写博客了。😄</p><h1 id="故事缘起"><a href="#故事缘起" class="headerlink" title="故事缘起"></a>故事缘起</h1><p>常规的Swagger的使用就不再说啦，因为基本上你通过Nuget安装完<code>Swashbuckle</code>以后，再配置下项目生成的XML注释文档就可以使用啦！不过，博主在这里遇到的第一个问题就是，按照常规套路配置好了以后，Swagger页面打开完全就是空白的啊，反复尝试直至怀疑人生后，我突然意识到，莫非是因为我这是一个MVC的项目？立马跑到官方的Issues下面逐个扫视，果不其然，大佬们一致给出了答案：<strong>Swagger是不支持MVC类型的项目的</strong>。这里补充说明，这里的MVC是指<code>ASP.NET MVC</code>。目前官方主推的<code>ASP.NET Core</code>是没有这种困惑的啦，因为微软在这个新版本中统一了MVC和WebApi。对于这种历史“遗留问题”，既然Swagger官方都不愿意提供支持，那么，博主只好勉为其难的提供一个实现，我不得不承认，带着历史包袱的ASP.NET在扩展性上的确不如全新的“Core”系列，因为单单是<code>System.Web</code>系列的动态链接库版本就令人痛苦不堪，因此，博主在写这个扩展的时候，全部升到了最新的5.2.7.0。</p><h1 id="实现MvcApiExplorer"><a href="#实现MvcApiExplorer" class="headerlink" title="实现MvcApiExplorer"></a>实现MvcApiExplorer</h1><p>好了，Swagger之所以能够生成友好、可交互的API文档，其核心依赖于IApiExplorer接口。这一点，我们可以通过Swashbuckle项目中的源代码来得到验证。其中，生成符合Swagger规范的JSON文档，是通过SwaggerGenerator这个类来实现的。而进一步研究这个类，我们就会发现它依赖<code>IApiExplorer</code>接口。这个接口位于<code>System.Web.Http.Description</code>命名空间下，而显然这是WebApi相关的命名空间，所以，对于一般的WebApi项目，因为微软已经帮我们实现了默认的ApiExplorer，所以，Swagger可以识别出项目中的Controller及其Action，并通过XML注释文档进一步填充接口相关的描述信息。一旦想到这一层，我们就会明白，为什么Swagger不支持MVC项目，因为MVC里压根就没有实现IApiExplorer接口啊！那么，怎么办呢？我们的想法是通过反射取出所有的MVC控制器及其Action，然后组织出这些接口的描述信息，再将它们添加到默认的IApiExplorer实现中去，这样MVC和WebApi都可以被Swagger识别，为此，我们继承默认的ApiExplorer，并实现我们自定义的<code>MvcApiExplorer</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MvcApiExplorer</span> : <span class="title">ApiExplorer</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> HttpConfiguration</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> HttpConfiguration _configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MvcApiExplorer</span> (<span class="params">Assembly assembly, HttpConfiguration configuration</span>) : <span class="title">base</span> (<span class="params">configuration</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">        assembly.GetTypes ()</span><br><span class="line">            .Where (type =&gt; <span class="keyword">typeof</span> (IController).IsAssignableFrom (type) &amp;&amp; type.Name != <span class="string">"ErrorController"</span> &amp;&amp; type.BaseType != <span class="keyword">typeof</span> (ApiController))</span><br><span class="line">            .ToList ().ForEach (controller =&gt; </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>.ApiDescriptions.AddRange (BuildControllerApiDescription (controller));</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> ApiExolorer for Action is visible</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="actionVariableValue"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="actionDescriptor"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="route"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ShouldExploreAction</span> (<span class="params"><span class="keyword">string</span> actionVariableValue, HttpActionDescriptor actionDescriptor, IHttpRoute route</span>)</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> ApiExolorer for Controller is visible</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerVariableValue"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerDescriptor"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="route"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">ShouldExploreController</span> (<span class="params"><span class="keyword">string</span> controllerVariableValue, HttpControllerDescriptor controllerDescriptor, IHttpRoute route</span>)</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ApiDescription&gt; <span class="title">BuildControllerApiDescription</span> (<span class="params">Type type</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> controllerName = type.Name.Replace (<span class="string">"Controller"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">var</span> methods = type.GetMethods (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | BindingFlags.DeclaredOnly)</span><br><span class="line">            .Where (m =&gt; <span class="keyword">typeof</span> (ActionResult).IsAssignableFrom (m.ReturnType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;ApiDescription&gt; ();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> method <span class="keyword">in</span> methods)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> apiDescription = <span class="keyword">new</span> ApiDescription ();</span><br><span class="line">            apiDescription.ActionDescriptor = <span class="keyword">new</span> MvcHttpActionDescriptor (method);</span><br><span class="line">            apiDescription.ActionDescriptor.ControllerDescriptor = <span class="keyword">new</span> HttpControllerDescriptor (_configuration, controllerName, type);</span><br><span class="line">            apiDescription.HttpMethod = HttpMethod.Post;</span><br><span class="line">            apiDescription.Route = <span class="keyword">new</span> HttpRoute (<span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;/&#123;1&#125;"</span>, controllerName, method.Name));</span><br><span class="line">            apiDescription.RelativePath = <span class="keyword">string</span>.Format (<span class="string">"&#123;0&#125;/&#123;1&#125;"</span>, controllerName, method.Name);</span><br><span class="line">            apiDescription.Documentation = <span class="keyword">string</span>.Empty;</span><br><span class="line">            <span class="keyword">typeof</span> (ApiDescription).GetProperty (<span class="string">"ParameterDescriptions"</span>).SetValue (apiDescription, BuildApiParameters (method));</span><br><span class="line">            <span class="keyword">typeof</span> (ApiDescription).GetProperty (<span class="string">"ResponseDescription"</span>).SetValue (apiDescription, <span class="keyword">new</span> ResponseDescription () </span><br><span class="line">            &#123;</span><br><span class="line">                ResponseType = method.ReturnType,</span><br><span class="line">                DeclaredType = method.DeclaringType,</span><br><span class="line">                Documentation = <span class="keyword">string</span>.Empty</span><br><span class="line">            &#125;);</span><br><span class="line">            list.Add (apiDescription);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Collection&lt;ApiParameterDescription&gt; <span class="title">BuildApiParameters</span> (<span class="params">MethodInfo methodInfo</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Collection&lt;ApiParameterDescription&gt; (</span><br><span class="line">            methodInfo.GetParameters ().Select (p =&gt; <span class="keyword">new</span> ApiParameterDescription () </span><br><span class="line">            &#123;</span><br><span class="line">                Name = p.Name,</span><br><span class="line">                Documentation = <span class="keyword">string</span>.Empty,</span><br><span class="line">                Source = ApiParameterSource.Unknown,</span><br><span class="line">                ParameterDescriptor = <span class="keyword">new</span> MvcHttpActionParameterDescriptor (p, <span class="keyword">new</span> MvcHttpActionDescriptor (methodInfo)),</span><br><span class="line">            &#125;).ToList ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以看出，实现MvcApiExplorer的过程，其实就是向ApiDescriptions集合中添加元素的过程。为此，我们通过程序集去反射所有实现了<code>IController接口</code>，同时其父类不是<code>ApiController</code>，并且方法返回值类型为<code>ActionResult</code>的所有类型，通过这个类型信息，我们进一步反射每个方法以及方法的参数，并把这些参数转换为ApiDescription类型需要的参数类型。在组织信息的过程中，有一部分属性被微软设计为只读，故而不得不通过反射的方式来解决。我们知道，MVC里默认的路由模板是：<code>{controller}/{action}</code>，这是WebApi里的特性路由流行以前默认的、最基础的路由。我们这里基于沿用这个规则，所谓“约定大于配置”，这可以为我们节省不少时间。MVC里的HTTP动词我全部使用了POST，这是因为MVC里真正控制一个方法是GET还是POST请求，其实是<code>JsonRequestBehavior</code>这个参数，当它设置为AllowGet时，该方法可以同时支持这两种HTTP动词。同样，在模模型绑定阶段，我全部使用了Unknown，因为MVC会尝试通过Body或者Form的形式来接受一个参数，这两个地方完全是来自MVC本身机制的限制，如果大家有更好的思路，欢迎大家在博客里留言。</p><p>一旦实现了自定义的MvcApiExplorer，我们就可以尝试用它来替换微软默认的实现。在ASP.NET中，我们通过<code>GlobalConfiguration.Configuration.Services.Replace()</code>方法来实现服务的替换。其实，这种思路在ASP.NET Core里依然存在，比如我们在实现动态WebApi时采用的<code>ControllerFeatureProvider</code>都属于服务替换，所不同的时，ASP.NET时代是通过一个内置的IoC容器来实现服务替换，而ASP.NET Core时代，我们显然有了更多的选择，甚至依赖注入渗透到了整个.NET Core的方方面面，这的确是一种相当大的进步。曾几何时，Javaer嘲笑我们只会拖控件，可今天的我们，Java里有的概念我们都有对应的实现，反倒是Java开始从C#身上学习那些有点“甜”的语法糖啦！的确，我们写了这么多代码，其实最关键的就只有下面这一句，住口！这明明是三行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assembly = <span class="keyword">typeof</span>(DefaultMvcProject.MvcApplication).Assembly;</span><br><span class="line"><span class="keyword">var</span> apiExplorer = <span class="keyword">new</span> MvcApiExplorer(assembly, GlobalConfiguration.Configuration);         GlobalConfiguration.Configuration.Services.Replace(<span class="keyword">typeof</span>(IApiExplorer), apiExplorer);</span><br></pre></td></tr></table></figure><p>OK，接下来我们简单写几个MVC的控制器，来验证下我们为Swagger编写的MVC控制。在此之前，请确保完成了Swagger的两步常规配置，即为Swagger引入XML注释文档、在项目属性中勾选XML注释文档。这是使用Swagger的最小配置，相信大家一定都知道啦！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GlobalConfiguration.Configuration</span><br><span class="line">    .EnableSwagger (c =&gt; &#123;</span><br><span class="line">        c.SingleApiVersion (<span class="string">"v1"</span>, <span class="string">"DefaultMvcProject"</span>);</span><br><span class="line">        c.IncludeXmlComments (<span class="string">$"<span class="subst">&#123;System.AppDomain.CurrentDomain.BaseDirectory&#125;</span>/bin/DefaultMvcProject.XML"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .EnableSwaggerUi (c =&gt; &#123;</span><br><span class="line">        c.DocumentTitle (<span class="string">"My Swagger UI"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>两个非常简单的Controller，这里就不再贴代码啦！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g5sqi6pwx2j20kh0ggtav.jpg" alt="非常简单的Controller" title="">                </div>                <div class="image-caption">非常简单的Controller</div>            </figure><p>可以注意到，一切都工作的很好，我们在Swagger里可以看到我们编写的Api接口，并且可以直接对接口进行调试。因为MVC本身的原因，这些MVC控制器的注释都不会生成到XML注释文档里。所以，稍微有一点遗憾的地方就是，这些接口都没有对应注释。不过，这已经达到了本文最初的目的，至少我不用再去写文档，告诉使用者这个接口里有哪些参数，以及这个接口的地址是什么啦，说到底啊，懒惰是人类进步的阶梯。这篇博客里实现的扩展，我已经发布到Github上，并附带了一个简单的示例(不要想太多哦，就是这篇文章里的示例)，感兴趣的朋友可以自助研究，仓库地址为：<a href="https://github.com/qinyuanpei/Swashbuckle.Extension.Mvc" target="_blank" rel="noopener">https://github.com/qinyuanpei/Swashbuckle.Extension.Mvc</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g5sqlzk1mrj211y0ifgn1.jpg" alt="差一点就完美了" title="">                </div>                <div class="image-caption">差一点就完美了</div>            </figure><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>本文实现了一个针对MVC项目的Swagger扩展，它可以让你编写在MVC控制器里的API接口，像普通WebApi项目一样展示在Swagger里。其原理是继承并重写了<code>ApiExplorer</code>类，这是Swagger生成API文档的核心接口。好了，以上就是这篇文章的全部内容啦，写这种短小的文章没有那么累，希望大家读起来一样不会累吧，晚安，世界！</p>]]></content>
    
    <summary type="html">
    
      这个接口位于`System.Web.Http.Description`命名空间下，而显然这是WebApi相关的命名空间，所以，对于一般的WebApi项目，因为微软已经帮我们实现了默认的ApiExplorer，所以，Swagger可以识别出项目中的Controller及其Action，并通过XML注释文档进一步填充接口相关的描述信息
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="WebApi" scheme="https://qinyuanpei.github.io/tags/WebApi/"/>
    
      <category term="Swagger" scheme="https://qinyuanpei.github.io/tags/Swagger/"/>
    
      <category term="MVC" scheme="https://qinyuanpei.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core POCOController在动态Web API中的应用</title>
    <link href="https://qinyuanpei.github.io/posts/116795088/"/>
    <id>https://qinyuanpei.github.io/posts/116795088/</id>
    <published>2019-08-01T16:44:59.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>Hi，大家好，我是Payne，欢迎大家关注我的博客，我的博客地址是：<a href="https://blog.yuanpei.me" target="_blank" rel="noopener"><a href="https://blog.yuanpei.me" target="_blank" rel="noopener">https://blog.yuanpei.me</a></a>。在上一篇文章中，我和大家分享了ASP.NET中动态Web API的实现，这种方案的现实意义是，它可以让我们把任意一个接口转换为Web API，所以，不单单局限在文章里提到的WCF迁移到Web API，任意领域驱动开发(DDD)中的服务层，甚至是更为普遍的传统三层，都可以通过这种方式快速构建前后端分离的应用。可能大家会觉得直接把Service层暴露为API，会引发一系列关于鉴权、参数设置(FromQuery/FromBody)等等的问题，甚至更极端的想法是，这样和手写的没什么区别，通过中间件反射能达到相同的目的，就像我们每天都在写各种接口，经常有人告诉我们说，不要在Controller层写太重的业务逻辑，所以，我们的做法就是不断地在Service层里增加新接口，然后再把Service层通过Controller层暴露出来，这样子真的是对的吗？</p><p>可我个人相信，技术总是在不断向前发展的，大家觉得RESTful完全够用啦，结果GraphQL突然发现了。大家写了这么多年后端，其实一直都在绕着数据转，可如果数据库本身就支持RESTful风格的接口，或者是数据库本身就支持某种ORM，我们后端会立马变得无趣起来。其实，在ASP.NET Core中已经提供了这种特性，这就是我们今天要说的POCOController，所以，这也许是个正确的思路，对吧？为什么Service层本身不能就是Controller层呢？通过今天这篇文章，或许你会接受这种想法，因为POCOController，就是弱化Controller本身的特殊性，一个Controller未必需要继承自Controller，或者在名称中含有<strong>Controller</strong>相关的字眼，如果Controller同普通的类没有区别会怎么样呢？答案就是Service层和Controller层的界限越来越模糊。扪心自问，我们真的需要中间这一层封装吗？</p><h1 id="什么是POCOController"><a href="#什么是POCOController" class="headerlink" title="什么是POCOController"></a>什么是POCOController</h1><p>POCOController是ASP.NET Core中提供的一个新特性，按照约定大于配置的原则，在ASP.NET Core项目中，所有带有Controller后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承Controller类，ASP.NET Core依然会将其识别为Controller，并拥有和普通Controller一样的功能，说到这里，你是不是有点兴奋了呢，因为我们在ASP.NET里花了大力气去做类似的事情，因为ASP.NET里一个普通的类是没有办法成为Controller的，即使通过Castle的Dynamic Proxy黑科技，我们依然需要去Hack整个MVC框架创建、筛选Controller和Action的过程。可在ASP.NET Core里这一切居然变成了一个新的feature，所以，我预感到这篇文章应该不会像上一篇文章那么长，果然9102有9102的好处呢……好了，现在我们来写一个POCOController：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Echo</span>(<span class="params"><span class="keyword">string</span> receiver</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$"Hello, <span class="subst">&#123;receiver&#125;</span>"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们通过浏览器访问：<a href="http://localhost:6363/Message/Echo?receiver=PayneQin，我们就会发现一件非常神奇的事情，那就是，我们并没有真的在写一个Controller，它没有继承Controller类，虽然它的名字里带着Controller的后缀，可它确实实现了一个Controller所具备的功能，因为它返回了我们期望的信息。" target="_blank" rel="noopener">http://localhost:6363/Message/Echo?receiver=PayneQin，我们就会发现一件非常神奇的事情，那就是，我们并没有真的在写一个Controller，它没有继承Controller类，虽然它的名字里带着Controller的后缀，可它确实实现了一个Controller所具备的功能，因为它返回了我们期望的信息。</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g5j4wxhvuaj20kw0c075r.jpg" alt="欢迎来到POCOController的世界" title="">                </div>                <div class="image-caption">欢迎来到POCOController的世界</div>            </figure><p>可以注意到，这个Controller使用起来和普通的Controller是没有任何区别的，这正是我们想要的结果。对于.NET Core而言，一个普通的类想要成为POCOController，只需要满足以下任意一个条件：第一，继承自Microsoft.AspNetCore.Mvc.Controller类，无论是否带有Controller后缀，都可以作为POCOController。第二，不继承自Microsoft.AspNetCore.Mvc.Controller类，同时引用了Microsoft.AspNetCore.Mvc相关的程序集。在这里，博主一开始就犯了这个错误，因为博主建的是一个Web API类型的项目。</p><h1 id="ControllerFeatureProvider"><a href="#ControllerFeatureProvider" class="headerlink" title="ControllerFeatureProvider"></a>ControllerFeatureProvider</h1><p>那么，为什么ASP.NET Core里可以实现如此炫酷的功能呢？这里要介绍到ControllerFeatureProvider。在.NET Core中，微软引入了应用程序部件的概念，顾名思义，它是对应用程序资源的一种抽象，通过这些应用程序部件， .NET Core提供了发现和加载MVC组件，如控制器、视图(View)、标记(TagHelper)、Razor等等的功能。在MVC中，这些功能由ApplicationPartManager对象来进行管理，它维护着一个叫做FeatureProviders的列表，以上这些功能分别对应一个Feature，所以，当我们希望引入一个新的功能的时候，只需要实现IApplicationFeatureProvider<T>接口即可，而这里的ControllerFeatureProvider显然是提供“控制器”相关的Feature，它有一个最为关键的接口IsController(TypeInfo)。</p><p>回到一开始的话题，微软定义了一个类成为POCOController的规则，实际上我们同样可以定义自己的规则，譬如ABP框架中限定的接口约束是实现IAppService这个接口，那么我们就可以把一个程序集或者多个程序集里的类型识别为控制器，这就是POCOController的奥秘所在。在比如我们的项目中难免会有大量CRUD的垃圾需求，区别仅仅是它访问不同的仓储，我们可能会想写一个泛型的控制器来处理，可惜在过去的ASP.NET里，实现这一切并不太容易。为什么说不大容易呢？通过我们上一篇文章里动态路由的整个过程，大家就知道有多麻烦了啊，可在.NET Core里要实现一个泛型的控制器就非常容易了啊，因为我们只需要告诉ControllerFeatureProvider，这是一个控制器，并且控制器的类型就是这个泛型参数T，所以，综上所述，ControllerFeatureProvider主要做两个事情，第一，判定一个类型能不能算作Controller；第二，对程序集里的类型进行筛选和过滤。下面，我们顺着这个思路来实现我们自己的ControllerFeatureProvider。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicControllerFeatureProvider</span> : <span class="title">ControllerFeatureProvider</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">IsController</span> (<span class="params">TypeInfo typeInfo</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> type = typeInfo.AsType ();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">typeof</span> (IDynamicController).IsAssignableFrom (type) ||</span><br><span class="line">            !typeInfo.IsPublic || typeInfo.IsAbstract || typeInfo.IsGenericType) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，我们采用了一种简单粗暴的方式，任何非Public、非抽象、非泛型并且实现了IDynamicController接口的类型，都可以被认为是一个Controller，原谅我起了这样一个直白而普通的接口名称，因为一开始做的时候，真的就是想延续动态Web Api这个想法而已，所以，大家明白就好了，不用太过纠结这个接口的名字，甚至你还可以通过Attribute来打上标记，反正都是为了辨别哪些类型可以被当做控制器。</p><h1 id="IApplicationModelConvention"><a href="#IApplicationModelConvention" class="headerlink" title="IApplicationModelConvention"></a>IApplicationModelConvention</h1><p>OK，现在我们已经告诉.NET Core，怎么样去把一个类型识别为Controller。因为MVC中有一些所谓“约定大于配置”的东西，比如默认的路由规则是{area}/{controller}/{action}/{id}，相信从ASP.NET时代一起走过来的各位，对这个东西应该很熟悉啦，因为最早App_Start里会有RouteConfig和WebApiConfig这两个东西。我们在做ASP.NET版本的动态Web API的实现的时候，实际上就是配置了这样一个固定的路由，所以，理论上现在即使我们不讲下面这部分内容，现在我们已经实现了动态Controller。可如果我们希望对路由进行全局配置，我们就不得不关注这个接口。简而言之，通过这个接口，我们可以修改MVC里约定俗成的这套规则，譬如在路由中带个版本号前缀，或者根据命名空间去生成某种规则的路由，我们都可以考虑去实现这个接口。一般情况下，我们会通过重写Apply()方法来达到修改路由的目的。</p><p>在这篇文章里，我们希望在MVC这套默认路由的基础上，增加对特性路由的支持。说到这里，我们又会回到一个旧话题，即基于配置的路由和基于特性的路由这两种路由。前者是MVC里的路由设计的基础，而后者是Web API里提出并在RESTful风格API的设计中发扬光大。所以，我们希望在提供默认路由的基础上，使用者可以自由配置路由风格，所以，我们需要通过这个接口来构造路由信息，值得一提的是，我们可以在这个过程中设置ApiExplorer是否可见，为接口参数设置合适的绑定模型等等，所以，我们会使用HttpGet/HttpPost等来标记接口的调用方式，使用Route来标记用户自定义的路由信息，使用FromBody/FromQuery等来标记参数的绑定信息，有了这些配合Swagger简直是无往不胜，并非是开发人员不愿意写文档，而是因为文档的更新速度往往赶不上需求的变化速度，一旦文档落后于实际业务，这样的文档实际是没有意义的，我真的讨厌所有人都来找你问接口的地址、参数这些东西，如果你写完了一个Service，写好对应的方法注释，然后你就有了一个可用的Web API，和一个可用的在线文档，何乐而不为呢？</p><p>下面，是博主实现的一个动态路由，它主要涉及到ConfigureApiExplorer()、ConfigureSelector()和ConfigureParameters()这三个部分的实现，我们一起来看下面的代码，ASP.NET Core版本相比ASP.NET版本，少了像Castle DynamicProxy这样的黑科技，因此它的实现会更加纯粹一点。</p><h2 id="ConfigureApiExplorer"><a href="#ConfigureApiExplorer" class="headerlink" title="ConfigureApiExplorer()"></a>ConfigureApiExplorer()</h2><p>首先，是对ApiExplorer进行配置。通过ApiExplorer，我们可以控制Controller级别和Action级别的Web API的可见性。一般情况下的用法是在Controller或者Action上添加ApiExplorerSettings标记，而在这里，我们只需要给ControllerModel和ActionModel的ApiExplorer属性赋值即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureApiExplorer</span> (<span class="params">ControllerModel controller</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty (controller.ApiExplorer.GroupName))</span><br><span class="line">        controller.ApiExplorer.GroupName = controller.ControllerName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (controller.ApiExplorer.IsVisible == <span class="literal">null</span>)</span><br><span class="line">        controller.ApiExplorer.IsVisible = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">   controller.Actions.ToList ().ForEach (action =&gt; ConfigureApiExplorer (action));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureApiExplorer</span> (<span class="params">ActionModel action</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action.ApiExplorer.IsVisible == <span class="literal">null</span>)</span><br><span class="line">       action.ApiExplorer.IsVisible = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConfigureSelector"><a href="#ConfigureSelector" class="headerlink" title="ConfigureSelector()"></a>ConfigureSelector()</h2><p>接下来，是对路由进行配置。这部分的核心其实就是根据AreaName、ControllerName、ActionName来生成路由信息，我们会为没有配置过特性路由的Action生成默认的路由，这其实就是MVC里约定大于配置的一种体现啦。在这里会涉及到对ControllerName和ActionName的优化调整，主要体现在两个方面，其一是对类似XXXService、XXXController等这样的后缀进行去除，使其构造出的Api路由更加短小精简；其二是对ActionName里的Get/Save/Update等动词进行替换，使其构造出的Api路由更加符合RESTful风格。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureSelector</span> (<span class="params">ControllerModel controller, DynamicControllerAttribute controllerAttribute</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_dynamicControllerOptions.UseFriendlyControllerName) &#123;</span><br><span class="line">        <span class="keyword">var</span> suffixsToRemove = _dynamicControllerOptions.RemoveControllerSuffix;</span><br><span class="line">        <span class="keyword">if</span> (suffixsToRemove != <span class="literal">null</span> &amp;&amp; suffixsToRemove.Any ())</span><br><span class="line">            suffixsToRemove.ToList ().ForEach (suffix =&gt; controller.ControllerName = controller.ControllerName.Replace (suffix, <span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    controller.Selectors.ToList ().RemoveAll (selector =&gt;</span><br><span class="line">        selector.AttributeRouteModel == <span class="literal">null</span> &amp;&amp; (selector.ActionConstraints == <span class="literal">null</span> || !selector.ActionConstraints.Any ())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (controller.Selectors.Any (selector =&gt; selector.AttributeRouteModel != <span class="literal">null</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> areaName = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">if</span> (controllerAttribute != <span class="literal">null</span>)</span><br><span class="line">        areaName = controllerAttribute.AreaName;</span><br><span class="line"></span><br><span class="line">    controller.Actions.ToList ().ForEach (action =&gt; ConfigureSelector (areaName, controller.ControllerName, action));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureSelector</span> (<span class="params"><span class="keyword">string</span> areaName, <span class="keyword">string</span> controllerName, ActionModel action</span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    action.Selectors.ToList ().RemoveAll (selector =&gt;</span><br><span class="line">        selector.AttributeRouteModel == <span class="literal">null</span> &amp;&amp; (selector.ActionConstraints == <span class="literal">null</span> || !selector.ActionConstraints.Any ())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!action.Selectors.Any ()) &#123;</span><br><span class="line">        action.Selectors.Add (CreateActionSelector (areaName, controllerName, action));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        action.Selectors.ToList ().ForEach (selector =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> routePath = <span class="string">$"<span class="subst">&#123;_dynamicControllerOptions.DefaultApiRoutePrefix&#125;</span>/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>"</span>.Replace (<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line">            <span class="keyword">var</span> routeModel = <span class="keyword">new</span> AttributeRouteModel (<span class="keyword">new</span> RouteAttribute (routePath));</span><br><span class="line">            <span class="keyword">if</span> (selector.AttributeRouteModel == <span class="literal">null</span> || !_dynamicControllerOptions.UseCustomRouteFirst)</span><br><span class="line">                selector.AttributeRouteModel = routeModel;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，每个API接口都会有相对应的HTTP动词，譬如GET、POST、PUT等等，那么，我们在构造路由的时候，如何知道当前的Action应该使用什么HTTP动词呢？实际上，我们有两个来源来组织这些信息。第一个来源，是根据方法本身的名称，比如Get/Save/Update等等，我们通过对应关系将其转化为对应的HTTP动词。第二个来源是根据用户在接口中配置的路由信息，比如RouteAttribute、HttpMethod等等，将其转化为对应的HTTP动词。这个方法，其实我们在分享ASP.NET下的实现的时候，就已经用过一次啦，所谓“万变不离其宗”，大概就是如此：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SelectorModel <span class="title">CreateActionSelector</span>(<span class="params"><span class="keyword">string</span> areaName, <span class="keyword">string</span> controllerName, ActionModel action</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> selectorModel = <span class="keyword">new</span> SelectorModel();</span><br><span class="line">    <span class="keyword">var</span> actionName = action.ActionName;</span><br><span class="line">    <span class="keyword">var</span> routeAttributes = action.ActionMethod.GetCustomAttributes(<span class="keyword">typeof</span>(HttpMethodAttribute), <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (routeAttributes != <span class="literal">null</span> &amp;&amp; routeAttributes.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> httpVerbs = routeAttributes.SelectMany(s =&gt; (s <span class="keyword">as</span> HttpMethodAttribute).HttpMethods).ToList().Distinct();</span><br><span class="line">        <span class="keyword">var</span> routePath = <span class="string">$"<span class="subst">&#123;_dynamicControllerOptions.DefaultApiRoutePrefix&#125;</span>/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>"</span>.Replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line">        selectorModel.AttributeRouteModel = <span class="keyword">new</span> AttributeRouteModel(<span class="keyword">new</span> RouteAttribute(routePath));</span><br><span class="line">        selectorModel.ActionConstraints.Add(<span class="keyword">new</span> HttpMethodActionConstraint(httpVerbs));</span><br><span class="line">        <span class="keyword">return</span> selectorModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> httpVerb = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> methodName = action.ActionMethod.Name.ToUpper();</span><br><span class="line">        <span class="keyword">if</span> (methodName.StartsWith(<span class="string">"GET"</span>) || methodName.StartsWith(<span class="string">"QUERY"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">"GET"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">"SAVE"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">"POST"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">"UPDATE"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">"PUT"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">"DELETE"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">           httpVerb = <span class="string">"DELETE"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> routePath = <span class="string">$"api/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>"</span>.Replace(<span class="string">"//"</span>, <span class="string">"/"</span>);</span><br><span class="line">        selectorModel.AttributeRouteModel = <span class="keyword">new</span> AttributeRouteModel(<span class="keyword">new</span> RouteAttribute(routePath));</span><br><span class="line">        selectorModel.ActionConstraints.Add(<span class="keyword">new</span> HttpMethodActionConstraint(<span class="keyword">new</span>[] &#123; httpVerb &#125;));</span><br><span class="line">        <span class="keyword">return</span> selectorModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，无论多么令人惊诧的黑科技，当我们一层层地拨开它的迷雾时，常常有种豁然开朗的感觉。当然，和那些令人看起来神清气爽的代码相比，博主远远达不到返璞归真的境界，因为这段代码怎么看都觉得丑陋。古美门律师告诉我们，要爱上丑陋，或许每个程序员都是从写烂代码开始的吧！</p><h2 id="ConfigureParameters"><a href="#ConfigureParameters" class="headerlink" title="ConfigureParameters()"></a>ConfigureParameters()</h2><p>接下来参数绑定相对简单，因为简单类型MVC自己就能完成绑定，所以，我们只需要关注复杂类型的绑定即可，最常见的一种绑定方式是FromBody：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> ConfigureActionParameters(ActionModel action)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">parameter</span> in action<span class="variable">.Parameters</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">parameter</span><span class="variable">.BindingInfo</span> != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">type</span> = <span class="keyword">parameter</span><span class="variable">.ParameterInfo</span><span class="variable">.ParameterType</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">type</span><span class="variable">.IsPrimitive</span> || <span class="keyword">type</span><span class="variable">.IsEnum</span> ||</span><br><span class="line">            (<span class="keyword">type</span><span class="variable">.IsGenericType</span> &amp;&amp; <span class="keyword">type</span><span class="variable">.GetGenericTypeDefinition</span>() == typeof(Nullable&lt;&gt;)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsFromBodyEnable(action, <span class="keyword">parameter</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">parameter</span><span class="variable">.BindingInfo</span> = BindingInfo<span class="variable">.GetBindingInfo</span>(<span class="keyword">new</span>[] &#123; <span class="keyword">new</span> FromBodyAttribute() &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上三个关键步骤，我们就能实现本文一开始的效果，感觉无形中我们又复习了一篇MVC匹配路由的原理呢！</p><h1 id="集成Swagger和WebApiClient"><a href="#集成Swagger和WebApiClient" class="headerlink" title="集成Swagger和WebApiClient"></a>集成Swagger和WebApiClient</h1><p>今天这篇文章，本质上依然是ABP框架中Dynamic WebAPI这一特性的延伸，无非是因为.NET Core中提供了更为友好的机制，可以让这一切实现起来更简单而已。还记得博主研究这个特性的“初心”是什么吗？因为我们在升级.NET Core的过程中打算抛弃WCF，我们需要一种方法，可以让现有的一个普通的Service变成一个Controller。固然，我们可以一个一个的去重新封装，可这真的是比较好的实践方式吗？从内部RPC逐渐转变为Web API调用，这种转变就像从Dubbo换成了Spring Cloud，可是Spring Cloud有注册中心啊，现在我们什么都没有，从RPC转变为Web API，会面临诸如接口授权、地址配置、不同上下文等等的问题。你经常需要告诉别人某个接口的地址是什么，不出意外地话，你至少会有三套环境的地址，别人还会问你各个参数的含义，甚至更懒的会要求你提供示例报文。所以，我觉得做微服务，尤其是全部采用Web API进行通信的微服务，提供实时更新、在线查看的文档真的非常重要，每次看到同事在Git里提交Word或者Excel，我就感到非常纠结，一来这种东西没法正常Merge(压缩包合并个鬼啊)，二来我必须下载下来看(君不见我下载目录里一堆重复文件)，所以，我更推荐努力维护好一家公司的API资产，在我们用JWT保护这些资产以前，至少要先了解它们吧！</p><p>对于API文档，我个人推荐专门用一个站点来承载所有的Web API，比如我们最常用的Swagger，它在融合OAuth2以后可以更完美地去调试接口，了解每个接口的参数和返回值。尤其是在这篇博客的背景下，因为我们只需要把这些POCOController对应的注释文件(.XML)和程序集(.DLL)放到一起，同时把这些注释文件全部Include进来，Swagger就可以把它们展示出来。这里用到一个非常重要的特性就是IApiExploer接口，你可以把它理解为，它是一切文档展示的核心，每个接口及其参数、返回值的描述信息都是由它提供的。在没有Swagger之前，微软提供了一个叫做Web API HelpPage的组件，它和Swagger的原理无出其右。这里剧透下，稍后我会专门写一篇博客来扩展Swagger，目的是确保它可以为ASP.NET MVC提供文档支持。这里，我们使用Swagger来生成在线API文档，其核心配置如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvcCore ().AddApiExplorer ();</span><br><span class="line">services.AddSwaggerGen (swagger =&gt; &#123;</span><br><span class="line">    swagger.SwaggerDoc (<span class="string">"v1"</span>, <span class="keyword">new</span> Swashbuckle.AspNetCore.Swagger.Info () &#123;</span><br><span class="line">        Title = <span class="string">"DynamicController"</span>,</span><br><span class="line">        Version = <span class="string">"1.0"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    swagger.DocInclusionPredicate ((docName, description) =&gt; <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> xmlFile = <span class="string">$"<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml"</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlPath = Path.Combine (AppContext.BaseDirectory, xmlFile);</span><br><span class="line">    swagger.IncludeXmlComments (xmlPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以注意到，这篇文章里实现的动态Controller和默认的ValuesController都被展示了出来，两个字，完美，我们想要的就是这个效果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g5k84kvuzqj21hc0s03zo.jpg" alt="通过Swagger生成的在线Api文档" title="">                </div>                <div class="image-caption">通过Swagger生成的在线Api文档</div>            </figure><p>说完了API文档的事情，我们再来说说调用Web API的问题。按理说，这应该没啥大问题，因为虽然我们会为HttpWebRequest、WebClient、HttpClient和RestSharp等等不同的API而感到纠结，可这丝毫不会影响我们调用Web API。那么，问题来了，当你面对数不胜数的API接口的时候，你打算如何考虑这些问题？我的API地址应该配置在哪里？是存到Web.Config里还是存到数据库里？我调用API的时候，Token应该从哪里获取？是每次都获取还是获取了缓存起来？如果Token过期了我又该怎么办？这几乎是所有全部采用Web API进行微服务设计时都会遇到的问题。</p><p>此时，我们需要一种更优雅的方式，即Retrofit，它能让我们像调用一个普通方法一样调用一个Web API，这样，我们在调用方式上其实不会有太大的改变，因为Web API本质上是一种特殊的RPC。在.NET的世界里，我们有WebApiClient和Refit这样的轮子，我之前还专门为大家介绍过WebApiClient。这里就不再展示它的具体细节了，所谓点到为止，希望大家可以自己去发现这种美，对博主而言，如果在定义Service的时候，就考虑到这一点，或许我们可以实现更理想的效果，即，服务端和客户端是一套代码，我们写完一个接口以后，它就是Web API，而通过动态代理，它本身又会是客户端，此中乐趣，则不足为外人道也！</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>又是漫长的一个夏天，下雨并不能让这座城市温柔起来。这篇博客延续了上一篇博客中关于动态Controller的设想，而借助于.NET Core框架提供的良好特性，它以一种更为简洁的方式被实现了，核心的内容有两个点，其一是ControllerFeatureProvider，它能决定MVC会不会把一个普通的类当做控制器。其二是IApplicationModelConvention接口，它能对全局的路由规则进行修改，以满足我们特殊的定制化需要。再此基础上，继续引入Swagger和WebApiClient两个轮子，来解决微服务构建中的API文档和API调用问题。写博客真的是一件辛苦的事情诶，好啦，今天这篇博客就先写到这里，我们下一篇博客再见，晚安！本文中涉及到的代码可以通过：<a href="https://github.com/qinyuanpei/DynamicWCFProxy/tree/master/DynamicWebApi.Core" target="_blank" rel="noopener">https://github.com/qinyuanpei/DynamicWCFProxy/tree/master/DynamicWebApi.Core</a>来做进一步的了解，以上！</p>]]></content>
    
    <summary type="html">
    
      POCOController是ASP.NET Core中提供的一个新特性，按照约定大于配置的原则，在ASP.NET Core项目中，所有带有Controller后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承Controller类，ASP.NET Core依然会将其识别为Controller，并拥有和普通Controller一样的功能，说到这里，你是不是有点兴奋了呢，因为我们在ASP.NET里花了大力气去做类似的事情，因为ASP.NET里一个普通的类是没有办法成为Controller的，即使通过Castle的Dynamic Proxy黑科技，我们依然需要去Hack整个MVC框架创建、筛选Controller和Action的过程
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="Dynamic WebApi" scheme="https://qinyuanpei.github.io/tags/Dynamic-WebApi/"/>
    
      <category term="POCOController" scheme="https://qinyuanpei.github.io/tags/POCOController/"/>
    
  </entry>
  
  <entry>
    <title>长安十二时辰随想</title>
    <link href="https://qinyuanpei.github.io/posts/1540537013/"/>
    <id>https://qinyuanpei.github.io/posts/1540537013/</id>
    <published>2019-07-22T11:17:23.000Z</published>
    <updated>2020-02-04T10:39:03.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>年少时未见长安，难以想象万国来朝的盛唐气象，心中最为仰慕的人物，是那个“好剑术、喜任侠“、二十五岁“仗剑去国、辞亲远游”的李白。人在年少轻狂的时候，容易因为一个人的豪迈不羁，而选择性地模糊一个时代的印象。于是，长安就蓦地变成了李太白大放异彩的舞台。印象里的长安，是一个可以让人吟咏“安能摧眉折腰事权贵，使我不得开心颜”的地方，是一个可以让“贵妃捧墨、力士脱靴”的地方，是一个“绣口一吐，就是半个盛唐”的地方。自此，喜欢上“大道如青天，我独不得出”，喜欢上“古来圣贤皆寂寞，唯有饮者留其名”，喜欢上“天生我才必有用，千金散尽还复来”，仿佛李白就是盛唐，而盛唐就是长安，若非如此，杨玉环便不会在极乐之宴上称赞李白的才华。</p><p>可当历史脉络逐渐清晰起来的时候，我们突然发现，原本我们以为最为意气风发的李白，那一年(开元18年，即公元730年)李白已经30岁了，就在那一年李白谒见宰相张说及一干长安名流，均无结果，直到他结识贺知章并被对方称之为“谪仙”， 引出一段“金龟换酒”的传奇佳话。这位谪仙人曾两度离开长安，第一次是感慨“行路难，归去来”，那一年李白38岁；第二次是供奉翰林期间遭玄宗“贬谪”，那一年李白43岁。所以，年少时以为的李白，是否是真实的李白？年少时以为的长安，是否是真实的长安？李白生平豪放，有诗的地方必有酒、有剑，一首《侠客行》更是金庸武侠小说中接近玄学的存在，可李白生平最快乐的时候，或许只有白帝城两岸猿啼知道了。</p><p>人们喜欢选择性地美化回忆，就像迪士尼重制的《狮子王》，我们曾以为木法沙和辛巴是正义的化身，而弑兄上位的刀疤则是邪恶的代表，其实用成人的眼光来看待这部电影，我们还真的找不出木法沙和辛巴的统治会比刀疤的统治好到哪里去的证据，这大概就是记忆本身的滤镜作用，长大了发现小时候常吃的熊毅武方便面，居然是陕西省出产的，而中萃方便面，则是江苏省出产的。当你未来的时光，有一小部分是和这两个地方有关，你不能不说，记忆真的是个奇妙的东西。《妖猫传》里绮丽璀璨的幻术表演，极力展现长安奢华的一面，虽然这一切都是活在两位主角的想象中，因为它想表达的是一种美的消逝和幻灭，此时的长安，其伟大和无与伦比体现在这三个符号上——空海代表的真理密法、李白代表的艺术创作、杨贵妃代表的绝对的美。</p><p>正如我们已无从想象，当年矗立在兴庆宫的花萼相辉楼到底是什么样子，于是导演将其安排在一个看起来像是个洞穴的地方。我们更无从得知，那一年的白居易到底怀着什么样的抱负来到长安，当他从已为陈迹的花萼相辉楼里捡起李白用过的笔的时候，是否真的如他想说想要开创一个新的时代，谱写一曲荡气回肠的长恨歌。有人说，玄宗兴建花萼相辉楼的时候，在周遭兴建了五座宅邸供诸王居住，逢宴请娱游更是宴请诸位兄弟一同前去，一改盛唐自玄武门之变以来手足相残的情形。可正如《长安十二时辰》里战战兢兢的太子李亨一般，一个对兄弟手足颇具温情的帝王，为何又能冤杀三个皇子在前？我们不得不说，历史极具迷惑性。</p><p>《妖猫传》开篇由玄宗驾崩引出，在经历了安史之乱以后，通过一只猫的视角，我们看到了在极尽繁华后满目苍凉。有人问，李白为何在吟咏《清平调》的时候泪流满面？也许以李白经天纬地的才华，他早就洞悉了帝王之爱的虚伪，早就看出了盛世之下的危机重重，早就明白了身为御用文人的悲哀，所谓盛世，或许仅仅是帝王权术操纵下的一场表演。可即使如此，李白依然愿意在洞悉这一切后去讴歌这种美，不论美本身多么的脆弱，至少这一刻它是真实存在的，就像罗曼罗兰说的那样：“这世界上只有一种真正的英雄主义，就是在看清生活之后，依然热爱生活”。</p><p>今天在路上遇到一位外地来的游客，询问我关于陕博、大雁塔和兵马俑的种种，可其实我和他一样，都不过是这座城市的过客。我有时候会不由地起，一千多年前的长安，是否和今天一样向世界敞开大门？《妖猫传》里遣唐的日本僧人空海，今天依然可以在青龙寺的简介中找到姓名，而透过张天爱的胡旋舞，或许可以看到那个胡汉相融、开放包容的长安。《长安十二时辰》里，有突厥狼卫，有胡椒胡饼，有波斯王子，有圣拜火教，有粟特大秦，有拢右拨换……几乎可以媲美世界中心。而一千多年后的今天，各种商业中心不再局限于东西两市，而兴庆宫、曲江池不再是皇家宫殿园林，长安一百零八坊的格局依稀可见，皇城北侧空荡荡的大明宫遗址，是否会听到来自玄武门的阵阵杀伐之声？</p><p>《长安十二时辰》里的主角张小敬，曾经是万年县不良帅，长安以朱雀大街为界，朱雀大街以西为长安县，朱雀大街以东为万年县，实则取“长安万年”之意。剧中靖安吏们聚集在一起八卦朝廷，有一个人说自古以来哪里有万年的江山。不管历史上的李亨是否提出过对赋税和藩镇进行改革的提议，我们都知道安史之乱是唐朝由盛转衰的开始。据说马亲王这本书的灵感来自“刺客信条”，我本人同样是这部游戏的忠实粉丝，可当你真正想在长安寻找鸟瞰点并进行同步的时候，你会发现小雁塔顶端早已残损，攀爬这样的建筑物简直就是在碰瓷儿，而大雁塔的高度早已被周遭的大悦城超越，按照书中的设定，只要在大悦城的天台上增设武侯，不要说同步鸟瞰点，分分钟就会被弓弩手射中失去同步，因为据说大雁塔下面只有音乐喷泉，并没有安置干草堆……</p><p>对于《长安十二时辰》这部网剧而言，剧中的崔器或许是无数想留在长安的人的一个缩影，没有过人的背景，智力和胆识有限，因为担负着兄长的希望和光耀门楣的使命，渴望建功立业、想抓住一切能抓住的机会努力向上爬，在长安这座城市获得一种归属感。崔器的人设并不讨喜，甚至从一出场就在扮演猪队友的角色，属于那种有点蠢但本质不坏的人，靖安司一役被编剧写死完全是剧情需要，总体来说，这种小人物的设定，只要不是又蠢又坏，总能因为贴近底层而引起更多人的共鸣。《妖猫传》里的主角白乐天初到长安时，诗人顾况开他玩笑说：“居大不易”。同样地，在《长安十二时辰》里，有到长安来干谒的岑参，有出身贫寒的元载，各自的选择不同，最终的结果不同。虽然选择比努力更重要，可你的能力总要能配得上你的野心。每个时代都有每个时代的困境，今天在西安讨生活的你我，和一千多年前的这些前辈们有什么不同呢？你的选择又是什么呢？</p><p>在浩如烟海的茫茫历史中，太多的人和事，最终都会变得像雪泥鸿爪一般无迹可寻。对史学家而言，那是震惊寰宇的历史发现，可对更多像你和我一样的普通人而言，那不过偶然想起的经年旧事。我们回头看这些历史的时候，一如空海和白居易回头瞥见八重樱下的杨玉环，所谓“一切有为法，皆化作泡影”。《长安十二时辰》中塑造了张小敬这样一个“刺客”形象，可历史不过是姚汝能笔下轻描淡写的一句话。安国柱，一个身在长安的粟特人，即使娶了美艳的长安女子做妻子，依然想着努力工作好配得上她；徐宾，一个身在长安的靖安司主事，为了让大家更好得整理案牍，积极改良造纸技术，甚至到生命的最后一刻还在保护案牍；焦遂，一个身在长安的布衣，悬挂金鱼袋只为进宫喝酒，一句“长安，焦遂”豪气干云……有这些可爱可敬的人，我愿意相信，这一切都曾在这个城市发生过，而一千多年后的今天，我在长安，可我见了长安，便懂了长安么？是少年豪气作祟的“赵客缦胡缨，吴钩霜雪明”，还是一个快三十岁的中年大叔“为赋新词强说愁”呢……</p>]]></content>
    
    <summary type="html">
    
      我们更无从得知，那一年的白居易到底怀着什么样的抱负来到长安，当他从已为陈迹的花萼相辉楼里捡起李白用过的笔的时候，是否真的如他想说想要开创一个新的时代，谱写一曲荡气回肠的长恨歌
    
    </summary>
    
      <category term="生活感悟" scheme="https://qinyuanpei.github.io/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="长安" scheme="https://qinyuanpei.github.io/tags/%E9%95%BF%E5%AE%89/"/>
    
      <category term="随笔" scheme="https://qinyuanpei.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="长安十二时辰" scheme="https://qinyuanpei.github.io/tags/%E9%95%BF%E5%AE%89%E5%8D%81%E4%BA%8C%E6%97%B6%E8%BE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用ASP.NET Core和Hangfire实现HTTP异步化方案</title>
    <link href="https://qinyuanpei.github.io/posts/1071063696/"/>
    <id>https://qinyuanpei.github.io/posts/1071063696/</id>
    <published>2019-07-04T08:56:28.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>Hi，大家好，我是Payne，欢迎大家一如既往地关注我的博客。今天这篇博客里的故事背景，来自我工作中的一次业务对接，因为客户方提供的是长达上百行的XML，所以一度让更喜欢使用JSON的博主感到沮丧，我这里不是想讨论XML和JSON彼此的优缺点，而是我不明白AJAX里的X现在基本都被JSON替代了，为什么还有这么多的人坚持使用并友好的XML作为数据的交换协议呢？也许你会说，因为有这样或者那样等等的理由，就像SOA、ESB、SAP等等类似的技术在企业级用户依然大量流行一样，而这些正是“消费”XML的主力军。我真正想说的是，在对接这类接口时，我们会遇到一个异步化的HTTP协议场景，这里的异步和多线程、async/await没有直接关系，因为它描述的实际上是业务流程上的一种“异步”。</p><h1 id="引子-想对XML说不"><a href="#引子-想对XML说不" class="headerlink" title="引子-想对XML说不"></a>引子-想对XML说不</h1><p>我们知道，HTTP协议是一个典型的请求-响应模型，由调用方(Client)调用服务提供者(Server)提供的接口，在理想状态下，后者在处理完请求后会直接返回结果。可是当后者面对的是一个“耗时”任务时，这种方式的问题就立马凸显出来，此时调用者有两个选择：一直等对方返回直至超时(同步)、隔一会儿就看看对方是否处理完了(轮询)。这两种方式，相信大家都非常熟悉了，如果继续延伸下去，我们会联想到长/短轮询、SignalR、WebSocket。其实，更好的方式是，我们接收到一个“耗时”任务时，立即返回表明我们接收了任务，等任务执行完以后再通知调用者，这就是我们今天要说的HTTP异步化方案。因为对接过程中，客户采用的就是这种方案，ESB这类消息总线本身就提供了这种功能，可作为调用方的博主就非常难受啦，因为明明能“同步”地处理完的事情，现在全部要变成“异步”处理，就像一个习惯了async/await语法糖的人，突然间就要重新开始写APM风格的代码，宝宝心里苦啊，“异步”处理就异步处理嘛，可要按人家要求去返回上百行的XML，博主表示想死的心都有了好嘛……</p><p>好了，吐槽归吐槽，吐槽完我们继续梳理下HTTP异步化的方案，这种方式在现实生活中还是相当普遍的，毕竟人类都是“异步”做事，譬如“等你哪天有空一起吃个饭”，测试同事对我说得最多的话就是，“等你这个Bug改完了同我说一声”，更不用说，JavaScript里典型的异步单线程的应用等等……实现“异步”的思路其实是非常多的，比如同样在JavaScript里流行的回调函数，比如通过一张中间表存起来，比如推送消息到消息队列里。在面向数据库编程的时候，我听到最多的话就是，没有什么问题是不能用一张中间表来解决的，如果一张不行那就用两张。项目上我是用Quartz+中间表的方式实现的，因为这是最为普通的方式。这里，我想和大家分享下，关于使用Hangfire来实现类似Quartz定时任务的相关内容，果然，我这次又做了一次标题党呢，希望大家会对今天的内容感兴趣。简单来说，我们会提供一个接口，调用方提供参数和回调地址，调用后通过Hangfire创建后台任务，等任务处理结束后，再通过回调地址返回结果给调用方，这就是所谓的HTTP异步化。</p><h1 id="开箱即用的Hangfire"><a href="#开箱即用的Hangfire" class="headerlink" title="开箱即用的Hangfire"></a>开箱即用的Hangfire</h1><p>我们项目上是使用Quartz来实现后台任务的，因为它采用了反射的方式来调用具体的Job，因此，它的任务调度和任务实现是耦合在同一个项目里的，常常出现单个Job引发整个系统卡顿的情况，尤其是是它的触发器，常常导致一个Job停都停不下来，直到后来才渐渐开始通过Web API来分离这两个部分。Quartz几乎没有一个自己的可视化界面，我们为此专门为它开发了一套UI。我这里要介绍的Hangfire，可以说它刚好可以作为Quartz的替代品，它是一个开箱即用的、轻量级的、开源后台任务系统，想想以前为Windows开发定时任务，只能通过定时器(Timer)来实现，尚不知道CRON为何物，而且只能用命令行那种拙劣的方式来安装/卸载，我至今都记得，测试同事问我，能不能不要每次都弹个黑窗口出来，这一起想起来还真是让人感慨啊。好了，下面我们开始今天的实践吧！首先，第一步自然是安装Hangfire啦，这里我们新建一个ASP.NET Core的Web API项目就好，然后通过NuGet依次安装以下库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Package HangFire</span><br><span class="line">Install-Package Hangfire.MySql.Core</span><br></pre></td></tr></table></figure><p>这里我们选择了MySQL来实现任务的持久化，从官方的流程图中可以了解到，Hangfire有服务端、持久化存储和客户端三大核心部件组成，而持久化存储这块儿，除了官方默认的SQLServer(可以集成MSMQ)以外，还支持Redis、MongoDB等，Hangfire使用起来是非常简单哒，首先在Startup类的ConfigureServices()方法中注入Hangfire相关的服务，然后在Configure()方法中使用HangfireServer和UseHangfireDashboard即可：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span> (<span class="params">IServiceCollection services</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//为了简化说明，已忽略该方法中无关的代码</span></span><br><span class="line">    services.AddHangfire (x =&gt;</span><br><span class="line">        x.UseStorage (<span class="keyword">new</span> MySqlStorage (Configuration.GetConnectionString (<span class="string">"Hangfire"</span>)))</span><br><span class="line">        .UseFilter (<span class="keyword">new</span> HttpJobFilter ())</span><br><span class="line">        .UseSerilogLogProvider ()</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span> (<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//为了简化说明，已忽略该方法中无关的代码</span></span><br><span class="line">    app.UseHangfireServer (<span class="keyword">new</span> BackgroundJobServerOptions () &#123;</span><br><span class="line">        Queues = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"default"</span> &#125;,</span><br><span class="line">        WorkerCount = <span class="number">5</span>,</span><br><span class="line">        ServerName = <span class="string">"default"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    app.UseHangfireDashboard ();</span><br><span class="line">    app.ApplicationServices.GetService&lt;ILoggerFactory&gt; ().AddSerilog ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到在配置持久化的部分，我们使用了一个数据库连接字符串Hangfire，它需要我们在appsettings.json中配置ConnectionStrings部分。这里我们为Hangfire设置了默认队列default、默认服务器default、并发数目为5。与此同时，我们开启了Hangfire中自带的Dashboard，可以通过这个界面来监控后台任务的执行情况。此时运行项目，输入以下地址：<a href="http://locahost" target="_blank" rel="noopener">http://locahost</a>:<port>/hangfire，就会看到下面的画面，这说明Hangfire配置成功：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g4vsktdif4j21hb0rz406.jpg" alt="Hangfire Dashboard" title="">                </div>                <div class="image-caption">Hangfire Dashboard</div>            </figure><p>Hangfire中默认支持四种类型的后台任务，他们分别是<strong>Fire-and-forget jobs</strong>、<strong>Delayed jobs</strong>、<strong>Recurring jobs</strong>和<strong>Continuations</strong>。严格来说，<strong>Fire-and-forget jobs</strong>和<strong>Delayed jobs</strong>并不能算后台任务，因为它们在执行一次后就会从队列中移除，属于一次性“消费”的任务，这两者的不同在于<strong>Delayed jobs</strong>可以在设定的时间上延迟执行。而<strong>Recurring jobs</strong>和<strong>Continuations</strong>则是周期性任务，任务在入队后可以按照固定的时间间隔去执行，周期性任务都是支持CRON表达式的，<strong>Continuations</strong>类似于Task中的ContinueWith()方法，可以对多个任务进行组合，我们现在的项目中开发了大量基于Quartz的Job，可当你试图把这些Job相互组合起来的时候，你就会觉得相当尴尬，因为后台任务做所的事情往往都是大同小异的。从官方文档中 ，我们会发现Hangfire的关键代码只有下面这四行代码，可以说是相当简洁啦！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fire-and-forget jobs</span></span><br><span class="line"><span class="keyword">var</span> jobId = BackgroundJob.Enqueue(</span><br><span class="line">    () =&gt; Console.WriteLine(<span class="string">"Fire-and-forget!"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Delayed jobs</span></span><br><span class="line"><span class="keyword">var</span> jobId = BackgroundJob.Schedule(</span><br><span class="line">    () =&gt; Console.WriteLine(<span class="string">"Delayed!"</span>),</span><br><span class="line">    TimeSpan.FromDays(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Recurring jobs</span></span><br><span class="line">RecurringJob.AddOrUpdate(</span><br><span class="line">    () =&gt; Console.WriteLine(<span class="string">"Recurring!"</span>),</span><br><span class="line">    Cron.Daily);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Continuations</span></span><br><span class="line">BackgroundJob.ContinueWith(</span><br><span class="line">    jobId,</span><br><span class="line">    () =&gt; Console.WriteLine(<span class="string">"Continuation!"</span>));</span><br></pre></td></tr></table></figure><p>Hangfire除了这种偏函数式风格的用法以外，同样提供了泛型版本的用法，简而言之，泛型版本是自带依赖注入的版本。众所周知，稍微复杂点的功能，常常会依赖多个服务，比如后台任务常常需要给相关人员发邮件或者是消息，此时，Job的实现就会依赖MailService和MessageService。Hangfire内置了基于Autofac的IoC容器，因此，当我们使用泛型版本时，它可以自动地从容器中Resolve相应的类型出来。事实上，我们可以通过重写JobActivator来实现自己的依赖注入，譬如博主就喜欢Castle。下面是一个简单的例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Define a class depends on IDbContext &amp; IEmailService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailSender</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IDbContext _dbContext;</span><br><span class="line">    <span class="keyword">private</span> IEmailService _emailService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailSender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _dbContext = <span class="keyword">new</span> DbContext();</span><br><span class="line">        _emailService = <span class="keyword">new</span> EmailService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//When it is registered in Ioc Container</span></span><br><span class="line">BackgroundJob.Enqueue&lt;EmailSender&gt;(x =&gt; x.Send(<span class="string">"Joe"</span>, <span class="string">"Hello!"</span>));</span><br></pre></td></tr></table></figure><h1 id="可扩展的Hangfire"><a href="#可扩展的Hangfire" class="headerlink" title="可扩展的Hangfire"></a>可扩展的Hangfire</h1><p>OK，在对Hangfire有了一个初步的了解以后，我们再回到本文的题目，我们希望实现一个基于HTTP方式调用的HttpJob。因为我们不希望任务调度和具体任务放在一起，我们项目上采用Quartz来开发后台任务，它要求我们实现一个特定接口IbaseJob，最终任务调度时会通过反射来创建Job，就在刚刚过去的这周里，测试同事向我反馈了一个Bug，而罪魁祸首居然是因为某个DLL没有分发，所以，我希望实现一个基于HTTP方式调用的HttpJob，这既是为了将任务调度和具体任务分离，同时为了满足这篇文章开头描述的场景，得益于Hnagfire良好的扩展性，我们提供了一组Web API，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加一个任务到队列并立即执行</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jobDescriptor"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost (<span class="meta-string">"AddEnqueue"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">Enqueue</span> (<span class="params">HttpJobDescriptor jobDescriptor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> jobId = <span class="keyword">string</span>.Empty;</span><br><span class="line">        jobId = BackgroundJob.Enqueue (() =&gt; HttpJobExecutor.DoRequest (jobDescriptor));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">$"Job:#<span class="subst">&#123;jobId&#125;</span>-<span class="subst">&#123;jobDescriptor.JobName&#125;</span>已加入队列"</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">false</span>, Message = ex.Message &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加一个延迟任务到队列</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jobDescriptor"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost (<span class="meta-string">"AddSchedule"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">Schedule</span> (<span class="params">[FromBody] HttpJobDescriptor jobDescriptor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> jobId = <span class="keyword">string</span>.Empty;</span><br><span class="line">        jobId = BackgroundJob.Schedule (() =&gt; HttpJobExecutor.DoRequest (jobDescriptor), TimeSpan.FromMinutes ((<span class="keyword">double</span>) jobDescriptor.DelayInMinute));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">$"Job:#<span class="subst">&#123;jobId&#125;</span>-<span class="subst">&#123;jobDescriptor.JobName&#125;</span>已加入队列"</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">false</span>, Message = ex.Message &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加一个定时任务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jobDestriptor"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost (<span class="meta-string">"AddRecurring"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">Recurring</span> (<span class="params">[FromBody] HttpJobDescriptor jobDescriptor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> jobId = <span class="keyword">string</span>.Empty;</span><br><span class="line">        RecurringJob.AddOrUpdate (jobDescriptor.JobName, () =&gt; HttpJobExecutor.DoRequest (jobDescriptor), jobDescriptor.Corn, TimeZoneInfo.Local);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">$"Job:<span class="subst">&#123;jobDescriptor.JobName&#125;</span>已加入队列"</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">false</span>, Message = ex.Message &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除一个定时任务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jobName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpDelete (<span class="meta-string">"DeleteRecurring"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">Delete</span> (<span class="params"><span class="keyword">string</span> jobName</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RecurringJob.RemoveIfExists (jobName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">$"Job:<span class="subst">&#123;jobName&#125;</span>已删除"</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">false</span>, Message = ex.Message &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 触发一个定时任务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jobName"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet (<span class="meta-string">"TriggerRecurring"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">Trigger</span> (<span class="params"><span class="keyword">string</span> jobName</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RecurringJob.Trigger (jobName);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">$"Job:<span class="subst">&#123;jobName&#125;</span>已触发执行"</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">false</span>, Message = ex.Message &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 健康检查</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet (<span class="meta-string">"HealthCheck"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">HealthCheck</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> serviceUrl = Request.Host;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonResult (<span class="keyword">new</span> &#123; Flag = <span class="literal">true</span>, Message = <span class="string">"All is Well!"</span>, ServiceUrl = serviceUrl, CurrentTime = DateTime.Now &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以注意到，这里用到其实还是四种后台任务，在此基础上增加了删除Job和触发Job的接口，尤其是触发Job执行的接口，可以弥补Quartz的不足，很多时候，我们希望别人调了接口后触发后台任务，甚至希望在编写Job的过程中使用依赖注入，因为种种原因，实施起来总感觉有点碍手碍脚。这里我们定义了一个HttpJobExecutor的类，顾名思义，它是执行Http请求的一个类，说来惭愧，我写作这篇博客时，是一边看文档一边写代码的，所以，等我实现了这里的HttpJobExecutor的时候，我忽然发现文档中关于依赖注入的内容，简直相见恨晚啊。这里直接给出它的实现，我要再一次安利RestSharp这个库，比HttpWebRequest、HttpClient这两套官方的API要好用许多，可还是有人喜欢一遍又一遍地封装啊，话说自从我们把WCF换成Web API后，看着相关同事在Git上的折腾历史，果然还是回到了写Http Client的老路上来，话说在纠结是手写代理还是动态代理的时候，Retrofit了解下啊！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpJobFilter</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoRequest</span> (<span class="params">HttpJobDescriptor jobDestriptor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient (jobDestriptor.HttpUrl);</span><br><span class="line">    <span class="keyword">var</span> httpMethod = (<span class="keyword">object</span>) Method.POST;</span><br><span class="line">    <span class="keyword">if</span> (!Enum.TryParse (<span class="keyword">typeof</span> (Method), jobDestriptor.HttpMethod.ToUpper (), <span class="keyword">out</span> httpMethod))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception (<span class="string">$"不支持的HTTP动词：<span class="subst">&#123;jobDestriptor.HttpMethod&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest ((Method) httpMethod);</span><br><span class="line">    <span class="keyword">if</span> (jobDestriptor.JobParameter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> json = JsonConvert.SerializeObject (jobDestriptor.JobParameter);</span><br><span class="line">        request.AddParameter (<span class="string">"application/json"</span>, json, ParameterType.RequestBody);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> response = client.Execute (request);</span><br><span class="line">    <span class="keyword">if</span> (response.StatusCode != HttpStatusCode.OK)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception (<span class="string">$"调用接口<span class="subst">&#123;jobDestriptor.HttpUrl&#125;</span>失败，接口返回：<span class="subst">&#123;response.Content&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们以HealthCheck这个接口为例，来展示HttpJob是如何工作的。顾名思义，这是一个负责健康检查的接口。我们现在通过Postman来触发健康检查这个后台任务。在这里，该接口是一个GET请求：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g4v4si2z4tj20t10cvaam.jpg" alt="通过Postman创建后台任务" title="">                </div>                <div class="image-caption">通过Postman创建后台任务</div>            </figure><p>接下来，我们我们就会在Hangfire的Dashborad中找到对应的记录，因为这是一个<strong>Fire &amp; Forget</strong>类型的任务，因此我们几乎看不到中间的过程，它就已经执行结束啦。我们可以在Dashboard中找到对应的任务，然后了解它的具体执行情况。值得一提的是，Hangfire自带了重试机制，对于执行失败的任务，我们可以重试栏目下看到，这里是其中一条任务的执行记录。可以注意到，Hangfire会把每个Job的参数序列化为JSON并持久化起来，仔细对照的话，你会发现，它和我们在Postman中传入的参数是完全一样的！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g4v55j6cgfj21160j8wfq.jpg" alt="Hangfire中Job执行详情查看" title="">                </div>                <div class="image-caption">Hangfire中Job执行详情查看</div>            </figure><p>在执行Job的过程中，我们可能会希望记录Job执行过程中的日志。这个时候，Hangfire强大的扩展性再次我们提供了这种可能性。注意到在HttpJobExecutor类上有一个 [HttpJobFilter]的标记，显然这是由Hangfire提供的一个过滤器，博主在这个过滤器中对Job的ID、状态等做了记录，因为在整个项目中博主已经配置了Serilog作为Hangfire的LogProvider，所以，我们可以在过滤器中使用Serilog来记录日志，不过博主个人感觉这个Filtre稍显鸡肋，这里还是给出代码片段吧！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpJobFilter</span> : <span class="title">JobFilterAttribute</span>, <span class="title">IApplyStateFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILog Logger = LogProvider.GetCurrentClassLogger ();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnStateApplied</span> (<span class="params">ApplyStateContext context, IWriteOnlyTransaction transaction</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.NewState <span class="keyword">is</span> FailedState) &#123;</span><br><span class="line">            <span class="keyword">var</span> failedState = context.NewState <span class="keyword">as</span> FailedState;</span><br><span class="line">            <span class="keyword">if</span> (failedState != <span class="literal">null</span>) &#123;</span><br><span class="line">                Logger.ErrorException (</span><br><span class="line">                    String.Format (<span class="string">"Background Job #&#123;0&#125; 执行失败。"</span>, context.BackgroundJob.Id),</span><br><span class="line">                    failedState.Exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.InfoFormat (</span><br><span class="line">                <span class="string">"当前执行的Job为：#&#123;0&#125;, 状态为：&#123;1&#125;。"</span>,</span><br><span class="line">                context.BackgroundJob.Id,</span><br><span class="line">                context.NewState.Name</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnStateUnapplied</span> (<span class="params">ApplyStateContext context, IWriteOnlyTransaction transaction</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么我说这个Filter有点鸡肋呢？因为你看下面的图就会明白了啊！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g4vs8s6f2zj21f2074mxq.jpg" alt="使用Serilog记录日志" title="">                </div>                <div class="image-caption">使用Serilog记录日志</div>            </figure><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>果然，我还是不得不承认，这又是一篇彻彻底底的”水文”啊,因为写着写着就发现自己变成了标题党。这篇文章总结下来其实只有两句话，一个不喜欢写XML报文的博主，如何与ERP、SAP、ESB里的XML报文斗智斗勇的故事，在这样一个背景下，为了满足对方的”异步”场景, 不得不引入一个后台任务系统来处理这些事情，其实，这个事情用消息队列、用Redis、甚至普通的中间表都能解决，可惜我写这篇文章的时候，是有一点个人化的情绪在里面的，这种情绪化导致的后果就是，可能我越来越难以控制一篇文章的写作走向啦，大概是写东西越来越困难，而又没有时间取吸收新的知识进来，这让我觉得自己的进步越来越少，Hangfire的有点说起来就是挺好用的，以上！</p>]]></content>
    
    <summary type="html">
    
      而**Recurring jobs**和**Continuations**则是周期性任务，任务在入队后可以按照固定的时间间隔去执行，周期性任务都是支持CRON表达式的，**Continuations**类似于Task中的ContinueWith()方法，可以对多个任务进行组合，我们现在的项目中开发了大量基于Quartz的Job，可当你试图把这些Job相互组合起来的时候，你就会觉得相当尴尬，因为后台任务做所的事情往往都是大同小异的
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="HTTP" scheme="https://qinyuanpei.github.io/tags/HTTP/"/>
    
      <category term="Hangfire" scheme="https://qinyuanpei.github.io/tags/Hangfire/"/>
    
  </entry>
  
  <entry>
    <title>通过动态Controller实现从WCF到Web API的迁移.</title>
    <link href="https://qinyuanpei.github.io/posts/4236649/"/>
    <id>https://qinyuanpei.github.io/posts/4236649/</id>
    <published>2019-06-08T13:48:41.000Z</published>
    <updated>2020-02-04T10:39:03.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在《<strong>又见AOP之基于RealProxy实现WCF动态代理</strong>》这篇文章中，我和大家分享了关于使用动态代理来简化WCF调用过程的相关内容，当时我试图解决的问题是，项目中大量通过T4生成甚至手动编写的“代理方法”。今天，我想和大家分享的是，如何通过动态的Controller来实现从WCF到Web API的迁移。为什么会有这个环节呢？因为我们希望把一个老项目逐步迁移到.NET Core上面，在这个过程中首当其冲的就是WCF，它在项目中主要承担着内部RPC的角色，因为.NET Core目前尚未提供针对WCF服务端的支持，因此面对项目中成百上千的WCF接口，我们必须通过Web API重新“包装”一次，区别于那些通过逐个API进行改造的方式，这里我们通过Castle动态生成Controller来实现从WCF到Web API的迁移。</p><h1 id="如何对类和接口进行组合"><a href="#如何对类和接口进行组合" class="headerlink" title="如何对类和接口进行组合"></a>如何对类和接口进行组合</h1><p>首先，我们来思考这样一个问题，假设现在有一个类BaseClass、一个接口IBaseService及其实现类BaseService，我们有没有什么办法，可以让这个类和接口组合起来呢？联系面向对象编程的相关知识，我们应该可以想到最常见的两种方式，即BaseService继承BaseClass(或者反过来)、BaseClass实现IBaseService接口。考虑到语言本身是否支持多继承的因素，第二种方式可能会更具有适用性。可如果这个问题，就仅仅到这种程度，我相信大家一定会感到失望，因为这的确没有什么好说的。现在的问题是，假如BaseClass类、BaseService类都已经存在了，我们有没有什么思路，可以把它们组合到一个类中呢？这又和我们今天要讨论的内容有什么关系呢？</p><p>好了，不卖关子啦，下面隆重请出Castle中的Dynamic Proxy，我们曾经介绍过Castle中的动态代理，它可以为指定的类和接口创建对应的代理类，除此以外，它提供了一种称为<strong>AdditionalInterfaces</strong>的接口，这个接口可以在某个代理对象上“组合”一个或者多个接口，换句话说，代理对象本身包含被代理对象的全部功能，同时又可以包含某个接口的全部功能，这样就实现了一个类和一个接口的组合。为什么我们会需要这样一个功能呢？因为假如我们可以把一个ApiController类和指定的接口类如CalculatorService进行组合，在某种程度上，CalculatorService就变成了一个ApiController，这样就实现了我们的目标的第一步，即动态生成一个ApiController。与此同时，它会包含我们现有的全部功能，为了方便大家理解，我们从下面这个简单的例子开始：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> IEchoService定义</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEchoService</span> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Echo</span> (<span class="params"><span class="keyword">string</span> receiver</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> IEchoServicee实现</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EchoService</span> : <span class="title">IEchoService</span> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Echo</span> (<span class="params"><span class="keyword">string</span> receiver</span>)</span> &#123;</span><br><span class="line">         Console.WriteLine (<span class="string">$"Hi，<span class="subst">&#123;receiver&#125;</span>"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 空类EmptyClass</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmptyClass</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EchoInterceptor</span> : <span class="title">IInterceptor</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> IEchoService _realObject;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">EchoInterceptor</span> (<span class="params">IEchoService realObject</span>)</span> &#123;</span><br><span class="line">         _realObject = realObject;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span> (<span class="params">IInvocation invocation</span>)</span> &#123;</span><br><span class="line">         invocation.Method.Invoke (_realObject, invocation.Arguments);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> container = <span class="keyword">new</span> WindsorContainer ();</span><br><span class="line"> container.Register (</span><br><span class="line">     Component.For&lt;EchoService, IEchoService&gt;(),</span><br><span class="line">     Component.For (<span class="keyword">typeof</span> (EchoInterceptor)).LifestyleTransient(),</span><br><span class="line">     Component.For (<span class="keyword">typeof</span> (EmptyClass)).Proxy.AdditionalInterfaces (<span class="keyword">typeof</span>(IEchoService))</span><br><span class="line">     .Interceptors (<span class="keyword">typeof</span> (EchoInterceptor)).LifestyleTransient()</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> emptyClass = container.Resolve&lt;EmptyClass&gt; ();</span><br><span class="line"> <span class="keyword">var</span> methodInfo = emptyClass.GetType().GetMethod (<span class="string">"Echo"</span>);</span><br><span class="line"> methodInfo.Invoke (emptyClass, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; <span class="string">"Dynamic WebApi"</span> &#125;);</span><br></pre></td></tr></table></figure><p>此时，我们会发现通过Castle动态生成的代理类，同时具备了类和接口的功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g4a1c3r3i8j20rz0f43yj.jpg" alt="通过Castle实现类和接口的组合功能" title="">                </div>                <div class="image-caption">通过Castle实现类和接口的组合功能</div>            </figure><h1 id="重温ASP-NET-MVC原理"><a href="#重温ASP-NET-MVC原理" class="headerlink" title="重温ASP.NET MVC原理"></a>重温ASP.NET MVC原理</h1><p>OK，通过第一个例子，我们已经达到了第一个目的。接下来，顺着这个思路，我们不妨想象一下，如果把这个BaseClass换成BaseController会怎么样呢？因为在一个OO的语言里，一切都是Class，所以，Web开发中的Controller同样不会脱离这个体系。不过，在这之前，我们需要复习下ASP.NET MVC的原理，为什么要说这个呢？因为接下来的内容，都和它有重大的关联，我们实际上是自己实现了ASP.NET MVC中几个关键的环节，所以，在博主看来，这部分内容是非常重要的，这几乎是这篇文章中实现的最细节部分，因为第一个目标，说句实话，Castle帮我们简化到了只有4行代码。</p><h2 id="一张图了解MVC"><a href="#一张图了解MVC" class="headerlink" title="一张图了解MVC"></a>一张图了解MVC</h2><p><img src="https://ws1.sinaimg.cn/large/4c36074fly1g49w0oxqkej20p50fuwfa.jpg" alt=" 一张图了解MVC"></p><p>通常来讲，当我们在MVC中接收到一个Url请求后，这个请求会被UrlRoutingModule拦截。此时，请求的上下文HttpContext会被封装到HttpContextWrapper对象中。而根据当前请求的HttpContext，则可以提取出符合当前Url的路由对象RouteData，它会被进一步封装为RequestContext对象。接下来，从RequestContext对象中获取RouteData，它对应一个RouteHandler，是IHttpHandler的一个实现类。对于MVC而言，则对应MvcHandler。通过调用MvcHandler，对应的Controller会被反射激活，进而调用具体的Action。以上就是整个MVC请求的过程描述，可以看出最关键的两个组件是UrlRoutingModule和MvcHandler，前者的作用是解析Controller和Action名称，后者的作用则是根据Controller名称去反射调用具体的Action，大家可以通过上面的图来理解这个过程。</p><p>在这里，其实我们只需要关注第二部分:-D，即MvcHandler，因为我们会在默认路由的基础上，增加一个自定义路由来“标记”这些动态的Controller，所以，我们集中关注MvcHandler这部分即可，虽然这里提到它会根据Controller的名称来反射激活相应的Controller实例、调用具体的Action，但这仅仅是宏观上的一种认识。我们来看一下，它具体是怎么反射出Controller以及调用Action的。</p><h2 id="IControllerFactory接口"><a href="#IControllerFactory接口" class="headerlink" title="IControllerFactory接口"></a>IControllerFactory接口</h2><p>第一个关键的组件是IControllerFactory接口，顾名思义，它是作用是创建Controller，可实际上，这个组件除了完成创建Controller的工作以外，还会涉及到Controller类型的解析、Controller实例激活、Controller实例释放、会话状态行为选项获取等多个功能。这里有一个激活的过程，我们可以将其理解为Controller的初始化，因为Controller在使用的过程中往往会通过IoC容器来注入相关服务，所以，你可以理解为在构造Controller的过程中，我们需要一个IoC容器来完成依赖注入相关的事情，微软默认提供了一个DefaultControllerFactory的实现，它内部是通过IHttpControllerActivator接口来完成依赖注入的，而这恰恰是我们要关注的第二个组件。</p><h2 id="IHttpControllerActivator接口"><a href="#IHttpControllerActivator接口" class="headerlink" title="IHttpControllerActivator接口"></a>IHttpControllerActivator接口</h2><p>老实说，通过自定义IHttpControllerActivator的方式实现依赖注入的方式并不常见，因为更一般的情况是，大家在Global.asax里初始化像Unity、Autofac等等类似的容器，然后在Controller里通过容器去Resolve一个服务出来，对于IHttpControllerActivator接口而言，它只有一个Create()方法，在这篇文章中，我们是通过Castle这个容器来实现依赖注入的，所以，你大概可以想象出它的过程，首先把所有动态生成的Controller全部注入到Ioc容器中，然后再根据传入的类型获取对应Controller的实例。在本文中，我们重写了默认的HttpControllerActivator，这里主要指Create()方法，因为我们希望实现的效果是，动态的Controller全部从Castle容器中获取，而静态的Controller依然按照微软的设计来获取。</p><h2 id="IHttpControllerSelector接口"><a href="#IHttpControllerSelector接口" class="headerlink" title="IHttpControllerSelector接口"></a>IHttpControllerSelector接口</h2><p>OK，现在有了Controller以后，我们怎么让MVC路由到正确的Controller上面去呢？这时候，必然需要有人来解析路由啊，这就是第三个组件——IHttpControllerSelector。这又是一个顾名思义的接口，充分说明命名是件多么重要的事情。在这里我们重写了SelectController()方法，当路由信息中存在ServiceName和ActionName时，就去检查容器中是否存在对应的Controller，如果存在就返回一个HttpControllerDescriptor，这是一个用以描述控制器上下文信息的类型。反之，会调用默认的base.SelectController()方法，这样做还是为了兼容微软原来的设计，因为我们不希望在引入动态Controller后，导致普通的Controller无法正常工作。</p><h2 id="IhttpActionSelector接口"><a href="#IhttpActionSelector接口" class="headerlink" title="IhttpActionSelector接口"></a>IhttpActionSelector接口</h2><p>同理，我们还需要告诉MvcHandler，它应该调用哪个方法，这时候我们需要IHttpActionSelector，因为从路由信息中我们可以提取到ActionName参数，因此，通过通过typeof(Controller).GetMethod(ActionName)，就可以获得对应ActionName对应的方法，熟悉反射的朋友应该都知道，它会返回MethodInfo这个类型，实际上IHttpActionSelector所做的事情，就是把MethodInfo传给MvcHandler，因为此时只要通过反射调用这个方法即可，Controller的实例在上一步就创建好了，而调用方法所需要的参数，则被存储在当前请求的上下文HttpContext里面，至此万事具备！我们要做的，就是顺着这些思路去实现以上组件。</p><h1 id="关键组件的自定义实现"><a href="#关键组件的自定义实现" class="headerlink" title="关键组件的自定义实现"></a>关键组件的自定义实现</h1><p>OK，下面我们来看看如何针对这些组件， 来分别实现我们的自定义组件，实现这些自定义组件并对MVC中的默认组件进行替换，这就是我们这篇文章中实现动态Controller的一个基本原理。</p><h2 id="DynamicControllerActivator"><a href="#DynamicControllerActivator" class="headerlink" title="DynamicControllerActivator"></a>DynamicControllerActivator</h2><p>DynamicControllerActivator 实现了IHttpControllerActivator接口，这里我们通过单例模式获得了DynamicHttpControllerManager对象的一个实例，其内部封装了Castle的容器接口IWindsorContainer，所以，在这里我们直接通过controllerType从容器中Resolve对应的Controller即可，而默认情况下，所有的Controller都实现了IHttpController接口，所以，这一步我们需要做一个显示的类型转换，后面我们会通过它替换微软默认的实现，这样，当一个请求被发送过来的时候，我们实际上是从这个自定义容器中获取对应Controller的实例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicHttpControllerActivtor</span> : <span class="title">IHttpControllerActivator</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> IHttpController <span class="title">Create</span>(<span class="params">HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType</span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (IHttpController)DynamicHttpControllerManager.GetInstance().Resolve(controllerType);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DynamicHttpControllerSelector"><a href="#DynamicHttpControllerSelector" class="headerlink" title="DynamicHttpControllerSelector"></a>DynamicHttpControllerSelector</h2><p>如果说DynamicControllerActivator 是真正实现控制器的<strong>“激活”</strong>部分，那么在此之前，我们需要实现控制器的<strong>“筛选”</strong>部分，换言之，一个请求被发送过来的时候，到底应该用哪一个Controller去处理这个请求呢？所以，我们来看看DynamicHttpControllerSelector这个组件是如何实现的，这里我们重写SelectController()这个方法来完成控制器的<strong>“筛选”</strong>部分的工作。可以注意到，我们首先会判断路由信息中是否存在ServiceName和ActionName这两个值，因为对于动态的Controller，我们默认使用的路由模板是<strong>services/{ServiceName}/{ActionName}</strong>，这里使用services前缀是为了区别于微软默认的api前缀，当然，强迫症的你同样可以使用相同的前缀。</p><p>接下来，我们会判断ServiceName是否在容器中注册过，如果注册了就从容器里取出对应的服务，并构造DynamicHttpControllerDescriptor对象，否则调用父类方法按微软默认实现去处理。那么，这个DynamicHttpControllerDescriptor对象，又是何方神圣呢？从名称上我们大概可以了解，这应该是一个对控制器相关信息进行描述的类型，它继承了HttpControllerDescriptor这个父类，目前没有任何扩展性的实现。对于DynamicHttpControllerDescriptor，它最重要的参数是构造函数中第三个参数，即 controllerType，因为DynamicControllerActivator 实际上就是根据它来工作的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicHttpControllerSelector</span>: <span class="title">DefaultHttpControllerSelector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> HttpConfiguration _configuration;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="configuration"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicHttpControllerSelector</span>(<span class="params">HttpConfiguration configuration</span>) :</span></span><br><span class="line"><span class="function">        <span class="title">base</span>(<span class="params">configuration</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> HttpControllerDescriptor <span class="title">SelectController</span>(<span class="params">HttpRequestMessage request</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> routeData = request.GetRouteData().Values;</span><br><span class="line">        <span class="keyword">if</span> (routeData.ContainsKey(<span class="string">"ServiceName"</span>) &amp;&amp; routeData.ContainsKey(<span class="string">"ActionName"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> serviceName = routeData[<span class="string">"ServiceName"</span>].ToString();</span><br><span class="line">            <span class="keyword">var</span> actionName = routeData[<span class="string">"ActionName"</span>].ToString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DynamicHttpControllerManager.GetInstance().ContainsService(serviceName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> controllerInfo = DynamicHttpControllerManager.GetInstance().GetControllerInfo(serviceName);</span><br><span class="line">                <span class="keyword">var</span> controller = DynamicHttpControllerManager.GetInstance().Resolve(serviceName);</span><br><span class="line">                <span class="keyword">if</span> (controller == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">base</span>.SelectController(request);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> controllerDescriptor = <span class="keyword">new</span> DynamicHttpControllerDescriptor(_configuration, serviceName, controllerInfo.ControllerType);</span><br><span class="line">                controllerDescriptor.Properties[<span class="string">"ServiceName"</span>] = serviceName;</span><br><span class="line">                controllerDescriptor.Properties[<span class="string">"ActionName"</span>] = actionName;</span><br><span class="line">                controllerDescriptor.Properties[<span class="string">"IsDynamicController"</span>] = <span class="literal">true</span>;</span><br><span class="line">                controllerDescriptor.Properties[<span class="string">"ServiceType"</span>] = controllerInfo.ServiceType;</span><br><span class="line">                controllerDescriptor.Properties[<span class="string">"ControllerType"</span>] = controller.GetType();</span><br><span class="line">                <span class="keyword">return</span> controllerDescriptor;</span><br><span class="line">            &#125;</span><br><span class="line">                 </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.SelectController(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DynamicHttpActionSelector"><a href="#DynamicHttpActionSelector" class="headerlink" title="DynamicHttpActionSelector"></a>DynamicHttpActionSelector</h2><p>既然通过路由中的ServiceName可以对Controller进行<strong>“筛选”</strong>，那么，我们自然可以通过路由中的ActionName来对Action进行<strong>筛选”</strong>。Action是控制器中的概念，对应一般的接口或者类，我们称之为方法，因此，DynamicHttpActionSelector在这里实现针对Action的筛选，它继承ApiControllerActionSelector类并重写了SelectAction()方法，下面给出具体的实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicHttpActionSelector</span> : <span class="title">ApiControllerActionSelector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> HttpActionDescriptor <span class="title">SelectAction</span>(<span class="params">HttpControllerContext controllerContext</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> isDynamicController = controllerContext.ControllerDescriptor.Properties.ContainsKey(<span class="string">"IsDynamicController"</span>);</span><br><span class="line">        <span class="keyword">if</span> (isDynamicController)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> controllerType = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">            <span class="keyword">if</span> (controllerContext.ControllerDescriptor.Properties.TryGetValue(<span class="string">"ControllerType"</span>, <span class="keyword">out</span> controllerType))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> actionName = controllerContext.ControllerDescriptor.Properties[<span class="string">"ActionName"</span>].ToString();</span><br><span class="line">                <span class="keyword">var</span> methodInfo = ((Type)controllerType).GetMethod(actionName);</span><br><span class="line">                <span class="keyword">if</span> (methodInfo == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">base</span>.SelectAction(controllerContext);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DynamicHttpActionDescriptor(controllerContext.ControllerDescriptor, methodInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.SelectAction(controllerContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和筛选Controller的过程类似，首先我们会判断这是不是一个动态的Controller，请注意在DynamicHttpControllerSelector中，我们为ControllerDescriptor添加了大量的Properties，这些Properties可以在这里继续使用。显然，我们只需要关注动态的Controller即可，如果可以通过ActionName找到对应的MethodInfo，那就说明当前Controller中存在指定的Action，反之则需要调用父类方法按微软默认的实现去处理。其实，这里不好的一点就是，我们的通过反射获取MethodInfo时，需要传入ActionName即方法的名字，而方法的名字是区分大小写的，这会导致我们的URL必须区分大小写，这不太符合RESTful API风格。同样额，这里定义了一个类型DynamicHttpActionDescriptor，它继承自ReflectedHttpActionDescriptor，它需要传入MethodInfo，这样MVC就知道应该去调用控制器的哪一个方法了。</p><h2 id="容器注册及服务替换"><a href="#容器注册及服务替换" class="headerlink" title="容器注册及服务替换"></a>容器注册及服务替换</h2><p>在我们实际的业务系统中，存在着大量的WCF接口，它们都是通过ServiceHost这种方式来托管，然后在调用端通过代理类的方式来相互调用，因此把WCF迁移到Web API上，被抛弃的仅仅是这些.svc的文件，而这些WCF接口依然可以继续使用。在之前的文章中，我们用Castle的Dynamic Proxy来代替各种手写的代理类，在这篇文章中我们继续沿用ICalculator这个接口示例，它包含着最为简单加减乘除四个方法，那么，我们应该怎样把这个接口变成一个Web API呢？这就是所谓的容器注册和服务替换啦！首先我们来注册ICalculator这个服务，它的代码只有一行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DynamicHttpControllerManager.GetInstance().RegisterType&lt;CalculatorService, ICalculator&gt;();</span><br></pre></td></tr></table></figure><p>这是一个典型的依赖注入，其中CalculatorService是ICalculator的实现类，它到底做了什么呢？我们来看看本质：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> RegisterType&lt;TImplement, TInterface&gt;(<span class="keyword">string</span> serviceName = <span class="string">""</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(serviceName))</span><br><span class="line">        serviceName = GetServiceName&lt;TImplement&gt;();</span><br><span class="line"></span><br><span class="line">    _container.Register(</span><br><span class="line">        Component.For(<span class="keyword">typeof</span>(TImplement), <span class="keyword">typeof</span>(TInterface)),</span><br><span class="line">        Component.For&lt;DynamicApiInterceptor&lt;TInterface&gt;&gt;().LifestyleTransient(),</span><br><span class="line">        Component.For&lt;BaseController&lt;TInterface&gt;&gt;().Proxy.AdditionalInterfaces(<span class="keyword">typeof</span>(TInterface))</span><br><span class="line">            .Interceptors&lt;DynamicApiInterceptor&lt;TInterface&gt;&gt;().LifestyleTransient()</span><br><span class="line">            .Named(serviceName)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    _controllerInfoList.Add(serviceName, <span class="keyword">new</span> DynamicControllerInfo(<span class="keyword">typeof</span>(TInterface)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有觉得这段代码非常熟悉，实际上这就是我们这篇文章最开始提出的问题：怎么样对一个类和接口进行租户。一开始我们是用一个最普通的类、一个最普通的接口来演示这种可能性，而这里我们不过将其推广到一个特殊的场景，如果这个类是一个继承了ApiController的BaseController呢？这是一个由一般到特殊的过程。如你所见，内部的确使用了Castle的容器来处理依赖注入，而_controllerInfoList则存储了Controller相关的信息，方便我们在整个流程中随时获取这些信息。完成容器注册以后，我们就可以着手对MVC中的默认组件进行替换工作啦，我个人建议，替换工作放在整个Global.asax的最前面：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration = GlobalConfiguration.Configuration;</span><br><span class="line"><span class="keyword">var</span> dynamicControllerSelector = <span class="keyword">new</span> DynamicHttpControllerSelector(configuration);</span><br><span class="line"><span class="keyword">var</span> dynamicHttpControllerActivtor = <span class="keyword">new</span> DynamicHttpControllerActivtor();</span><br><span class="line"><span class="keyword">var</span> dynamicActionSelector = <span class="keyword">new</span> DynamicHttpActionSelector();</span><br><span class="line">GlobalConfiguration.Configuration.Services.Replace(<span class="keyword">typeof</span>(IHttpControllerSelector), dynamicControllerSelector);</span><br><span class="line">GlobalConfiguration.Configuration.Services.Replace(<span class="keyword">typeof</span>(IHttpActionSelector), dynamicActionSelector);</span><br><span class="line">GlobalConfiguration.Configuration.Services.Replace(<span class="keyword">typeof</span>(IHttpControllerActivator), dynamicHttpControllerActivtor);</span><br></pre></td></tr></table></figure><p>假设现在我希望调用ICalcultor接口中的Add方法，理论上它的URL应该是<strong><a href="http://localhost/Service/Calculator/Add" target="_blank" rel="noopener">http://localhost/Service/Calculator/Add</a></strong>，因为截至到目前为止，所有的接口默认都是通过Get来访问的，下面是整个流程第一次跑通时的截图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g49z1cvrw3j20pe05njrj.jpg" alt="迁移后的ICalculator接口" title="">                </div>                <div class="image-caption">迁移后的ICalculator接口</div>            </figure><h1 id="接口迁移后的二三事"><a href="#接口迁移后的二三事" class="headerlink" title="接口迁移后的二三事"></a>接口迁移后的二三事</h1><p>现在，我们完成了ICalculator接口的改造，它从一个WCF服务变成了一个Web API，而在这个过程中，我们发现一点点问题。首先，Web API中的URL是不区分大小写的，而我们这里的ServiceName、ActionName都是严格区分大小写的。其次，接口方法中的out、ref、params等关键字不适用于Web API语境，需要进一步对接口进行改造。再者，Web API需要区分GET、POST、PUT、DELETE等动词，返回值需要统一调整为JSON格式。最后，完成改造的动态API需要通过RestSharp或者HttpClient等HTTP客户端来调用，以替换原有的WCF代理方法。这里简单对后面这两个问题做下说明，因为前两个问题，都是历史遗留问题啦，哈哈😄。</p><h2 id="HTTP动词支持"><a href="#HTTP动词支持" class="headerlink" title="HTTP动词支持"></a>HTTP动词支持</h2><p>为了让接口支持不同的HTTP动词，我们需要对整个设计进行进一步优化。为什么我会把这件事情看得如此重要呢？因为在我看来，RESTful风格的API大概会有这样几种级别，第一种级别指仅仅使用了HTTP协议来设计API，第二种级别是在API设计中引入资源的概念，第三种级别是合理地使用HTTP动词如GET、POST、PUT等，第四种级别是使用HATEOSA来返回用户接下来可能的意图。可惜在实际的应用种，能做到第二种级别的都相当不容易啦。比如某接口不支持GET操作，原因是它需要附加token在Body中，因此在改造接口的过程中，哪怕参数是最简单的值类型，它还是必须要用POST方式来请求。可其实这种问题，如果把token附加在HTTP首部中，或者干脆就使用标准的Authorizatin字段完全就能解决啊。为了让这个方案更完美一点，我们对DynamicHttpActionDescriptor进行改造，重写它的SupportedHttpMethods属性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDynamicController = controllerDescriptor.Properties.ContainsKey(<span class="string">"IsDynamicController"</span>);</span><br><span class="line"><span class="keyword">if</span> (isDynamicController)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> serviceType = controllerDescriptor.Properties[<span class="string">"ServiceType"</span>];</span><br><span class="line">    <span class="keyword">var</span> httpVerbAttributes = ((Type)serviceType).GetMethod(methodInfo.Name).GetCustomAttributes&lt;Attribute&gt;()</span><br><span class="line">        .Where(t =&gt; <span class="keyword">typeof</span>(IActionHttpMethodProvider).IsAssignableFrom(t.GetType()))</span><br><span class="line">        .ToList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpVerbAttributes.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据路由来获取Http动词</span></span><br><span class="line">        <span class="keyword">if</span> (httpVerbAttributes.Count &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$"Multiple http verb matched in method <span class="subst">&#123;methodInfo.Name&#125;</span> of <span class="subst">&#123;((Type)serviceType).Name&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">             _httpVerbs = GetHttpVerbByRoute(httpVerbAttributes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//根据方法名称获取Http动词</span></span><br><span class="line">            _httpVerbs = GetHttpVerbByMethod(methodInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其原理说起来并不复杂，检查方法上是否有HTTPGet、HttpPost、HttpPut等标签，如果存在，则添加相应的HTTP动词到<strong>_httpVerbs</strong>集合中；如果不存在，则根据方法的名字来构建相应的HTTP动词。譬如以Add、Create等开头的方法对应POST请求，以Get开头的方法对应GET请求，以Update开头的方法对应PUT请求，以Delete开头的方法对应DELETE请求等。最终，我们只需要把<strong>_httpVerbs</strong>作为SupportedHttpMethods属性的返回值即可。</p><h2 id="接口返回值优化"><a href="#接口返回值优化" class="headerlink" title="接口返回值优化"></a>接口返回值优化</h2><p>通常在编写控制器的时候，我们会使用JSON作为接口的返回值，这是因为JSON在信息冗余度上相比XML更低，而且JSON和JavaScript有着密不可分的联系，所以使用JSON作为返回值会流行起来一点都不奇怪。我们知道，WCF是可以实现Web Service这种所谓的SOAP架构的，而WebService本质上是使用XML进行通信的HTTP，在调用WCF接口的时候，接口的参数、返回值都会被序列化为XML。平时我们手写Controller的时候，通常是在Controller层调用一层薄薄的Service层，然后对结果进行封装，使其成为对前端更友好的数据类型，可当我们调用动态的Controller时，其接口的返回值是在接口中定义好的，我们不可能去修改已经在使用中的Service定义。</p><p>虽然微软的Web API中可以自动对返回值进行序列化，参考最经典的ValuesController，它是微软对RESTful风格的一种标准实现，具体表现为Get()、Post()、Put()、Delete()四个方法，分别对应GTE、POST()、PUT()、DELETE(四个HTTP动词，这就是所谓的约定大于配置，并且这些方法的返回值都不是ActionResult或者IHttpActionResult，但整个框架依然可以帮我们将其序列化为JSON，这一切是为什么呢？其实，我们只需要重写DynamicHttpActionDescriptor的ReturnType属性，同时重写DynamicHttpActionDescriptor的ExecuteAsync()方法就可以达到这一目的：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> Type ReturnType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span>(DynamicApiResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;<span class="keyword">object</span>&gt; <span class="title">ExecuteAsync</span>(<span class="params">HttpControllerContext controllerContext, IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; arguments, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">base</span>.ExecuteAsync(controllerContext, arguments, cancellationToken)</span><br><span class="line">        .ContinueWith(task =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (task.Result == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> DynamicApiResult() &#123; Flag = <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (task.Result <span class="keyword">is</span> DynamicApiResult)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> task.Result;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DynamicApiResult() &#123; Flag = <span class="literal">true</span>, Result = task.Result &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (AggregateException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中大家大致可以猜出DynamicApiResult的结构了，它包含三个属性：Flag、Msg、Result。这是一个最常见的Web API的返回值封装，即通过Flag判断方法是否调用成功，通过Msg来返回异常信息，通过Result来返回具体的返回值。最近对接某公司的API接口的时候，发现一个非常奇葩的现象，一般没有返回值可以返回null或者空字符串，可这家公司居然返回的是<strong>”无数据”</strong>，你以为这是放在Msg里的吗？不，人家是放在Result里的。对此，我只能说，互联网发展到2019年了，那些年野蛮生长留下的坑却还一直都在。好了，现在我们来看看接口调用的结果，喏，这次是不是感觉顺眼多啦！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g49z2ku45tj20il06dmxa.jpg" alt="优化后的ICalculator接口返回值" title="">                </div>                <div class="image-caption">优化后的ICalculator接口返回值</div>            </figure><h1 id="POCOController"><a href="#POCOController" class="headerlink" title="POCOController"></a>POCOController</h1><p>其实，这篇文章写到这里就已经结束啦，因为对于一般的ASP.NET项目，这篇文章里所分享这些内容，基本上可以实现我们最初的目标，即把老系统中的WCF接口迁移到Web API上，从长远的角度来看，这是为了后续迁移到.NET Core上做准备，其实不单单是WCF，任何的接口、服务都可以顺着这种思路去做扩展，手写Controller虽然是最容易上手的实践方式，可随着业务的不断推进，无一例外地出现接口爆炸的现象，在没有注册中心的情况下，业务系统间互相调对方的Web API简直叫一个混乱，你能想象一家公司里的不同业务系统，居然没有通用的网关去做接口的授权吗？反正我最近是见识到了某友的混乱。这篇文章中的思路，其实是参考了Abp这个框架中的DynamicApiController这一功能，可我们大多数人都没怎么好好用过这项技术，.NET Core就来了，Abp官方着手开发的Abp vNext就是基于.NET Core的下一代Abp框架，不知道届时会不会有这个功能。</p><p>既然说到了,NET Core，那么就不可避免地要说到.NET Core里的POCOController。因为ASP.NET与ASP.NET Core的机制完全不同，所以，我们在这篇文章里的实现是无法直接用到ASP,NET Core里的，这听起来有点遗憾是不是，就在我写这篇博客的前几天，我看到有人把Abp的DynamicApiController移植到了.NET Core下面，还是熟悉的味道，但内部的原理已然大为不同。具体来讲, .NET Core下的POCOController特性会让这一切更简单。所谓POCOController，就是指任意一个类都可以是Controller。我们都知道在ASP.NET下，要写一个Web API必须继承ApiController，就是说这个类必须实现了IHttpController接口，就是因为有这个限制，所以，我们不得不通过Castle来动态生成一个Controller，既然现在ASP.NET Core里可以打破这一限制，那么实现起来自然会非常简单。限于这篇文章的篇幅(截至到这里已经将近6000余字)，我将在下一篇文章中和大家分享这一特性的相关内容。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>在传统的ASP.NET项目向ASP.NET Core迁移的过程中，我们遇到的第一个阻力就是作为内部RPC使用的WCF。因此，收到上一篇文章基于Castle动态代理这一思路的影响，参考Abp框架中的DynamicApiController功能，我们分享了一种可以为任意接口动态生成Controller的思路，其核心原理是通过Castle中的<strong>AdditionalInterfaces</strong>功能，将指定接口和ApiController进行组合，使得一个普通的接口可以像Controller一样被调用。在这个过程中，我们回顾了ASP.NET MVC的基本原理，了解了MVC是如何根据路由筛选Controller、激活Controller和筛选Action，在此基础上，我们对微软的MVC进行了一次Hack，使用我们自定义的组件替换了微软的默认实现，从而可以让原来托管在ServiceHost上的接口，通过Web API来访问和调用。当然，这篇文章里没有实现自定义的路由、过滤器的支持，所谓抛砖引玉，Abp的代码本身在Github上就可以找到，大家如何对此感兴趣的话，可以做进一步的研究和扩展。我们实现了服务端的切换，这意味着在客户端同样需要一次切换，预知后事如何，请大家关注我的下一篇博客，以上就是我这篇博客的全部内容了，谢谢大家！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://www.cnblogs.com/1zhk/p/5399548.html" target="_blank" rel="noopener">Castle中AdditionalInterfaces用法介绍</a></li><li><a href="https://www.cnblogs.com/1zhk/p/5418694.html" target="_blank" rel="noopener">ABP源码分析三十五：ABP中动态WebAPI原理解析</a></li><li><a href="https://github.com/FJQBT/ABP" target="_blank" rel="noopener">https://github.com/FJQBT/ABP</a></li></ul>]]></content>
    
    <summary type="html">
    
      DynamicControllerActivator 实现了IHttpControllerActivator接口，这里我们通过单例模式获得了DynamicHttpControllerManager对象的一个实例，其内部封装了Castle的容器接口IWindsorContainer，所以，在这里我们直接通过controllerType从容器中Resolve对应的Controller即可，而默认情况下，所有的Controller都实现了IHttpController接口，所以，这一步我们需要做一个显示的类型转换，后面我们会通过它替换微软默认的实现，这样，当一个请求被发送过来的时候，我们实际上是从这个自定义容器中获取对应Controller的实例
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="RESTful" scheme="https://qinyuanpei.github.io/tags/RESTful/"/>
    
      <category term="WebApi" scheme="https://qinyuanpei.github.io/tags/WebApi/"/>
    
      <category term="动态代理" scheme="https://qinyuanpei.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《Web API 的设计与开发》读书笔记</title>
    <link href="https://qinyuanpei.github.io/posts/3677280829/"/>
    <id>https://qinyuanpei.github.io/posts/3677280829/</id>
    <published>2019-05-28T12:00:53.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><h1 id="设计优美的Web-API："><a href="#设计优美的Web-API：" class="headerlink" title="设计优美的Web API："></a>设计优美的Web API：</h1><p>易于使用、便于更改、健壮性好、不怕公开</p><h1 id="REST的两层含义："><a href="#REST的两层含义：" class="headerlink" title="REST的两层含义："></a>REST的两层含义：</h1><ul><li>指符合Fielding的REST架构风格的Web服务系统</li><li>指使用符合RPC风格的XML或JSON + HTTP接口的系统(不使用SOAP)</li></ul><h1 id="端点的基本设计："><a href="#端点的基本设计：" class="headerlink" title="端点的基本设计："></a>端点的基本设计：</h1><ul><li>短小便于输入的URI-</li><li>人可以读懂的URI</li><li>没有大小写混用的URI</li><li>修改方便的URI</li><li>不暴露服务端架构的URI</li><li>规则统一的URI</li></ul><h1 id="HTTP方法和端点："><a href="#HTTP方法和端点：" class="headerlink" title="HTTP方法和端点："></a>HTTP方法和端点：</h1><ul><li>GET获取资源</li><li>POST新增资源</li><li>PUT更新已有资源</li><li>DELETE删除资源</li><li>PATCH更新部分资源</li></ul><h1 id="查询参数和路径的使用区别"><a href="#查询参数和路径的使用区别" class="headerlink" title="查询参数和路径的使用区别"></a>查询参数和路径的使用区别</h1><ul><li>表示唯一资源时，放在路径中</li><li>当参数可以忽略时，放在查询参数中<h1 id="RESTful的设计级别"><a href="#RESTful的设计级别" class="headerlink" title="RESTful的设计级别"></a>RESTful的设计级别</h1></li><li>使用HTTP</li><li>引入资源的概念</li><li>引入HTTP动词</li><li>引入HATEOAS<h1 id="如何指定数据格式？"><a href="#如何指定数据格式？" class="headerlink" title="如何指定数据格式？"></a>如何指定数据格式？</h1></li><li>查询参数：url?format=xml</li><li>扩展名：/url.json</li><li>Accept头部字段<h1 id="让用户决定响应的内容"><a href="#让用户决定响应的内容" class="headerlink" title="让用户决定响应的内容"></a>让用户决定响应的内容</h1></li><li>GraphQL<h1 id="通过状态码表示错误信息"><a href="#通过状态码表示错误信息" class="headerlink" title="通过状态码表示错误信息"></a>通过状态码表示错误信息</h1>1xx：消息<br>2xx：成功<br>3xx：重定向<br>4xx：客户端原因造成的错误<br>5xx：服务端原因造成的错误<h1 id="缓存与HTTP协议规范"><a href="#缓存与HTTP协议规范" class="headerlink" title="缓存与HTTP协议规范"></a>缓存与HTTP协议规范</h1>RFC7234：过期模型/验证模型<br>过期模型：Cache-Control/Expires<br>验证模型：Last-Modified/ETag<br>Vary首部：指定缓存单位<br>Conent-Type/Accept：指定媒体类型</li></ul><h1 id="API版本控制"><a href="#API版本控制" class="headerlink" title="API版本控制"></a>API版本控制</h1><ul><li>在URI中嵌入版本号</li><li>在查询字符串中加入版本信息</li><li>通过媒体类型指定版本<h1 id="API安全问题"><a href="#API安全问题" class="headerlink" title="API安全问题"></a>API安全问题</h1></li><li>推荐使用HTTPS</li><li>XSS/XSRF注入漏洞</li><li>返回正确的数据格式</li><li>使用安全相关首部</li><li>采用KVS实现访问限制<h1 id="提供API文档"><a href="#提供API文档" class="headerlink" title="提供API文档"></a>提供API文档</h1></li><li>API Blueprint</li><li>API Console/Apigee</li><li>提供SDK</li></ul>]]></content>
    
    <summary type="html">
    
      - 指使用符合RPC风格的XML或JSON + HTTP接口的系统(不使用SOAP)
    
    </summary>
    
      <category term="读书笔记" scheme="https://qinyuanpei.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://qinyuanpei.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web API" scheme="https://qinyuanpei.github.io/tags/Web-API/"/>
    
      <category term="RSETful" scheme="https://qinyuanpei.github.io/tags/RSETful/"/>
    
  </entry>
  
  <entry>
    <title>又见AOP之基于RealProxy实现WCF动态代理</title>
    <link href="https://qinyuanpei.github.io/posts/2954591764/"/>
    <id>https://qinyuanpei.github.io/posts/2954591764/</id>
    <published>2019-05-10T16:27:50.000Z</published>
    <updated>2020-02-04T10:39:03.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>最近一直在研究Mongodb和ElasticSearch之间同步数据的问题，苦于到目前为止，并没有取得任何实质性的进展。偶尔“趁得浮生半日闲暇”，看一看Web API设计方面的书籍，和前辈交流下项目中的历史遗留问题，最为直观的感受就是，这个世界上任何方案的最终落地，都经过理想和现实的无数次挣扎，比如我们希望迁移项目到.NET Core平台上，初步分析大概有将近1000多个无法兼容的地方，维持现状固然可以保证整个项目的稳定，可如果真到了不得不升级的地步，面临的问题可能会越来越多，所谓“凡事预则立，不预则废”，早一点准备总是好的。既然说到里历史问题，那么，今天这篇文章就来说一说，基于RealProxy实现WCF动态代理。</p><h1 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h1><p>在我们的业务系统中，对内是使用WCF来进行相互通信的，而对外则是使用Web API来进行数据交换。关于RPC还是REST的争论由来已有，严格地来说，两者没有绝对的高下之分，从风格上而言，RPC倾向于让接口映射到一个方法上，而REST则倾向于让接口映射到一个资源上。从我们实际的使用情况来看，REST在系统中应用得并不是很完美，因为大多数情况下，我们实现的仅仅是HTTP+JSON这样一种协议组合，因此业务系统中存在着大量的WCF接口供系统内部调用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2wasftjc2j20dl0b6t8z.jpg" alt="内部服务调用示意图" title="">                </div>                <div class="image-caption">内部服务调用示意图</div>            </figure><p>最早的时候，是通过T4模板来生成针对某个接口的代理类，而代理类中通常封装了ChannelFactory的创建、释放等等WCF相关的代码，实际应用中还会对WCF接口的异常进行捕获、记录日志、统计调用时间等，因此早期的T4模板实际上承担了生成代理类的职责。虽然业务的不断推进，接口中加入的新方法越来越多，导致具体业务类中的代码越来越多，动辄出现单个文件中代码行数达3000行以上，与此同时，每当WCF接口中增加了新方法，就不得不在其相关的代理类中增加代理方法。坦白地讲，就是增加一个看起来差不多的方法，因为你依然要处理ChannelFactory的创建、释放、异常处理、日志记录等等的工作。</p><p>其实，WCF可以直接生成客户端代码，因为每个WCF的服务都可以以WebService服务的形式暴露出来，而只要是WebService，总可以通过WSDL生成一个代理类。不过这显然不利于团队间的协作，更不利于服务终结点配置的集中化，更失去了异常处理、日志记录等等这些“通用”工作的可能性。T4应该可以基于“工作”，可显然大家觉得手写比生成要来得更容易些，所以，这个故事最终演变成这样一个局面，我们不得不通过局部类(Partial Class)的方式来开辟新的类文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2wad7ddv6j20tn09bt9o.jpg" alt="系统中充斥着大量类似的代码" title="">                </div>                <div class="image-caption">系统中充斥着大量类似的代码</div>            </figure><p>那么，说了这么多，从一个历史遗留问题入手，它真正的痛点在哪里呢？在我看来，主要有两点：第一，是手写代理类的“此恨绵绵无绝期”，明明就是对接口的简单封装，看起来是增加一个代理方法，其实最多就是复制黏贴，因为代理方法的核心代码就是调用接口，而剩下的都是重复的“服务型”代码；第二，是异常处理、日志记录的“哀鸿遍野”，同核心代码交织在一起，一遍又一遍的“重复”，为什么不考虑让它统一地去处理呢？难道每个人都抄着同一段代码，这样就实现了某种意义上的复用吗？</p><h1 id="RealProxy介绍"><a href="#RealProxy介绍" class="headerlink" title="RealProxy介绍"></a>RealProxy介绍</h1><p>既然像我这样懒惰的人，不愿意像别人一样手写代理类，那么我的思路又是什么呢？显然，从这篇文章的题目，你就可以看出，我这里要说的是动态代理，原来的代理类同样属于代理，它是在编译时期间生成了一个代理类，我们以为在调用这个代理类，可其实真正去工作的是ChannelFactory，这种方式称之为“静态代理”。如果你了解过设计模式，应该会知道相对应的代理模式，这里不再展开开来讲这这个设计模式，可以明确的是，动态代理就是在运行时期间动态创建一个代理对象的实例，它可以完全模拟被代理对象的行为，而我们的目的，就是要和手写的代理类永远地说再见！</p><p>好了，下面隆重介绍本文的主角——RealProxy。相信大家一定听说过AOP，即所谓的面向切面编程。它可以让我们在某一个所针对的横切面编程，并讲这种功能应用到所有相同的横切面上。譬如对方法级别的横切面增加拦截器，那么所有的方法都可以在执行前后具备相同的逻辑，典型的如日志记录、指定操作前的检验等等。而RealProxy 类恰恰提供最基本的代理功能，它是一个抽象类，必须通过重写其 Invoke()方法并添加新功能来继承，该类位于System.Runtime.Remoting.Proxies 命名空间中，通过重写Invoke()方法，我们就可以在被代理对象调用前后插入相关逻辑，而通过GetTransparentProxy()方法，则可以返回实际的代理对象。所以，通过这个原理，我们就可以在运行时期间，动态创建出指定类型的实例。这里，我们从一个简单的例子来开始，以帮助大家更好的理解RealProxy。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICalculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Add</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Subtract</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Multiply</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Divide</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalculatorService</span> : <span class="title">ICalculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Add</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 + n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Subtract</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 - n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Multiply</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 * n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Divide</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> n1 / n2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们定义一个简单的接口ICalculator，它含有加、减、乘、除四种基本运算，我们希望记录每个方法调用的参数、结果和执行时间，因此通过RealProxy对现有类型CalculatorService进行代理，并动态地创建代理对象来供调用方使用，下面给出关键代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalculatorServiceProxy</span> : <span class="title">RealProxy</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Server.Service.ICalculator _calculator;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CalculatorServiceProxy</span>(<span class="params">Server.Service.ICalculator calculator</span>) :</span></span><br><span class="line"><span class="function">            <span class="title">base</span>(<span class="params"><span class="keyword">typeof</span>(Server.Service.ICalculator</span>))</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _calculator = calculator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IMessage <span class="title">Invoke</span>(<span class="params">IMessage message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> methodCall = message <span class="keyword">as</span> IMethodCallMessage;</span><br><span class="line">            <span class="keyword">var</span> methodInfo = methodCall.MethodBase <span class="keyword">as</span> MethodInfo;</span><br><span class="line">            <span class="keyword">var</span> startTime = DateTime.Now;</span><br><span class="line">            <span class="keyword">var</span> serviceName = _calculator.GetType().Name;</span><br><span class="line">            <span class="keyword">var</span> methodName = methodInfo.Name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"调用&#123;0&#125;服务的&#123;1&#125;方法开始..."</span>, serviceName, methodName);</span><br><span class="line">                <span class="keyword">var</span> argsInfo = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCall.ArgCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    argsInfo.Add(methodCall.GetArgName(i), methodCall.Args[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">"当前传入参数:&#123;0&#125;"</span>, JsonConvert.SerializeObject(argsInfo));</span><br><span class="line">                <span class="keyword">var</span> result = methodInfo.Invoke(_calculator, methodCall.InArgs);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">                    Console.WriteLine(<span class="string">"当前返回值:&#123;0&#125;"</span>, JsonConvert.SerializeObject(result));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ReturnMessage(result, <span class="literal">null</span>, <span class="number">0</span>, methodCall.LogicalCallContext, methodCall);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"调用&#123;0&#125;服务的&#123;1&#125;方法失败,失败原因：&#123;2&#125;"</span>, serviceName, methodName, ex.Message);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"调用&#123;0&#125;服务的&#123;1&#125;方法结束,共耗时&#123;2&#125;秒"</span>, serviceName, methodName, DateTime.Now.Subtract(startTime).TotalSeconds);</span><br><span class="line">                Console.WriteLine(<span class="string">"----------------------------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以注意到，最核心的代码是在Invoke()方法中，在这里我们增加了我们想要的功能，但这些功能丝毫不会影响到CalculatorService，当我们通过构造函数给RealProxy传入被代理对象后，它就会对被代理对象的特定方法进行拦截，这里实际上就是加、减、乘、除四个方法。OK，到现在为止，这些都是我们的想像而已，具体我们实现执行结果来看。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> serviceProxy = <span class="keyword">new</span> CalculatorServiceProxy(<span class="keyword">new</span> CalculatorService());</span><br><span class="line"><span class="keyword">var</span> calculator = (ICalculator)serviceProxy.GetTransparentProxy();</span><br><span class="line">calculator.Add(<span class="number">12</span>, <span class="number">24</span>);</span><br><span class="line">calculator.Subtract(<span class="number">36</span>, <span class="number">10</span>);</span><br><span class="line">calculator.Multiply(<span class="number">12</span>, <span class="number">35</span>);</span><br><span class="line">calculator.Divide(<span class="number">36</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>现在，我们可以说，刚刚所说的一切都是真的，因为我们真的创建了一个ICalculator接口的实例，它真的记录了每个方法调用的参数、结果和执行时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2w7brst4dj20rm0eqgmc.jpg" alt="RealPrxoy牛刀小试" title="">                </div>                <div class="image-caption">RealPrxoy牛刀小试</div>            </figure><h1 id="WCF动态代理"><a href="#WCF动态代理" class="headerlink" title="WCF动态代理"></a>WCF动态代理</h1><p>现在，我们来考虑WCF，WCF需要通过ChannelFactory来创建和释放，而这恰恰是代理类所做的事情，就像下面的代码一样，我们通常会把所有的WCF集中配置在一个地方，并通过构造Binding和终结点地址来创建一个WCF服务，在调用服务的过程中，会对调用时间、异常信息等进行记录，这其实和我举的第一个例子完全一致，那么我们能不能用RealProxy来实现这些功能呢？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ServiceInfo&lt;TService&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ChannelFactory _channelFactory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceInfo</span>(<span class="params">ChannelFactory channelFactory</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _channelFactory = channelFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TService Service &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_channelFactory != <span class="literal">null</span>)</span><br><span class="line">            _channelFactory.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ServiceInfo&lt;TService&gt; <span class="title">FindService</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChannelFactory&lt;TService&gt; channelFactory = <span class="keyword">new</span> ChannelFactory&lt;TService&gt;(_binding, _endpointAddress);</span><br><span class="line">    <span class="keyword">var</span> serviceInfo = <span class="keyword">new</span> ServiceInfo&lt;TService&gt;(channelFactory);</span><br><span class="line">    serviceInfo.Service = channelFactory.CreateChannel();</span><br><span class="line">    <span class="keyword">return</span> serviceInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着这样的思路，如果我们可以把ChannelFactory注入到RealProxy中，就可以在接口调用过程中记录相关信息，这样我们就可以关注调用本身，因为所有的我们不想写的代码，现在全部都由代理类接管了，更重要的是，所有通过这种方式调用的WCF服务，都可以以一种统一而简洁的方式去处理，永远不用担心因为某个人忘记写代理方法而出现问题，下面给出整个实现的关键代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicServiceProxy&lt;TService&gt; : RealProxy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Binding _binding;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> EndpointAddress _endpointAddress;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicServiceProxy</span>(<span class="params">Binding binding, EndpointAddress endpointAddress</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="keyword">typeof</span>(TService</span>))</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _binding = binding;</span><br><span class="line">        _endpointAddress = endpointAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicServiceProxy</span>(<span class="params">Binding binding, <span class="keyword">string</span> serviceUrl</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">binding, new EndpointAddress(serviceUrl</span>))</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IMessage <span class="title">Invoke</span>(<span class="params">IMessage message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> serviceInfo = FindService();</span><br><span class="line">        <span class="keyword">var</span> methodCall = message <span class="keyword">as</span> IMethodCallMessage;</span><br><span class="line">        <span class="keyword">var</span> methodInfo = methodCall.MethodBase <span class="keyword">as</span> MethodInfo;</span><br><span class="line">        <span class="keyword">var</span> startTime = DateTime.Now;</span><br><span class="line">        <span class="keyword">var</span> serviceName = serviceInfo.Service.GetType().Name;</span><br><span class="line">        <span class="keyword">var</span> methodName = methodInfo.Name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"RealProxy调用&#123;0&#125;服务&#123;1&#125;方法开始..."</span>, serviceName, methodName);</span><br><span class="line">            <span class="keyword">var</span> argsInfo = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCall.ArgCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                argsInfo.Add(methodCall.GetArgName(i), methodCall.Args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">"RealProxy当前传入参数:&#123;0&#125;"</span>, JsonConvert.SerializeObject(argsInfo));</span><br><span class="line">            <span class="keyword">var</span> result = methodInfo.Invoke(serviceInfo.Service, methodCall.InArgs);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">                Console.WriteLine(<span class="string">"RealProxy当前返回值:&#123;0&#125;"</span>, JsonConvert.SerializeObject(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ReturnMessage(result, <span class="literal">null</span>, <span class="number">0</span>, methodCall.LogicalCallContext, methodCall);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"RealProxy调用&#123;0&#125;服务&#123;1&#125;方法失败,失败原因：&#123;2&#125;"</span>, serviceName, methodName, ex.Message);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            serviceInfo.Close();</span><br><span class="line">            Console.WriteLine(<span class="string">"调用&#123;0&#125;服务&#123;1&#125;方法结束,共耗时&#123;2&#125;秒"</span>, serviceName, methodName, DateTime.Now.Subtract(startTime).TotalSeconds);</span><br><span class="line">            Console.WriteLine(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于WCF服务端的实现，我们依然使用ICalculator这个接口，需要注意的是为其添加[ServiceContract]和[OperationContract]标签，在这个例子中，我们共有CalculatorService和MessageService两个服务，为了简化这个实例，我们采用BasicHttpBinding的方式进行绑定，并为其指定各自的终结点地址。可以注意到，现在我们的动态代理实现了和原来代理类一样的效果。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> binding = <span class="keyword">new</span> BasicHttpBinding();</span><br><span class="line"><span class="keyword">var</span> serviceUrl = <span class="string">"http://localhost:8502/Calculator.svc"</span>;</span><br><span class="line"><span class="keyword">var</span> calculator = ServiceProxyFactory.CreatePorxy&lt;Server.Service.ICalculator&gt;(binding, serviceUrl);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2w85svbrfj20rp0eqq41.jpg" alt="通过RealPrxoy动态代理WCF服务" title="">                </div>                <div class="image-caption">通过RealPrxoy动态代理WCF服务</div>            </figure><p>在调用WCF的时候，因为超时、网络等原因造成的调用异常，此时，我们可以为WCF添加异常处理相关的标签，而相应地，我们可以在异常中对异常的种类进行判断和处理，以便于及时地关闭ChannelFactory，因为如果它不能正确地关闭，会导致后续的通信出现问题，而这恰好是当初的代理类想要解决的问题，考虑到创建ChannelFactory是需要付出一定的性能代价的，因此，可以适当地考虑对ChannelFactory进行缓存，而这恰好是原来业务中的一个盲点。</p><h1 id="Castle-DynamicProxy"><a href="#Castle-DynamicProxy" class="headerlink" title="Castle.DynamicProxy"></a>Castle.DynamicProxy</h1><p>通过RealProxy，我们已经实现了WCF服务的动态代理，这里介绍第二种方式，即Castle.DynamicProxy，Castle和AspectCore、Unity等项目一样，提供了AOP相关的能力，可以让我们对接口、虚方法、类等进行拦截。Castle中的动态代理使用的是透明代理，而.NET Remoting的动态代理必须继承自MarshalByRefObject。博主暂时没有搞清楚，这两种是否属于同一种技术上的实现，作为延伸，我们来一起看看如何使用Castle中的DynamicProxy实现类似的功能，首先我们定义一个拦截器，它需要实现IInterceptor接口中的Intercept()方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serviceInfo = FindService();</span><br><span class="line">    <span class="keyword">var</span> methodInfo = invocation.Method;</span><br><span class="line">    <span class="keyword">var</span> startTime = DateTime.Now;</span><br><span class="line">    <span class="keyword">var</span> serviceName = serviceInfo.Service.GetType().Name;</span><br><span class="line">    <span class="keyword">var</span> methodName = methodInfo.Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"CastleProxy调用&#123;0&#125;服务&#123;1&#125;方法开始..."</span>, serviceName, methodName);</span><br><span class="line">        <span class="keyword">var</span> argsInfo = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> parameters = methodInfo.GetParameters();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; invocation.Arguments.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            argsInfo.Add(parameters[i].Name, invocation.Arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">"当前传入参数:&#123;0&#125;"</span>, JsonConvert.SerializeObject(argsInfo));</span><br><span class="line">        <span class="keyword">var</span> result = methodInfo.Invoke(serviceInfo.Service, invocation.Arguments);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123; </span><br><span class="line">        Console.WriteLine(<span class="string">"当前返回值:&#123;0&#125;"</span>, JsonConvert.SerializeObject(result));</span><br><span class="line">            invocation.ReturnValue = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"CastleProxy调用&#123;0&#125;服务&#123;1&#125;方法失败,失败原因：&#123;2&#125;"</span>, serviceName, methodName, ex.Message);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        serviceInfo.Close();</span><br><span class="line">        Console.WriteLine(<span class="string">"CastleProxy调用&#123;0&#125;服务&#123;1&#125;方法结束,共耗时&#123;2&#125;秒"</span>, serviceName, methodName, DateTime.Now.Subtract(startTime).TotalSeconds);</span><br><span class="line">        Console.WriteLine(<span class="string">"----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们通过ProxyGenerator来生成新的代理类，我们需要告诉ProxyGenerator要创建的类型是什么，是一个接口还是类，以及要应用哪一个拦截器。这里我们用到的方法是CreateInterfaceWithoutTarget()，它在这里的作用就是动态创建ICalculator接口的代理类。而通过查看Castle的API，我们会发现它可以在以下几种情况下创建某个类型的实例。首先是CreateInterfaceWithoutTarget()这个方法，当你希望创建一个接口的代理而又不想提供具体的实现时可以使用。其次是CreateInterfaceProxyWithTarget()这个方法，当你希望创建一个接口的代理同时又有提供具体实现时使用可以使用。接下来，是CreateInterfaceProxyWithTargetInterface()这个方法，它的命名看起来让人感到迷惑，甚至在某种角度来看，它和CreateInterfaceProxyWithTarget()这个方法还有点相似，其实。这两者最大的不同就是：后者允许你将调用目标替换为目标接口的不同实现。这种在实际场景中使用得不多，从Castle官方的使用场景来看，唯一用到这种技术的是Castle.Facilities，它可以和Windsor 这样的容器整合在一起使用，这个时候调用者就可以把WCF服务当作一个普通接口来使用，果然，大家都想到这一点，英雄所见略同啊，哈哈。好了，下面我们来看具体的代码实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProxyGenerator generator = <span class="keyword">new</span> ProxyGenerator();</span><br><span class="line"><span class="keyword">var</span> interceptor = <span class="keyword">new</span> CastleServicePorxy&lt;ICalculator&gt;(binding, serviceUrl);</span><br><span class="line"><span class="keyword">var</span> calculator = (ICalculator)generator.CreateInterfaceProxyWithoutTarget(<span class="keyword">typeof</span>(ICalculator),interceptor);</span><br></pre></td></tr></table></figure><h1 id="迁移至-NET-Core"><a href="#迁移至-NET-Core" class="headerlink" title="迁移至.NET Core"></a>迁移至.NET Core</h1><p>其实，我对WCF是不太感冒的，因为第一个字母W表明，它是一个只能运行在Windows平台的产物，现在依然有大量的Web Service存在，如果可以让我像使用普通接口一样使用WCF接口，我还是非常愿意去使用它的，毕竟系统中有大量依赖WCF的东西。可话又说回来，现在到.NET Core这个版本，微软并没有把WCF的服务端移植到.NET Core上，仅仅是提供了客户端调用的支持，或许还是因为WCF里有太多平台相关的东西吧！如果希望自己的.NET应用可以跨平台，越早摆脱这些Windows平台东西越好，譬如IIS、SQLServer等等。不过我这里想说的是，RealProxy在.NET Core中有类似的实现，我们可以用下面这种方式来进行迁移，当然，如果你直接Castle就更没有问题啦！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvokeSerice</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Proxy&lt;T&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DispatchProxy.Create&lt;T, InvokeProxy&lt;T&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InvokeProxy&lt;T&gt; : DispatchProxy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Type type = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokeProxy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        type = <span class="keyword">typeof</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">Invoke</span>(<span class="params">MethodInfo targetMethod, <span class="keyword">object</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> 在这里实现拦截逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇博客再次让大家领略了AOP的魅力，通过动态代理来创建相关的服务接口，让我们逐渐摆脱了手写代理类的深渊。本文主要分享了两种动态代理的实现方式，一种是基于.NET Remoting的RealProxy，一种是基于Castle的DynamicProxy。两种方式在使用上是非常相近的，通过这种方式。我们实现了WCF服务创建细节的隐藏，调用者不再需要去关心ChannelFactory相关的底层细节，可以像使用普通接口一样调用WCF服务，并且可以用一种统一的方式去记录调用相关的细节、对异常进行处理等等。早期的T4模板本质上是一种静态代理的方式，其缺点是难以适应快速迭代的变化，必须人手编写代理方法，而通过动态代理，这一切只需要写一次就好了，从而做到了真正意义上的“一次编写，到处运行”，这就是所谓的面向横切面编程的思路。关于Castle动态代理更多的应用场景，以及Castle.Facilities相关的内容，大家可以从各自的文档中去了解，以上就是这篇博客的全部内容了。</p>]]></content>
    
    <summary type="html">
    
      顺着这样的思路，如果我们可以把ChannelFactory注入到RealProxy中，就可以在接口调用过程中记录相关信息，这样我们就可以关注调用本身，因为所有的我们不想写的代码，现在全部都由代理类接管了，更重要的是，所有通过这种方式调用的WCF服务，都可以以一种统一而简洁的方式去处理，永远不用担心因为某个人忘记写代理方法而出现问题，下面给出整个实现的关键代码：
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="AOP" scheme="https://qinyuanpei.github.io/tags/AOP/"/>
    
      <category term="Castle" scheme="https://qinyuanpei.github.io/tags/Castle/"/>
    
      <category term="Dynamic Proxy" scheme="https://qinyuanpei.github.io/tags/Dynamic-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>WSL下Docker使用踩坑小记</title>
    <link href="https://qinyuanpei.github.io/posts/4159187524/"/>
    <id>https://qinyuanpei.github.io/posts/4159187524/</id>
    <published>2019-04-22T22:13:36.000Z</published>
    <updated>2020-02-04T10:39:03.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>众所周知，Win10中开始提供Linux子系统，即Windows Subsystem for Linux，简称WSL，它可以让我们在Windows系统使用Linux系统，自从有了这个新功能以后，博主果断地放弃双系统的方案，因为折腾起来实在花费时间。关于如何使用WSL，网上有非常多的文章可以参考，这里不再赘述。今天想说的是，WSL下使用Docker遇到的各种坑。</p><p>装完WSL以后，对各种编译环境的使用相当满意，最近在研究日志可视化平台ELK，其中需要使用Docker来搭建环境，一顿sudo操作猛如虎，快速安装完Docker环境，结果发现熟悉的命令行居然无法正常工作，是可忍孰不可忍。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">   $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">   stable"</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>第一个错误是，你按照官方文档安装完Docker，输入docker -v，一切显示正常的时候，此时，如果会执行docker run hello-world命令，会出现以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?. See <span class="string">'docker run --help'</span>.</span></span><br></pre></td></tr></table></figure><p>此时，你可能会尝试通过执行systemctl start docker命令来启动Docker服务，因为错误信息告诉我们，Docker的守护进程没有启动，可你会发现这样依然报错。可是为什么呢？明明Docker都在WSL里安装成功了啊，事实上除了docker -v不需要依赖守护进程，其余的命令都需要依赖守护进程，而WSL恰恰是不支持docker-engine的，所以，一种曲线救国的思路就是，让WSL去连接宿主机上的docker engine。果然，还是要安装Docker for Windows啊！那么，剩下的事情变得就非常简单啦，确保系统开启Hyper-V，然后安装Docker for Windows，并打开对宿主机Docker的监听，这些相信玩过Docker的人都会啦！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2oho3u2jcj20m80f8757.jpg" alt="暴露宿主机器Docker端口" title="">                </div>                <div class="image-caption">暴露宿主机器Docker端口</div>            </figure><p>接下来，我们给WSL中的Docker设置宿主机的地址，在终端中输入下列命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DOCKER_HOST=tcp://localhost:2375</span><br></pre></td></tr></table></figure><p>此时，我们执行docker run hello-world命令，如果不出意外的话，我们会看到下面的画面，这说明我们的Docker环境已经正常工作啦：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2ohrctulqj20m80bomy1.jpg" alt="WSL中完美运行的Docker" title="">                </div>                <div class="image-caption">WSL中完美运行的Docker</div>            </figure><p>博主按捺不住内心的激动，果断安装ELK全家桶，体验了下Kibana的可视化界面，开始思考：如何把存储在Mongodb中的日志数据放到ElasticSearch中。当然，这都是后话啦，因为博主马上发现了WSL中Docker的第二个坑，那就是终端关闭以后，针对宿主机的Docker连接就结束了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/4c36074fly1g2oht8m7jnj20m80badgj.jpg" alt="ELK全家桶" title="">                </div>                <div class="image-caption">ELK全家桶</div>            </figure><p>OK，为了解决这个问题，我们继续在终端中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "export DOCKER_HOST=tcp://localhost:2375" &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span><br></pre></td></tr></table></figure><p>在使用Docker的过程中，最令人困惑的部分当属分区的挂载，因为你时刻要搞清楚，它到底表示的是容器内部的分区，还是宿主机上的分区。对于运行在WSL中的Docker而言，它会采用类似/mnt/c/Users/Payne/<Your-App>这样的更符合Linux习惯的路径，而Docker for Windows则会使用类似/c/Users/Payne/<Your-App>这样更符合Windows习惯的路径。因此，如果你在使用Docker的过程中，需要处理分区挂载相关的东西，一个比较好的建议是修改WSL的配置文件(如果不存在需要自行创建)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/wsl.conf</span><br><span class="line">[automount]</span><br><span class="line">root = /</span><br><span class="line">options = "metadata"</span><br></pre></td></tr></table></figure><p>好了，以上就是在使用WSL中的Docker搭建ELK全家桶过程中遇到的问题的梳理，从体验上来讲，我个人会把Linux平台相关的工作渐渐转移到WSL上，因为安装双系统总会分散你的精力去处理维护相关的事情，虽然装系统对程序员来说都不算是个事儿，可我内心依旧排斥自己被贴上“修电脑”的标签。我会在后续的博客中分享.NET Core下日志分析平台构建相关内容，希望大家可以继续关注我的博客，这篇文章到此结束，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      好了，以上就是在使用WSL中的Docker搭建ELK全家桶过程中遇到的问题的梳理，从体验上来讲，我个人会把Linux平台相关的工作渐渐转移到WSL上，因为安装双系统总会分散你的精力去处理维护相关的事情，虽然装系统对程序员来说都不算是个事儿，可我内心依旧排斥自己被贴上“修电脑”的标签
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="WSL" scheme="https://qinyuanpei.github.io/tags/WSL/"/>
    
      <category term="Docker" scheme="https://qinyuanpei.github.io/tags/Docker/"/>
    
      <category term="Linux" scheme="https://qinyuanpei.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>由DBeaver与PL/SQL引发的数据库吐槽</title>
    <link href="https://qinyuanpei.github.io/posts/337943766/"/>
    <id>https://qinyuanpei.github.io/posts/337943766/</id>
    <published>2019-04-19T12:52:10.000Z</published>
    <updated>2020-02-04T10:39:03.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>因为工作中需要同时面向MySQL、Oracle和SQLServer三种数据库进行开发，所以，大概从去年国庆节开始，我开始使用一个开源的数据库管理工具——DBeaver。</p><p>使用这个工具的初衷，是因为我不想在同一台电脑上安装三个客户端工具，尤其是Oracle和SQLServer这种令人恐惧的、动辄需要重装系统的应用程序。我不想再使用类似Navicat这样的软件，因为它的画风像是上个世纪VB6.0的产品一样，同理，我不喜欢用PL/SQL，因为我每次都要瞪大眼睛，在它狭窄而拥挤的画面上找表、找视图，更有甚者，有时要去找触发器、找存储过程。直到我同事给我发了一个几十M的文档，我突然间意识到，这货居然还要安装Oracle的客户端，配置数据库连接要手动去改配置文件，我一点都不喜欢PL/SQL。</p><p>除了这三种经典的关系型数据库，我们还会用Memcache和Redis这样的内存数据库，Mongodb这样的非关系型数据库，所以，我希望有一个统一的入口来管理这些连接，毕竟我身边的同事会使用三种以上的工具，譬如<strong>Sqlyog</strong>、<strong>PL/SQL</strong>、<strong>SQLServer</strong>等来处理这些工作，恰好DBeaver可以满足我80%的工作需要。目前，DBeaver企业版支持关系型数据库和非关系型数据库，而社区版仅支持关系型数据库。</p><p>可最近在写Oracle环境的触发器(<strong>存储过程和触发器都是万恶之源</strong>)时，我发现DBeaver和PL/SQL在面对同一段SQL脚本时，居然因为一点点语法上的差异而不兼容，这让我内心深处不由得想对Oracle吐槽一番。这是一个什么样的SQL脚本呢？我们一起来看下面的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">TRIGGER</span> <span class="string">"TRI_SYNC_ITEM_VALUE"</span></span><br><span class="line">  <span class="keyword">BEFORE</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="string">"or_line"</span></span><br><span class="line">  <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  v_item_value <span class="built_in">NUMBER</span>(<span class="number">18</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> ITEM_VALUE <span class="keyword">INTO</span> v_item_value <span class="keyword">FROM</span> <span class="string">"order_info"</span> <span class="keyword">WHERE</span> ORDER_GID = :OLD.ORDER_GID;</span><br><span class="line">  v_item_value := v_item_value - :OLD.PACKAGE_COUNT * NVL(to_number(:OLD.OL_UDF7),0);</span><br><span class="line">  IF v_item_value &lt; 0 THEN</span><br><span class="line">      v_item_value:= 0;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">UPDATE</span> <span class="string">"order_info"</span> <span class="keyword">SET</span> ITEM_VALUE = v_item_value <span class="keyword">WHERE</span> ORDER_GID = :OLD.ORDER_GID;</span><br><span class="line"><span class="keyword">END</span> <span class="string">"TRI_SYNC_ITEM_VALUE"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"sys_upgrade_history"</span>(UPGRADE_TYPE,VERSION_NO,UPDATE_DATE,REMARK) <span class="keyword">VALUES</span>(<span class="string">'版本更新'</span>,<span class="string">'10005'</span>,<span class="keyword">SYSDATE</span>,<span class="string">'Normal'</span>);</span><br></pre></td></tr></table></figure><p>这是实际业务中编写的一个简单触发器脚本，我们通常的编写习惯是，在写完触发器或者存储过程以及函数后，会在升级历史中插入一天新纪录，所以，这个脚本实际上由两部分组成。如果这段脚本分两次执行，那么在DBeaver和PL/SQL中效果是一样的。可如果我们希望一次执行整个脚本，根据PL/SQL的规范，一个PL/SQL脚本由如下结构组成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    [声明部分]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    [过程部分]</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>这个时候，我们就要在这两部分脚本间增加一个分隔符——<strong>/</strong>。可尴尬的是，这种写法在DBeaver中是无法编译执行的，因为它认为<strong>/</strong>是个无效的SQL关键字。我一直疑心这是个Bug，因为Github上曾有人提过类似的Issue，作者回复说，DBeaver并没有完全实现PL/SQL语法的解析，而最近更新的6.0版本中提到：对Oracle环境的存储过程编译进行了强化。博主尝试升级到最新版本，发现这个问题依然存在，哪怕用Ctrl+Enter来执行一样会报错，于是我想从这件事吐槽下某数据库，从哪里说起呢，就从PL/SQL说起吧！</p><h1 id="标准与私货"><a href="#标准与私货" class="headerlink" title="标准与私货"></a>标准与私货</h1><p>我想一开始学习SQL语法的时候，大家绝对不会想到，看起来和谐而统一的结构化查询语言，其实是貌合神离。为什么这样说呢？因为我真的不知道，一个时间函数居然可以有SYSDATE、NOW()和GETDATE()三种写法，我更不知道，有一天会因为不知道ROWNUM而被面试官鄙视，更不必说每种数据库都会定义一两种不一样的数据类型，这东西号称是有一个标准吗？比如SQL92/99这个标准定义了DML(数据操作语言)、DDL(数据定义语言)、DCL(数据控制语言)和TCL(事务控制语言)四种分类，所以，SQL的定位其实更接近于交互式命令行，它是命令式的查询语言，而非过程式的声明语言。</p><p>可在标准化进程缓慢的大背景下，每一家数据库厂商都在往自家产品里夹藏私货，以甲骨文为首的Oracle发展出了PL/SQL、以微软为首的SQLServer发展出了T-SQL。其实，我很能理解这种标准跟不上时代发展需要的阵痛，就像我们的Web领域直到10年前后才提出了HTML5标准，在此之前，我们为不同的浏览器的兼容性煞费苦心，兼容IE8与否甚至成为了评价技术好坏的一个隐性标准，可说句实话，浏览器的Bug难道不应该让浏览器厂商来修复吗？关前端工程师什么事？同样的，数据库间的差异，让我们的脚本失去了可移植性，触发器、存储过程这种严重依赖数据库的东西，一旦更换了数据库，基本等于要重头再写一遍，如今的小程序让Web变成信息孤岛，甚至Chrome正在变成下一个IE，这就是所谓“屠龙少年战胜恶龙，自身亦化为恶龙吗”？</p><p>这种不统一带来的弊端就是，我们永远写出可以完美“跨”数据库的SQL，现在跨平台基本成为了大家的共识，因为操作系统间的差异越来越小，以我个人为例，我使用的大多数软件都可以找到对应的Linux版本，这样做的好处是，我可以在无差别地从Windows切换到Linux。可现在，我们必须在MySQL里使用VARCHAR、而在Oracle里使用NVARCHAR，而在SQLServer里又要使用NVARCHAR2，可明明它们都是表示一样的东西啊，类似的还有MediumText和CLOB，是不是起一个不一样的名字会显得与众不同呢？更不必说在DDL中表约束相关的语法存在差别了。我被告知Oracle脚本中表名要用双引号括起来，理由是Oracle区分大小写，加上双引号就可以让它忽略大小写，忽略大小写不应该给Oracle一个设置吗？为什么要让我再写个多余的双引号呢？诸如此类，举不胜举。</p><h1 id="SQL是个好DSL吗？"><a href="#SQL是个好DSL吗？" class="headerlink" title="SQL是个好DSL吗？"></a>SQL是个好DSL吗？</h1><p>SQL标准定义的SQL，就是一个以集合论为基础的结构化查询语言，它天生适合的场景就是，你在命令行中输入SQL语句，然后它去执行你输入的SQL语句，它就像我们大多数情况下使用的交互式命令行，不然，为什么MySQL要提供命令行版本，主流的数据库管理工具都提供了输入SQL语句的窗口。可我们同样能意识到，SQL的表达能力有限，它无法表达顺序、条件、循环这种基本的程序结构，所以，数据库厂商几乎都对SQL标准进行了扩展，像PL/SQL和T-SQL中都提供了这些语法，进而催生出函数、触发器、存储过程一系列“万恶之源”，可从编程语言的角度来看，SQL算是个好DSL吗？</p><p>SQL试图从编程语言中获得“灵感”的思路是正确的，但总给人一种买椟还珠的感觉，譬如使用大量的英文关键字来作为保留关键字，可你很难想象，像GROUP BY和ORDER BY这样的关键字，居然可以保留中间一个甚至多个空格，既然是关键字，为什么不选择一个单词，而选择一个组合词呢？这个世界上用Begin和End的编程语言，我使用过的有Pascal和Basic，但现在我几乎不会再用它们，为什么呢？因为使用花括号(<strong>{}</strong>)更符合这个世界的发展趋势，你看Python居然用缩进代替花括号，是打算时刻用游标卡尺写代码吗？</p><p>全世界都默认用分号作为一个语句的结束，那么，当多个语句放在一起的时候，直接相互间用分号隔开，编译器或者解释器都能识别，就算不喜欢写分号的JavaScript，最新的标准提案里不还是建议要写吗？可为什么到了PL/SQL这里，明明已经用分号作为结束符了，偏偏还要再用一个/作为分隔符。我们都知道/<em>会被当做是注释的开始，那么如果我在PL/SQL里恰好在End;后写上一句/</em>，你告诉我，这到底代表什么意思？明明像&amp;&amp;、||、^等这样的运算符，都是有固定含义，并且大家所有编程需要都默认了这个原则，可偏偏有人用||来连接字符串，你告诉我，用+不好吗？就像从小到大，÷都会被认为表示一个除法运算，结果突然有一天，有人用这个符号来表示加法运算，你说你是不是有种被当做傻子的感觉。全世界都用=表示赋值运算，结果PL/SQL自作聪明地搞了个:=，我想说，你真的考虑过使用者的体验吗？</p><p>你甚至连分页、排序、分组这种事情，都无法在不同的数据库上获得一致的书写体验，读取指定数目的数据库记录，居然要纠结用到底用Limit还是Top，像Select Into这样把指定列存储到指定变量中的操作，居然要求使用者来限制结果集的数目，从函数的角度来看，返回的必然是结果集中的一个元素，只有这样才可以赋值给指定的变量，可问题是存在多条记录的时候，你必须用游标去循环读取，而不能像大多数编程语言一样，直接Map()到一个类型上然后ToList()，可能是我对SQL的要求太高了吧，毕竟它就是个面向过程的语言，OO不OO的没那么重要，可明明你可以抛出异常啊，可以对字符串做截取啊正则啊，可以在控制台里输出日志啊，可以调用各种有的没的的内部函数啊，elsif可能是因为e不发音，就像usr绝对不是拼写错误……</p><p>Python的缩进虽然为人所不齿，但它至少和大部分编程语言一样，单独一行的程序语句和由多行程序组成的程序块之间，并不需要明显的分割符号。可MySQL需要用DELIMITER $$这种奇怪的符号，PL/SQL需要用/这种奇怪的符号，SQLServer需要用@这种奇怪的符号，还有大名鼎鼎的虚拟表DUAL。也许这些东西写多了就可以记住，就像我现在可以分清SYSDATE、NOW()和GETDATE()，可它带来的问题是什么呢，大多数的触发器、存储过程、函数都是没有移植性可言的，很多年前，我们讲设计模式，最喜欢觉的例子就是，如果项目发生变动，需要更换数据库，我们要怎么设计能不改动代码，现在看起来，当时还是太天真了，真要换了数据库，估计就是重新做了，敢把全部业务写到数据库里，Web就做一个展示层的项目，有生之年应该是不会换数据库啦！</p><h1 id="多元与统一"><a href="#多元与统一" class="headerlink" title="多元与统一"></a>多元与统一</h1><p>这个世界的离奇之处在于，人们一边渴望在标准的庇护下幸福生活，又一边渴望可以超脱标准去发展独立的个性，如你我所见，多元与统一，构成了这个世界永恒的旋律，或许是因为那句名言——没有永远的敌人，只有永远的利益。可对比Web的标准化与SQL的标准化，我们却看到了截然不同的场景，虽然Chrome浏览器市场份额的不断提高，加上微软、Mozilla等“浏览器巨头”一起推动，HTML5和CSS4，让大量的工作得到了简化，尤其像WebSocket、Drag&amp;drop、Canvas等API的推出，这带来的好处是什么呢？大家不再去重点关注浏览器的兼容性问题，各种天花乱坠的炫酷特效不再通过JavaScript去控制。一个标准的API + 一个支持降级的profily，基本就可以覆盖到主流的浏览器，就算有小程序这种偏离标准的解决方案，回顾近几年整个前端领域的趋势，可以说，一切都在向着好的方向发展。</p><p>可数据库领域发生了什么，依稀记得甲骨文和Google因为Android使用了Java而官司连连，Google不得不推出一种新的基于JVM的语言——Kotlin；依稀记得甲骨文在开源社区的强烈反对下收购了MySQL，社区不得不继续维护MySQL的开源分支——MariaDB。从这两件事情，我完全提不起对甲骨文这家公司的好感，虽然大家都说Oracle品质卓越，可实际使用下来，经常出问题的Oracle。从LAMP时代开始，MySQL就以其免费、轻量的特点广泛应用在互联网产品中，直至今天有大量的云产品使用着MySQL，而Oracle和SQLServer则被更多地使用在私有部署的场景中。虽然，我承认把数据掌握在自己手里会放心些，可当你没有能力去维护这些东西时，付出的时间和精力远远要比这多。甲骨文收购了那么多公司的产品，时至今日，对整个行业的标准化有什么推动呢？Oracle数据库依然难装、难用，PL/SQL同样难用得要命，可我们这世界一直都很奇怪，最流行的偏偏未必是最好的，据说Oracle的代码写得非常差，开发人员表示不会在为它继续开发新功能。</p><p>可能有时候，我们完全说不出来，一件东西是好还是坏，就像JavaScript能在前端开发流行，是因为没有其它的选择，你说这门语言没有缺点吗？当然有，JavaScript里各种“骚操作”和“黑科技”，甚至吐槽三天三夜都说不完。同样，还有Python这门语言，大家都觉得它的解释器慢腾腾的，动态语言遇上大型项目简直就是火葬场，还有神来之笔—— 通过缩进来代替花括号。我最终还是在PL/SQL里执行了我的脚本，只要我在使用DBeaver 的时候，人肉地区分/前后的SQL语句就可以了。果然，我骨子里还是一个不喜欢写SQL脚本的人，因为我认为这么别扭的东西简直不能称之为脚本，你看看Lua，再看看Python，有哪一门脚本语言有SQL脚本这样别扭呢？数据库对我而言，就是一个存取数据的“潘多拉魔盒”，索引啊，触发器啊，数据库任务啊，执行计划啊，存储过程啊，难道不属于暴露了太多细节给用户吗？我天天用这个数据库，我每天用哪些表，我每天用哪些字段，你作为一个成熟的数据库了，居然不能自己去解决这些问题，我对你很失望啊，请记住，程序员比任何人都喜欢偷懒。</p>]]></content>
    
    <summary type="html">
    
      也许这些东西写多了就可以记住，就像我现在可以分清SYSDATE、NOW()和GETDATE()，可它带来的问题是什么呢，大多数的触发器、存储过程、函数都是没有移植性可言的，很多年前，我们讲设计模式，最喜欢觉的例子就是，如果项目发生变动，需要更换数据库，我们要怎么设计能不改动代码，现在看起来，当时还是太天真了，真要换了数据库，估计就是重新做了，敢把全部业务写到数据库里，Web就做一个展示层的项目，有生之年应该是不会换数据库啦
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="DBeaver" scheme="https://qinyuanpei.github.io/tags/DBeaver/"/>
    
      <category term="PL/SQL" scheme="https://qinyuanpei.github.io/tags/PL-SQL/"/>
    
      <category term="Oracle" scheme="https://qinyuanpei.github.io/tags/Oracle/"/>
    
  </entry>
  
</feed>
